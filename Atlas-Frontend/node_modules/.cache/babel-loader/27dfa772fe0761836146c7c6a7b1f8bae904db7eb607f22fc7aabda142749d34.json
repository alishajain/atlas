{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnIdDropDown.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getYarnIds } from \"../API/YarnApi\"; // Import the API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnIDDropdown = () => {\n  _s();\n  const [yarnIds, setYarnIds] = useState([]); // State to hold the Yarn IDs\n  const [selectedYarnId, setSelectedYarnId] = useState(\"\"); // State for the selected YarnId\n  const [loading, setLoading] = useState(true); // Loading state to show loading spinner\n  const [error, setError] = useState(null); // State to store any errors\n\n  useEffect(() => {\n    // Fetch Yarn IDs when the component mounts\n    getYarnIds().then(data => {\n      setYarnIds(data.data); // Set the fetched Yarn IDs\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      setError(error.message); // Set error state if there's an issue\n      setLoading(false); // Set loading to false even if there's an error\n    });\n  }, []);\n\n  // Handle dropdown selection change\n  const handleSelectChange = e => {\n    setSelectedYarnId(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Yarn ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Yarn IDs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedYarnId,\n      onChange: handleSelectChange,\n      disabled: loading // Disable dropdown while loading\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Yarn ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), \" \", yarnIds.map(yarn => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: yarn.YarnId,\n        children: yarn.YarnId\n      }, yarn.YarnId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), selectedYarnId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected Yarn ID: \", selectedYarnId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnIDDropdown, \"OHxxDcHDIO4QISe5do0U8ZfeAhs=\");\n_c = YarnIDDropdown;\nexport default YarnIDDropdown;\nvar _c;\n$RefreshReg$(_c, \"YarnIDDropdown\");","map":{"version":3,"names":["React","useState","useEffect","getYarnIds","jsxDEV","_jsxDEV","YarnIDDropdown","_s","yarnIds","setYarnIds","selectedYarnId","setSelectedYarnId","loading","setLoading","error","setError","then","data","catch","message","handleSelectChange","e","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onChange","disabled","map","yarn","YarnId","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnIdDropDown.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getYarnIds } from \"../API/YarnApi\";  // Import the API function\r\n\r\nconst YarnIDDropdown = () => {\r\n  const [yarnIds, setYarnIds] = useState([]);  // State to hold the Yarn IDs\r\n  const [selectedYarnId, setSelectedYarnId] = useState(\"\");  // State for the selected YarnId\r\n  const [loading, setLoading] = useState(true);  // Loading state to show loading spinner\r\n  const [error, setError] = useState(null);  // State to store any errors\r\n\r\n  useEffect(() => {\r\n    // Fetch Yarn IDs when the component mounts\r\n    getYarnIds()\r\n      .then((data) => {\r\n        setYarnIds(data.data);  // Set the fetched Yarn IDs\r\n        setLoading(false);  // Set loading to false after data is fetched\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);  // Set error state if there's an issue\r\n        setLoading(false);  // Set loading to false even if there's an error\r\n      });\r\n  }, []);\r\n\r\n  // Handle dropdown selection change\r\n  const handleSelectChange = (e) => {\r\n    setSelectedYarnId(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Select Yarn ID</h2>\r\n      \r\n      {loading && <p>Loading Yarn IDs...</p>} {/* Show loading text while fetching */}\r\n      \r\n      {error && <p style={{ color: 'red' }}>Error: {error}</p>} {/* Show error message if any */}\r\n      \r\n      <select\r\n        value={selectedYarnId}\r\n        onChange={handleSelectChange}\r\n        disabled={loading}  // Disable dropdown while loading\r\n      >\r\n        <option value=\"\">Select Yarn ID</option> {/* Default option */}\r\n        {yarnIds.map((yarn) => (\r\n          <option key={yarn.YarnId} value={yarn.YarnId}>\r\n            {yarn.YarnId}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      \r\n      {/* Optionally, you can display the selected YarnId */}\r\n      {selectedYarnId && <p>Selected Yarn ID: {selectedYarnId}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnIDDropdown;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}