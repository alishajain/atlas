{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnUsage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnUsage = () => {\n  _s();\n  const RSN = 69; // You can change this to dynamically set it if needed.\n\n  // State to hold matching names, color IDs, and color details\n  const [matchingNames, setMatchingNames] = useState([]);\n  const [yarnUsageByYarnId, setYarnUsageByYarnId] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!RSN) return;\n      try {\n        // Step 1: Get matching names by RSN\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\n        setMatchingNames(matchingNamesResponse.data);\n\n        // Step 2: For each matching name, get color IDs and fetch color details\n        const fetchColorDetails = async () => {\n          const yarnUsage = {}; // This will hold total yarn usage grouped by YarnId\n\n          for (const matchingName of matchingNamesResponse.data) {\n            var _colorIdsResponse$dat;\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\n\n            // Safeguard: Check if colorIdsResponse has data\n            if ((colorIdsResponse === null || colorIdsResponse === void 0 ? void 0 : (_colorIdsResponse$dat = colorIdsResponse.data) === null || _colorIdsResponse$dat === void 0 ? void 0 : _colorIdsResponse$dat.length) > 0) {\n              const colorDetailPromises = colorIdsResponse.data.map(async color => {\n                if (color !== null && color !== void 0 && color.ColorId) {\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\n                  return colorDetail[0]; // Assume colorDetail is an array and we're taking the first element\n                }\n                return null;\n              });\n\n              // Wait for all color details to be fetched for the current matching name\n              const colorDetailsData = await Promise.all(colorDetailPromises);\n\n              // Process each color detail and sum yarn usage grouped by YarnId\n              colorDetailsData.forEach(colorDetail => {\n                if (colorDetail && colorDetail.YarnUsage) {\n                  colorDetail.YarnUsage.forEach(yarn => {\n                    if (!yarnUsage[yarn.YarnId]) {\n                      yarnUsage[yarn.YarnId] = 0;\n                    }\n                    yarnUsage[yarn.YarnId] += yarn.UsageAmount || 0; // Sum up yarn usage\n                  });\n                }\n              });\n            }\n          }\n          setYarnUsageByYarnId(yarnUsage); // Store the total yarn usage\n          setLoading(false); // Set loading to false when data is fetched\n        };\n        fetchColorDetails(); // Call to fetch color details\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false); // Set loading to false in case of error\n      }\n    };\n    fetchData(); // Fetch data when the component mounts\n  }, [RSN]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Yarn Usage Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading yarn usage data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : Object.keys(yarnUsageByYarnId).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Total Yarn Usage Grouped by YarnId\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(yarnUsageByYarnId).map(([yarnId, totalUsage]) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Yarn ID: \", yarnId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Usage: \", totalUsage, \" units\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, yarnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No yarn usage data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnUsage, \"6kw2Jwjq5Vlb9T8RZoSES3PNKRc=\");\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","useState","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","jsxDEV","_jsxDEV","YarnUsage","_s","RSN","matchingNames","setMatchingNames","yarnUsageByYarnId","setYarnUsageByYarnId","loading","setLoading","fetchData","matchingNamesResponse","data","fetchColorDetails","yarnUsage","matchingName","_colorIdsResponse$dat","colorIdsResponse","MatchingName","length","colorDetailPromises","map","color","ColorId","colorDetail","colorDetailsData","Promise","all","forEach","yarn","YarnId","UsageAmount","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","entries","yarnId","totalUsage","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\nconst YarnUsage = () => {\r\n  const RSN = 69; // You can change this to dynamically set it if needed.\r\n\r\n  // State to hold matching names, color IDs, and color details\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [yarnUsageByYarnId, setYarnUsageByYarnId] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) return;\r\n\r\n      try {\r\n        // Step 1: Get matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        // Step 2: For each matching name, get color IDs and fetch color details\r\n        const fetchColorDetails = async () => {\r\n          const yarnUsage = {}; // This will hold total yarn usage grouped by YarnId\r\n\r\n          for (const matchingName of matchingNamesResponse.data) {\r\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n\r\n            // Safeguard: Check if colorIdsResponse has data\r\n            if (colorIdsResponse?.data?.length > 0) {\r\n              const colorDetailPromises = colorIdsResponse.data.map(async (color) => {\r\n                if (color?.ColorId) {\r\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\r\n                  return colorDetail[0]; // Assume colorDetail is an array and we're taking the first element\r\n                }\r\n                return null;\r\n              });\r\n\r\n              // Wait for all color details to be fetched for the current matching name\r\n              const colorDetailsData = await Promise.all(colorDetailPromises);\r\n\r\n              // Process each color detail and sum yarn usage grouped by YarnId\r\n              colorDetailsData.forEach((colorDetail) => {\r\n                if (colorDetail && colorDetail.YarnUsage) {\r\n                  colorDetail.YarnUsage.forEach((yarn) => {\r\n                    if (!yarnUsage[yarn.YarnId]) {\r\n                      yarnUsage[yarn.YarnId] = 0;\r\n                    }\r\n                    yarnUsage[yarn.YarnId] += yarn.UsageAmount || 0; // Sum up yarn usage\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          }\r\n\r\n          setYarnUsageByYarnId(yarnUsage); // Store the total yarn usage\r\n          setLoading(false); // Set loading to false when data is fetched\r\n        };\r\n\r\n        fetchColorDetails(); // Call to fetch color details\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false); // Set loading to false in case of error\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, [RSN]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details</h1>\r\n      {loading ? (\r\n        <p>Loading yarn usage data...</p>\r\n      ) : Object.keys(yarnUsageByYarnId).length > 0 ? (\r\n        <div>\r\n          <h2>Total Yarn Usage Grouped by YarnId</h2>\r\n          <ul>\r\n            {Object.entries(yarnUsageByYarnId).map(([yarnId, totalUsage]) => (\r\n              <li key={yarnId}>\r\n                <h3>Yarn ID: {yarnId}</h3>\r\n                <p>Total Usage: {totalUsage} units</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>No yarn usage data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}