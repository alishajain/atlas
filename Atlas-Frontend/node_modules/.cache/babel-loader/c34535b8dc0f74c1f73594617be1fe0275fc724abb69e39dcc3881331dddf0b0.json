{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL;// Function to register a new user\nexport const registerUser=async userData=>{try{const response=await axios.post(`${API_URL}/signup`,userData);return response.data;}catch(error){console.error(\"Error registering user:\",error.response?error.response.data:error.message);throw error.response?error.response.data:error.message;}};// Function to check if an EmpID already exists\nexport const checkIfEmpIDExists=async empID=>{try{const response=await axios.get(`${API_URL}/users`);const users=response.data;// Check if any user has the same EmpID\nconst userExists=users.some(user=>user.EmpID===empID);return userExists;}catch(error){console.error(\"Error checking EmpID:\",error.response?error.response.data:error.message);throw error.response?error.response.data:error.message;}};// Function to login a user\nexport const loginUser=async credentials=>{try{const response=await axios.post(`${API_URL}/login`,credentials);return response.data;}catch(error){console.error(\"Error logging in user:\",error.response?error.response.data:error.message);throw error.response?error.response.data:error.message;}};// Function to get all users (admin functionality)\nexport const getAllUsers=async()=>{try{const response=await axios.get(`${API_URL}/users`);return response.data;}catch(error){console.error(\"Error fetching users:\",error.response?error.response.data:error.message);throw error.response?error.response.data:error.message;}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","post","data","error","console","message","checkIfEmpIDExists","empID","get","users","userExists","some","user","EmpID","loginUser","credentials","getAllUsers"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/UserApi.js"],"sourcesContent":["import axios from 'axios';\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Function to register a new user\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/signup`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error registering user:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n\r\n// Function to check if an EmpID already exists\r\nexport const checkIfEmpIDExists = async (empID) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users`);\r\n    const users = response.data;\r\n\r\n    // Check if any user has the same EmpID\r\n    const userExists = users.some(user => user.EmpID === empID);\r\n    return userExists;\r\n  } catch (error) {\r\n    console.error(\"Error checking EmpID:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n\r\n// Function to login a user\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, credentials);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error logging in user:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n\r\n// Function to get all users (admin functionality)\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching users:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAE7C;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,SAAS,CAAEK,QAAQ,CAAC,CAChE,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAAC,CAC9F,KAAM,CAAAF,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAC5D,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAG,KAAO,CAAAC,KAAK,EAAK,CACjD,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,QAAQ,CAAC,CACpD,KAAM,CAAAe,KAAK,CAAGT,QAAQ,CAACE,IAAI,CAE3B;AACA,KAAM,CAAAQ,UAAU,CAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACC,KAAK,GAAKN,KAAK,CAAC,CAC3D,MAAO,CAAAG,UAAU,CACnB,CAAE,MAAOP,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAAC,CAC5F,KAAM,CAAAF,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAC5D,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAS,SAAS,CAAG,KAAO,CAAAC,WAAW,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,QAAQ,CAAEqB,WAAW,CAAC,CAClE,MAAO,CAAAf,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAAC,CAC7F,KAAM,CAAAF,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAC5D,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAW,WAAW,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,QAAQ,CAAC,CACpD,MAAO,CAAAM,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAAC,CAC5F,KAAM,CAAAF,KAAK,CAACH,QAAQ,CAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAGC,KAAK,CAACE,OAAO,CAC5D,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}