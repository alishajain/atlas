{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\AddColorDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { addColorDetail } from \"../API/ColorDetailApi\";\nimport { getColorId } from \"../API/ColorApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddColorDetails = ({\n  matchingName,\n  RSN,\n  size,\n  selectedStates\n}) => {\n  _s();\n  const initialState = {\n    ColorId: \"\",\n    BaseColor: {\n      name: null,\n      weight: 0\n    },\n    colors: Array(14).fill({\n      name: null,\n      weight: 0\n    }),\n    totalWeight: 0\n  };\n  console.log(size);\n  // Initialize the formData based on selected panels\n  const [formData, setFormData] = useState({\n    ColorId: \"\",\n    Size: size,\n    BaseColor: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color1: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color2: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color3: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color4: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color5: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color6: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color7: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color8: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color9: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color10: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color11: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color12: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color13: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    Color14: {\n      Name: \"\",\n      Weight: \"\"\n    }\n  });\n  const [colorIds, setColorIds] = useState({});\n\n  // Extract selected panels from the selectedStates object\n  const selectedPanels = Object.entries(selectedStates).filter(([_, value]) => value === true).map(([key]) => key);\n  useEffect(() => {\n    // Set initial formData when selectedStates change\n    setFormData(selectedPanels.map(panelName => ({\n      ...initialState,\n      ColorId: panelName\n    })));\n  }, [selectedStates]);\n\n  // Fetch ColorId for each selected panel\n  const fetchColorId = async () => {\n    try {\n      const newColorIds = {};\n\n      // Loop through selected panels and fetch ColorId\n      for (const Panel of selectedPanels) {\n        const data = await getColorId(RSN, matchingName, Panel);\n        newColorIds[Panel] = data.ColorId; // Use only Panel as the key\n      }\n\n      // Store all ColorIds in the state\n      setColorIds(newColorIds);\n    } catch (error) {\n      console.error(\"Error fetching ColorId:\", error);\n    }\n  };\n\n  //console.log(colorIds);\n  // Handle input change for BaseColor and other colors\n  const handleInputChange = (e, index, field, colorIndex = null) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedFormData = [...formData];\n    if (field === \"colors\" && colorIndex !== null) {\n      // Update the specific color field (either name or weight)\n      updatedFormData[index].colors[colorIndex][name] = value;\n    } else if (field === \"BaseColor\") {\n      updatedFormData[index].BaseColor[name] = value;\n    } else {\n      updatedFormData[index][name] = value;\n    }\n\n    // Recalculate total weight\n    updatedFormData[index].totalWeight = updatedFormData[index].colors.reduce((sum, color) => sum + (parseFloat(color.weight) || 0), 0);\n    updatedFormData[index].totalWeight += parseFloat(updatedFormData[index].BaseColor.weight) || 0;\n    setFormData(updatedFormData);\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Prepare the data in the expected format\n    const colorData = formData.map(row => {\n      const colors = row.colors.reduce((acc, color, index) => {\n        acc[`Color${index + 1}`] = {\n          name: color.name,\n          weight: color.weight\n        };\n        return acc;\n      }, {});\n      return {\n        ColorId: row.ColorId,\n        BaseColor: row.BaseColor,\n        totalWeight: row.totalWeight,\n        ...colors\n      };\n    });\n    try {\n      // Send the data to the backend\n      const response = await Promise.all(colorData.map(data => addColorDetail(data)));\n      console.log(response); // Log the successful response\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchColorId,\n      children: \"Fetch ColorIds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: matchingName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(AddColorDetails, \"GwlCJYG95aB6XGMVUGS79Lp/jDk=\");\n_c = AddColorDetails;\nexport default AddColorDetails;\nvar _c;\n$RefreshReg$(_c, \"AddColorDetails\");","map":{"version":3,"names":["React","useState","useEffect","addColorDetail","getColorId","jsxDEV","_jsxDEV","AddColorDetails","matchingName","RSN","size","selectedStates","_s","initialState","ColorId","BaseColor","name","weight","colors","Array","fill","totalWeight","console","log","formData","setFormData","Size","Name","Weight","Color1","Color2","Color3","Color4","Color5","Color6","Color7","Color8","Color9","Color10","Color11","Color12","Color13","Color14","colorIds","setColorIds","selectedPanels","Object","entries","filter","_","value","map","key","panelName","fetchColorId","newColorIds","Panel","data","error","handleInputChange","e","index","field","colorIndex","target","updatedFormData","reduce","sum","color","parseFloat","handleSubmit","preventDefault","colorData","row","acc","response","Promise","all","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddColorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { addColorDetail } from \"../API/ColorDetailApi\";\r\nimport { getColorId } from \"../API/ColorApi\";\r\n\r\nconst AddColorDetails = ({ matchingName, RSN, size, selectedStates }) => {\r\n  const initialState = {\r\n    ColorId: \"\",\r\n    BaseColor: { name: null, weight: 0 },\r\n    colors: Array(14).fill({ name: null, weight: 0 }),\r\n    totalWeight: 0,\r\n  };\r\n\r\n  console.log(size);\r\n  // Initialize the formData based on selected panels\r\n  const [formData, setFormData] = useState({\r\n    ColorId: \"\",\r\n    Size: size,\r\n    BaseColor: { Name: \"\", Weight: \"\" },\r\n    Color1: { Name: \"\", Weight: \"\" },\r\n    Color2: { Name: \"\", Weight: \"\" },\r\n    Color3: { Name: \"\", Weight: \"\" },\r\n    Color4: { Name: \"\", Weight: \"\" },\r\n    Color5: { Name: \"\", Weight: \"\" },\r\n    Color6: { Name: \"\", Weight: \"\" },\r\n    Color7: { Name: \"\", Weight: \"\" },\r\n    Color8: { Name: \"\", Weight: \"\" },\r\n    Color9: { Name: \"\", Weight: \"\" },\r\n    Color10: { Name: \"\", Weight: \"\" },\r\n    Color11: { Name: \"\", Weight: \"\" },\r\n    Color12: { Name: \"\", Weight: \"\" },\r\n    Color13: { Name: \"\", Weight: \"\" },\r\n    Color14: { Name: \"\", Weight: \"\" },\r\n  });\r\n  const [colorIds, setColorIds] = useState({});\r\n\r\n  // Extract selected panels from the selectedStates object\r\n  const selectedPanels = Object.entries(selectedStates)\r\n    .filter(([_, value]) => value === true)\r\n    .map(([key]) => key);\r\n\r\n\r\n  useEffect(() => {\r\n    // Set initial formData when selectedStates change\r\n    setFormData(\r\n      selectedPanels.map((panelName) => ({\r\n        ...initialState,\r\n        ColorId: panelName,\r\n      }))\r\n    );\r\n  }, [selectedStates]);\r\n\r\n  // Fetch ColorId for each selected panel\r\n  const fetchColorId = async () => {\r\n    try {\r\n      const newColorIds = {};\r\n\r\n      // Loop through selected panels and fetch ColorId\r\n      for (const Panel of selectedPanels) {\r\n        const data = await getColorId(RSN, matchingName, Panel);\r\n        newColorIds[Panel] = data.ColorId; // Use only Panel as the key\r\n      }\r\n\r\n      // Store all ColorIds in the state\r\n      setColorIds(newColorIds);\r\n    } catch (error) {\r\n      console.error(\"Error fetching ColorId:\", error);\r\n    }\r\n  };\r\n\r\n  //console.log(colorIds);\r\n  // Handle input change for BaseColor and other colors\r\n  const handleInputChange = (e, index, field, colorIndex = null) => {\r\n    const { name, value } = e.target;\r\n    const updatedFormData = [...formData];\r\n\r\n    if (field === \"colors\" && colorIndex !== null) {\r\n      // Update the specific color field (either name or weight)\r\n      updatedFormData[index].colors[colorIndex][name] = value;\r\n    } else if (field === \"BaseColor\") {\r\n      updatedFormData[index].BaseColor[name] = value;\r\n    } else {\r\n      updatedFormData[index][name] = value;\r\n    }\r\n\r\n    // Recalculate total weight\r\n    updatedFormData[index].totalWeight = updatedFormData[index].colors.reduce(\r\n      (sum, color) => sum + (parseFloat(color.weight) || 0), 0\r\n    );\r\n    updatedFormData[index].totalWeight += (parseFloat(updatedFormData[index].BaseColor.weight) || 0);\r\n\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Prepare the data in the expected format\r\n    const colorData = formData.map((row) => {\r\n      const colors = row.colors.reduce((acc, color, index) => {\r\n        acc[`Color${index + 1}`] = { name: color.name, weight: color.weight };\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        ColorId: row.ColorId,\r\n        BaseColor: row.BaseColor,\r\n        totalWeight: row.totalWeight,\r\n        ...colors,\r\n      };\r\n    });\r\n\r\n    try {\r\n      // Send the data to the backend\r\n      const response = await Promise.all(\r\n        colorData.map((data) => addColorDetail(data))\r\n      );\r\n      console.log(response); // Log the successful response\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={fetchColorId}>Fetch ColorIds</button>\r\n      <h3>{matchingName}</h3> {/* Display the matching name as a heading */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddColorDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}