{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnUsage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnUsage = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  //const RSN = location.state ? location.state.RSN : null;\n\n  const RSN = 69;\n  // State to hold matching names, color IDs, and color details\n  const [matchingNames, setMatchingNames] = useState([]);\n  const [colorDetails, setColorDetails] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!RSN) return;\n      try {\n        // Step 1: Get matching names by RSN\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\n        console.log(matchingNamesResponse);\n        setMatchingNames(matchingNamesResponse.data);\n\n        // Step 2: For each matching name, get color IDs\n        const fetchColorDetails = async () => {\n          const details = {};\n          for (const matchingName of matchingNamesResponse.data) {\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\n\n            // Step 3: For each color ID, get color details\n            const colorDetailPromises = colorIdsResponse.data.map(async color => {\n              const colorDetail = await getColorDetailByColorId(color.ColorId);\n              return colorDetail.data;\n            });\n\n            // Wait for all color details to be fetched for the current matching name\n            const colorDetailsData = await Promise.all(colorDetailPromises);\n            details[matchingName.MatchingName] = colorDetailsData;\n          }\n          setColorDetails(details); // Store the grouped color details\n        };\n        fetchColorDetails(); // Call to fetch color details\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData(); // Fetch data when the component mounts\n  }, [RSN]);\n  console.log(matchingNames);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Yarn Usage Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), Object.keys(colorDetails).length > 0 ? Object.entries(colorDetails).map(([matchingName, colors]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: matchingName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: colors.map((colorDetail, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Color ID: \", colorDetail.ColorId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Color Name: \", colorDetail.ColorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, matchingName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading yarn usage data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnUsage, \"Slxvyhu6FwEIDnWUjb6DK0H7Stc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","jsxDEV","_jsxDEV","YarnUsage","_s","navigate","location","RSN","matchingNames","setMatchingNames","colorDetails","setColorDetails","fetchData","matchingNamesResponse","console","log","data","fetchColorDetails","details","matchingName","colorIdsResponse","MatchingName","colorDetailPromises","map","color","colorDetail","ColorId","colorDetailsData","Promise","all","error","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","entries","colors","index","ColorName","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\nconst YarnUsage = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  //const RSN = location.state ? location.state.RSN : null;\r\n\r\n  const RSN = 69;\r\n  // State to hold matching names, color IDs, and color details\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [colorDetails, setColorDetails] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) return;\r\n\r\n      try {\r\n        // Step 1: Get matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        console.log(matchingNamesResponse);\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        // Step 2: For each matching name, get color IDs\r\n        const fetchColorDetails = async () => {\r\n          const details = {};\r\n\r\n          for (const matchingName of matchingNamesResponse.data) {\r\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n\r\n            // Step 3: For each color ID, get color details\r\n            const colorDetailPromises = colorIdsResponse.data.map(async (color) => {\r\n              const colorDetail = await getColorDetailByColorId(color.ColorId);\r\n              return colorDetail.data;\r\n            });\r\n\r\n            // Wait for all color details to be fetched for the current matching name\r\n            const colorDetailsData = await Promise.all(colorDetailPromises);\r\n            details[matchingName.MatchingName] = colorDetailsData;\r\n          }\r\n\r\n          setColorDetails(details); // Store the grouped color details\r\n        };\r\n\r\n        fetchColorDetails(); // Call to fetch color details\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, [RSN]);\r\n\r\n  console.log(matchingNames);\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details</h1>\r\n      {/* Display the color details grouped by matching name */}\r\n      {Object.keys(colorDetails).length > 0 ? (\r\n        Object.entries(colorDetails).map(([matchingName, colors]) => (\r\n          <div key={matchingName}>\r\n            <h2>{matchingName}</h2>\r\n            <ul>\r\n              {colors.map((colorDetail, index) => (\r\n                <li key={index}>\r\n                  <h3>Color ID: {colorDetail.ColorId}</h3>\r\n                  {/* Display other color details here as needed */}\r\n                  <p>Color Name: {colorDetail.ColorName}</p>\r\n                  {/* Add any other details you want to display */}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Loading yarn usage data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}