{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ShowColor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getColorMatchingByRSN } from \"../API/ColorApi\"; // Function to fetch color matching data\nimport ShowColorDetail from \"./ShowColorDetails\"; // Import ShowColorDetail to display color details\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowColor = ({\n  RSN\n}) => {\n  _s();\n  const [colorMatchingData, setColorMatchingData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchColorMatchingData = async () => {\n      setLoading(true);\n      try {\n        const response = await getColorMatchingByRSN(RSN);\n        setColorMatchingData(response.data); // Store color matching data\n      } catch (err) {\n        setError(\"Failed to fetch color matching details.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (RSN) {\n      fetchColorMatchingData();\n    }\n  }, [RSN]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading color matching data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n\n  // Group color matching data by MatchingName\n  const groupedData = colorMatchingData === null || colorMatchingData === void 0 ? void 0 : colorMatchingData.reduce((acc, item) => {\n    const {\n      MatchingName\n    } = item;\n    if (!acc[MatchingName]) {\n      acc[MatchingName] = [];\n    }\n    acc[MatchingName].push(item);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Color Matching Details for RSN: \", RSN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), groupedData ? Object.keys(groupedData).map((matchingName, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Matching name: \", matchingName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: \"100%\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ColorId\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: groupedData[matchingName].map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.ColorId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Panel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 21\n            }, this)]\n          }, itemIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), groupedData[matchingName].map((item, itemIndex) => /*#__PURE__*/_jsxDEV(ShowColorDetail, {\n        ColorId: item.ColorId\n      }, itemIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No color matching details available for this RSN.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowColor, \"F5ToyLzG1KlGMb3lKzhci+VrCAg=\");\n_c = ShowColor;\nexport default ShowColor;\nvar _c;\n$RefreshReg$(_c, \"ShowColor\");","map":{"version":3,"names":["React","useState","useEffect","getColorMatchingByRSN","ShowColorDetail","jsxDEV","_jsxDEV","ShowColor","RSN","_s","colorMatchingData","setColorMatchingData","loading","setLoading","error","setError","fetchColorMatchingData","response","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","groupedData","reduce","acc","item","MatchingName","push","Object","keys","map","matchingName","index","border","width","marginTop","itemIndex","ColorId","Panel","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ShowColor.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getColorMatchingByRSN } from \"../API/ColorApi\";  // Function to fetch color matching data\r\nimport ShowColorDetail from \"./ShowColorDetails\";  // Import ShowColorDetail to display color details\r\n\r\nconst ShowColor = ({ RSN }) => {\r\n  const [colorMatchingData, setColorMatchingData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchColorMatchingData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await getColorMatchingByRSN(RSN);\r\n        setColorMatchingData(response.data);  // Store color matching data\r\n      } catch (err) {\r\n        setError(\"Failed to fetch color matching details.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (RSN) {\r\n      fetchColorMatchingData();\r\n    }\r\n  }, [RSN]);\r\n\r\n  if (loading) return <p>Loading color matching data...</p>;\r\n  if (error) return <p style={{ color: \"red\" }}>{error}</p>;\r\n\r\n  // Group color matching data by MatchingName\r\n  const groupedData = colorMatchingData?.reduce((acc, item) => {\r\n    const { MatchingName } = item;\r\n    if (!acc[MatchingName]) {\r\n      acc[MatchingName] = [];\r\n    }\r\n    acc[MatchingName].push(item);\r\n    return acc;\r\n  }, {});\r\n\r\n  return (\r\n    <div>\r\n      <h1>Color Matching Details for RSN: {RSN}</h1>\r\n      {groupedData ? (\r\n        Object.keys(groupedData).map((matchingName, index) => (\r\n          <div key={index}>\r\n            <h2>Matching name: {matchingName}</h2>\r\n            <table border=\"1\" style={{ width: \"100%\", marginTop: \"20px\" }}>\r\n              <thead>\r\n                <tr>\r\n                  <th>ColorId</th>\r\n                  <th>Panel</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {groupedData[matchingName].map((item, itemIndex) => (\r\n                  <tr key={itemIndex}>\r\n                    <td>{item.ColorId}</td>\r\n                    <td>{item.Panel}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* Now, display the color detail for each ColorId in this matching group */}\r\n            {groupedData[matchingName].map((item, itemIndex) => (\r\n              <ShowColorDetail key={itemIndex} ColorId={item.ColorId} />\r\n            ))}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No color matching details available for this RSN.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowColor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}