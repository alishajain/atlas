{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\AddKnittingDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { addKnittingDetails, getMachineNos } from \"../API/SampleApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddKnittingDetailsForm = () => {\n  _s();\n  var _location$state, _location$state2;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const selectedStates = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.selectedFields) || {}; // Access selected fields\n  const RSN = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.RSN) || \"\"; // Access RSN\n\n  const [formData, setFormData] = useState({\n    RSN: RSN,\n    Size: \"\",\n    FrontRight: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    FrontLeft: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    FrontComplete: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    BackRight: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    BackLeft: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    BackComplete: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    SleeveRight: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    SleeveLeft: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    BothSleeves: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    Tape: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    Collar: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    Kharcha1: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    Kharcha2: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    Kharcha3: {\n      Weight: \"\",\n      Time: \"\",\n      MachineNo: \"\"\n    },\n    Total: {\n      Weight: 0,\n      Time: 0\n    }\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [machineNos, setMachineNos] = useState([]);\n  useEffect(() => {\n    // Fetch machine numbers from the API\n    const fetchMachineNos = async () => {\n      try {\n        const response = await getMachineNos();\n        setMachineNos(response.data); // Set the machine numbers to state\n      } catch (error) {\n        setError(\"Failed to fetch machine numbers\");\n      }\n    };\n    fetchMachineNos();\n  }, []); // Only run once on component mount\n\n  useEffect(() => {\n    // Initialize formData based on selectedStates\n    setFormData(prevData => {\n      const newFormData = {\n        ...prevData\n      };\n      Object.keys(newFormData).forEach(key => {\n        if (selectedStates[key]) {\n          newFormData[key] = {\n            Weight: \"\",\n            Time: \"\",\n            MachineNo: \"\" // No longer handling MachineType\n          }; // Initialize with new fields\n        }\n      });\n      return newFormData;\n    });\n  }, [selectedStates]); // Re-run when selectedStates change\n\n  // Function to handle change in any input field (weight, time, machine model)\n  const handleChange = (e, field, type) => {\n    const {\n      value\n    } = e.target;\n\n    // Ensure the value is not negative for weight and time fields\n    const validValue = type === \"Weight\" || type === \"Time\" ? Math.max(0, parseFloat(value)) // Ensure non-negative values\n    : value;\n    setFormData(prevData => {\n      const newFormData = {\n        ...prevData\n      };\n      if (!newFormData[field]) {\n        newFormData[field] = {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\" // No longer handling MachineType\n        }; // Initialize if undefined\n      }\n\n      // Set value to 0 if it's empty for weight/time or empty string for machine fields\n      if (type === \"Weight\" || type === \"Time\") {\n        newFormData[field][type] = validValue || 0; // Use validated value (or 0 if empty)\n      } else {\n        newFormData[field][type] = value === \"\" ? \"\" : value; // Set to empty string if empty\n      }\n\n      // Recalculate total weight and total time\n      newFormData.Total = calculateTotal(newFormData);\n      return newFormData;\n    });\n  };\n\n  // Function to calculate the total weight and total time\n  const calculateTotal = data => {\n    let totalWeight = 0;\n    let totalTime = 0;\n\n    // Iterate over the fields that contain weight and time\n    Object.keys(data).forEach(key => {\n      if (key !== \"RSN\" && key !== \"Size\" && key !== \"Total\") {\n        const {\n          Weight,\n          Time\n        } = data[key];\n        totalWeight += parseFloat(Weight) || 0;\n        totalTime += parseFloat(Time) || 0;\n      }\n    });\n    return {\n      Weight: totalWeight,\n      Time: totalTime\n    };\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Ensure all fields have weight, time, and machine number\n    const updatedFormData = {\n      ...formData\n    };\n    Object.keys(updatedFormData).forEach(field => {\n      if (typeof updatedFormData[field] === \"object\") {\n        const {\n          Weight,\n          Time,\n          MachineNo\n        } = updatedFormData[field];\n\n        // Set to 0 if Weight or Time is empty\n        if (Weight === \"\") updatedFormData[field].Weight = 0;\n        if (Time === \"\") updatedFormData[field].Time = 0;\n        if (MachineNo === \"\") updatedFormData[field].MachineNo = \"\"; // No longer handling MachineType\n      }\n    });\n\n    // Start loading indicator\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    console.log(updatedFormData);\n    try {\n      // Send the data to the backend via the API function\n      const response = await addKnittingDetails(updatedFormData);\n\n      // On success, display success message and clear form\n      setSuccess(\"Knitting details added successfully!\");\n\n      // Show ColorMatchingForm upon successful submission\n      navigate(`/add-color-details/${RSN}`, {\n        state: {\n          RSN,\n          selectedStates,\n          size: formData.Size\n        }\n      });\n      setFormData({\n        RSN: \"\",\n        Size: \"\",\n        FrontRight: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        FrontLeft: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        FrontComplete: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        BackRight: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        BackLeft: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        BackComplete: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        SleeveRight: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        SleeveLeft: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        BothSleeves: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        Tape: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        Collar: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        Kharcha1: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        Kharcha2: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        Kharcha3: {\n          Weight: \"\",\n          Time: \"\",\n          MachineNo: \"\"\n        },\n        Total: {\n          Weight: 0,\n          Time: 0\n        }\n      });\n    } catch (error) {\n      // Handle errors if the API request fails\n      setError(error.message || \"An error occurred while adding knitting details\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Knitting Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Machine No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"RSN:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"3\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"RSN\",\n                value: formData.RSN,\n                onChange: e => setFormData({\n                  ...formData,\n                  RSN: e.target.value\n                }),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Size:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"3\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"Size\",\n                value: formData.Size,\n                onChange: e => setFormData({\n                  ...formData,\n                  Size: e.target.value\n                }),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), Object.keys(selectedStates).filter(field => selectedStates[field]).map(field => {\n            var _formData$field, _formData$field2, _formData$field3;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: ((_formData$field = formData[field]) === null || _formData$field === void 0 ? void 0 : _formData$field.Weight) || \"\",\n                  onChange: e => handleChange(e, field, \"Weight\"),\n                  placeholder: \"Weight\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: ((_formData$field2 = formData[field]) === null || _formData$field2 === void 0 ? void 0 : _formData$field2.Time) || \"\",\n                  onChange: e => handleChange(e, field, \"Time\"),\n                  placeholder: \"Time\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: ((_formData$field3 = formData[field]) === null || _formData$field3 === void 0 ? void 0 : _formData$field3.MachineNo) || \"\",\n                  onChange: e => handleChange(e, field, \"MachineNo\"),\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Machine No\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 23\n                  }, this), machineNos.map(machineNo => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: machineNo,\n                    children: machineNo\n                  }, machineNo, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 19\n              }, this)]\n            }, field, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: formData.Total.Weight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: formData.Total.Time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Submitting...\" : \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(AddKnittingDetailsForm, \"X5W7Boa7JC27kukr0rHPg5C/qZY=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AddKnittingDetailsForm;\nexport default AddKnittingDetailsForm;\nvar _c;\n$RefreshReg$(_c, \"AddKnittingDetailsForm\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","addKnittingDetails","getMachineNos","jsxDEV","_jsxDEV","AddKnittingDetailsForm","_s","_location$state","_location$state2","navigate","location","selectedStates","state","selectedFields","RSN","formData","setFormData","Size","FrontRight","Weight","Time","MachineNo","FrontLeft","FrontComplete","BackRight","BackLeft","BackComplete","SleeveRight","SleeveLeft","BothSleeves","Tape","Collar","Kharcha1","Kharcha2","Kharcha3","Total","loading","setLoading","error","setError","success","setSuccess","machineNos","setMachineNos","fetchMachineNos","response","data","prevData","newFormData","Object","keys","forEach","key","handleChange","e","field","type","value","target","validValue","Math","max","parseFloat","calculateTotal","totalWeight","totalTime","handleSubmit","preventDefault","updatedFormData","console","log","size","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","border","colSpan","name","onChange","required","filter","map","_formData$field","_formData$field2","_formData$field3","placeholder","machineNo","disabled","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddKnittingDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { addKnittingDetails, getMachineNos } from \"../API/SampleApi\";\r\n\r\nconst AddKnittingDetailsForm = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const selectedStates = location.state?.selectedFields || {}; // Access selected fields\r\n  const RSN = location.state?.RSN || \"\"; // Access RSN\r\n\r\n  const [formData, setFormData] = useState({\r\n    RSN: RSN,\r\n    Size: \"\",\r\n    FrontRight: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    FrontLeft: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    FrontComplete: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    BackRight: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    BackLeft: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    BackComplete: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    SleeveRight: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    SleeveLeft: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    BothSleeves: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    Tape: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    Collar: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    Kharcha1: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    Kharcha2: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    Kharcha3: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n    Total: { Weight: 0, Time: 0 },\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [machineNos, setMachineNos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch machine numbers from the API\r\n    const fetchMachineNos = async () => {\r\n      try {\r\n        const response = await getMachineNos();\r\n        setMachineNos(response.data); // Set the machine numbers to state\r\n      } catch (error) {\r\n        setError(\"Failed to fetch machine numbers\");\r\n      }\r\n    };\r\n\r\n    fetchMachineNos();\r\n  }, []); // Only run once on component mount\r\n\r\n  useEffect(() => {\r\n    // Initialize formData based on selectedStates\r\n    setFormData((prevData) => {\r\n      const newFormData = { ...prevData };\r\n      Object.keys(newFormData).forEach((key) => {\r\n        if (selectedStates[key]) {\r\n          newFormData[key] = {\r\n            Weight: \"\",\r\n            Time: \"\",\r\n            MachineNo: \"\", // No longer handling MachineType\r\n          }; // Initialize with new fields\r\n        }\r\n      });\r\n      return newFormData;\r\n    });\r\n  }, [selectedStates]); // Re-run when selectedStates change\r\n\r\n  // Function to handle change in any input field (weight, time, machine model)\r\n  const handleChange = (e, field, type) => {\r\n    const { value } = e.target;\r\n\r\n    // Ensure the value is not negative for weight and time fields\r\n    const validValue = type === \"Weight\" || type === \"Time\"\r\n      ? Math.max(0, parseFloat(value)) // Ensure non-negative values\r\n      : value;\r\n\r\n    setFormData((prevData) => {\r\n      const newFormData = { ...prevData };\r\n\r\n      if (!newFormData[field]) {\r\n        newFormData[field] = {\r\n          Weight: \"\",\r\n          Time: \"\",\r\n          MachineNo: \"\", // No longer handling MachineType\r\n        }; // Initialize if undefined\r\n      }\r\n\r\n      // Set value to 0 if it's empty for weight/time or empty string for machine fields\r\n      if (type === \"Weight\" || type === \"Time\") {\r\n        newFormData[field][type] = validValue || 0; // Use validated value (or 0 if empty)\r\n      } else {\r\n        newFormData[field][type] = value === \"\" ? \"\" : value; // Set to empty string if empty\r\n      }\r\n\r\n      // Recalculate total weight and total time\r\n      newFormData.Total = calculateTotal(newFormData);\r\n      return newFormData;\r\n    });\r\n  };\r\n\r\n  // Function to calculate the total weight and total time\r\n  const calculateTotal = (data) => {\r\n    let totalWeight = 0;\r\n    let totalTime = 0;\r\n\r\n    // Iterate over the fields that contain weight and time\r\n    Object.keys(data).forEach((key) => {\r\n      if (key !== \"RSN\" && key !== \"Size\" && key !== \"Total\") {\r\n        const { Weight, Time } = data[key];\r\n        totalWeight += parseFloat(Weight) || 0;\r\n        totalTime += parseFloat(Time) || 0;\r\n      }\r\n    });\r\n\r\n    return { Weight: totalWeight, Time: totalTime };\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Ensure all fields have weight, time, and machine number\r\n    const updatedFormData = { ...formData };\r\n\r\n    Object.keys(updatedFormData).forEach((field) => {\r\n      if (typeof updatedFormData[field] === \"object\") {\r\n        const { Weight, Time, MachineNo } = updatedFormData[field];\r\n\r\n        // Set to 0 if Weight or Time is empty\r\n        if (Weight === \"\") updatedFormData[field].Weight = 0;\r\n        if (Time === \"\") updatedFormData[field].Time = 0;\r\n        if (MachineNo === \"\") updatedFormData[field].MachineNo = \"\"; // No longer handling MachineType\r\n      }\r\n    });\r\n\r\n    // Start loading indicator\r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    console.log(updatedFormData);\r\n    try {\r\n      // Send the data to the backend via the API function\r\n      const response = await addKnittingDetails(updatedFormData);\r\n\r\n      // On success, display success message and clear form\r\n      setSuccess(\"Knitting details added successfully!\");\r\n\r\n      // Show ColorMatchingForm upon successful submission\r\n      navigate(`/add-color-details/${RSN}`, {\r\n        state: { RSN, selectedStates, size: formData.Size },\r\n      });\r\n\r\n      setFormData({\r\n        RSN: \"\",\r\n        Size: \"\",\r\n        FrontRight: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        FrontLeft: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        FrontComplete: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        BackRight: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        BackLeft: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        BackComplete: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        SleeveRight: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        SleeveLeft: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        BothSleeves: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        Tape: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        Collar: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        Kharcha1: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        Kharcha2: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        Kharcha3: { Weight: \"\", Time: \"\", MachineNo: \"\" },\r\n        Total: { Weight: 0, Time: 0 },\r\n      });\r\n    } catch (error) {\r\n      // Handle errors if the API request fails\r\n      setError(\r\n        error.message || \"An error occurred while adding knitting details\"\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Add Knitting Details</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <table border=\"1\">\r\n          <thead>\r\n            <tr>\r\n              <th>Field</th>\r\n              <th>Weight</th>\r\n              <th>Time</th>\r\n              <th>Machine No</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>RSN:</td>\r\n              <td colSpan=\"3\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"RSN\"\r\n                  value={formData.RSN}\r\n                  onChange={(e) =>\r\n                    setFormData({ ...formData, RSN: e.target.value })\r\n                  }\r\n                  required\r\n                />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>Size:</td>\r\n              <td colSpan=\"3\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"Size\"\r\n                  value={formData.Size}\r\n                  onChange={(e) =>\r\n                    setFormData({ ...formData, Size: e.target.value })\r\n                  }\r\n                  required\r\n                />\r\n              </td>\r\n            </tr>\r\n\r\n            {Object.keys(selectedStates)\r\n              .filter((field) => selectedStates[field])\r\n              .map((field) => (\r\n                <tr key={field}>\r\n                  <td>{field}</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={formData[field]?.Weight || \"\"}\r\n                      onChange={(e) => handleChange(e, field, \"Weight\")}\r\n                      placeholder=\"Weight\"\r\n                      required\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={formData[field]?.Time || \"\"}\r\n                      onChange={(e) => handleChange(e, field, \"Time\")}\r\n                      placeholder=\"Time\"\r\n                      required\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <select\r\n                      value={formData[field]?.MachineNo || \"\"}\r\n                      onChange={(e) => handleChange(e, field, \"MachineNo\")}\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select Machine No</option>\r\n                      {machineNos.map((machineNo) => (\r\n                        <option key={machineNo} value={machineNo}>\r\n                          {machineNo}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n\r\n            {/* Total Row */}\r\n            <tr>\r\n              <td>Total</td>\r\n              <td>{formData.Total.Weight}</td>\r\n              <td>{formData.Total.Time}</td>\r\n              <td></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Submitting...\" : \"Submit\"}\r\n        </button>\r\n      </form>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      {success && <p style={{ color: \"green\" }}>{success}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddKnittingDetailsForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}