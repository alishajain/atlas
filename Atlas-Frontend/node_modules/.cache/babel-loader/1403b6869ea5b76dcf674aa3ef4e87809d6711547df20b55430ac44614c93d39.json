{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ColorMatching.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { addColorMatching } from \"../API/ColorApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorMatching = () => {\n  _s();\n  const location = useLocation();\n  const RSN = 10;\n  const selectedStates = {\n    FrontRight: false,\n    FrontLeft: false,\n    FrontComplete: true,\n    Tape: true,\n    kharcha1: false,\n    Kharcha2: true\n  };\n  const [numColors, setNumColors] = useState(0); // Number of color matches\n  const [colorMatches, setColorMatches] = useState([]); // Color match names entered by user\n  const [error, setError] = useState(\"\"); // To store error messages\n  const [loading, setLoading] = useState(false); // To handle loading state\n  const [success, setSuccess] = useState(\"\"); // To store success message\n\n  // Function to generate ColorId based on RSN, first and last letters of color matches, and selected panels\n  const generateColorIds = () => {\n    // Step 1: Get the first and last letters of each ColorMatching\n    const colorMatchLetters = colorMatches.map(name => {\n      if (name) {\n        return name[0].toUpperCase() + name[name.length - 1].toUpperCase();\n      }\n      return \"\"; // If no color name provided, return empty string\n    });\n\n    // Step 2: Get uppercase and numerals of Panel that are true\n    const selectedUppercasePanels = Object.entries(selectedStates).filter(([key, value]) => value === true) // Filter selected states where value is true\n    .map(([key]) => key) // Extract the keys (panel names)\n    .filter(key => /^[A-Z0-9]+$/.test(key)); // Only include uppercase letters and numerals\n\n    // Step 3: Generate a ColorID for each combination of color match and panel\n    const colorIds = [];\n    colorMatchLetters.forEach(colorLetter => {\n      selectedUppercasePanels.forEach(panel => {\n        const colorId = `${RSN}${colorLetter}${panel}`;\n        colorIds.push(colorId); // Store the unique ColorID for each combination\n      });\n    });\n    return colorIds; // Return an array of all generated ColorIDs\n  };\n\n  // Handle number of color matches input change\n  const handleNumColorsChange = e => {\n    const num = parseInt(e.target.value, 10);\n    setNumColors(num);\n    setColorMatches(Array(num).fill(\"\")); // Reset color matches array based on number of matches\n  };\n\n  // Handle the input change for each color match\n  const handleColorMatchChange = (index, e) => {\n    const newColorMatches = [...colorMatches];\n    newColorMatches[index] = e.target.value;\n    setColorMatches(newColorMatches);\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate that all color match fields are filled\n    if (colorMatches.some(match => match === \"\")) {\n      setError(\"All color match fields must be filled.\");\n      return;\n    }\n    setLoading(true);\n    setError(\"\"); // Clear any previous errors\n    setSuccess(\"\"); // Clear any previous success message\n\n    // Generate all possible ColorIDs\n    const colorIds = generateColorIds();\n    try {\n      // Create an array to store the API call promises\n      const apiCalls = [];\n\n      // Loop through each ColorID and create API calls\n      colorIds.forEach(colorId => {\n        const [colorMatch, panel] = colorId.slice(2).split(/(?=[A-Z])/); // Extract the color and panel\n        const colorData = {\n          ColorID: colorId,\n          RSN: RSN,\n          ColorMatching: colorMatch,\n          Panel: panel\n        };\n\n        // Push API call promises into the array\n        apiCalls.push(addColorMatching(colorData));\n      });\n\n      // Wait for all API calls to finish\n      const responses = await Promise.all(apiCalls);\n\n      // Log and handle the success responses\n      console.log(\"Color matching added:\", responses);\n      setSuccess(\"Color matching added successfully!\");\n\n      // Reset the form after successful submission\n      setNumColors(0);\n      setColorMatches([]);\n    } catch (error) {\n      setError(\"An error occurred while adding color matching.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Color Matching\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Number of color matches: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: numColors,\n          onChange: handleNumColorsChange,\n          min: \"1\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), Array.from({\n        length: numColors\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Color Match \", index + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: colorMatches[index] || \"\",\n          onChange: e => handleColorMatchChange(index, e),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Submitting...\" : \"Add Color Matching\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorMatching, \"eZWPwyWz8h9KtuaXTRrb49dopo4=\", false, function () {\n  return [useLocation];\n});\n_c = ColorMatching;\nexport default ColorMatching;\nvar _c;\n$RefreshReg$(_c, \"ColorMatching\");","map":{"version":3,"names":["React","useState","useLocation","addColorMatching","jsxDEV","_jsxDEV","ColorMatching","_s","location","RSN","selectedStates","FrontRight","FrontLeft","FrontComplete","Tape","kharcha1","Kharcha2","numColors","setNumColors","colorMatches","setColorMatches","error","setError","loading","setLoading","success","setSuccess","generateColorIds","colorMatchLetters","map","name","toUpperCase","length","selectedUppercasePanels","Object","entries","filter","key","value","test","colorIds","forEach","colorLetter","panel","colorId","push","handleNumColorsChange","e","num","parseInt","target","Array","fill","handleColorMatchChange","index","newColorMatches","handleSubmit","preventDefault","some","match","apiCalls","colorMatch","slice","split","colorData","ColorID","Panel","responses","Promise","all","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","min","required","from","_","disabled","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ColorMatching.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { addColorMatching } from \"../API/ColorApi\"; \r\n\r\nconst ColorMatching = () => {\r\n  const location = useLocation();\r\n  const RSN = 10;\r\n  const selectedStates = {\r\n    FrontRight: false,\r\n    FrontLeft: false,\r\n    FrontComplete: true,\r\n    Tape: true,\r\n    kharcha1: false,\r\n    Kharcha2: true,\r\n  };\r\n\r\n  const [numColors, setNumColors] = useState(0); // Number of color matches\r\n  const [colorMatches, setColorMatches] = useState([]); // Color match names entered by user\r\n  const [error, setError] = useState(\"\"); // To store error messages\r\n  const [loading, setLoading] = useState(false); // To handle loading state\r\n  const [success, setSuccess] = useState(\"\"); // To store success message\r\n\r\n  // Function to generate ColorId based on RSN, first and last letters of color matches, and selected panels\r\n  const generateColorIds = () => {\r\n    // Step 1: Get the first and last letters of each ColorMatching\r\n    const colorMatchLetters = colorMatches\r\n      .map((name) => {\r\n        if (name) {\r\n          return name[0].toUpperCase() + name[name.length - 1].toUpperCase();\r\n        }\r\n        return \"\"; // If no color name provided, return empty string\r\n      });\r\n\r\n    // Step 2: Get uppercase and numerals of Panel that are true\r\n    const selectedUppercasePanels = Object.entries(selectedStates)\r\n      .filter(([key, value]) => value === true) // Filter selected states where value is true\r\n      .map(([key]) => key) // Extract the keys (panel names)\r\n      .filter((key) => /^[A-Z0-9]+$/.test(key)); // Only include uppercase letters and numerals\r\n\r\n    // Step 3: Generate a ColorID for each combination of color match and panel\r\n    const colorIds = [];\r\n\r\n    colorMatchLetters.forEach((colorLetter) => {\r\n      selectedUppercasePanels.forEach((panel) => {\r\n        const colorId = `${RSN}${colorLetter}${panel}`;\r\n        colorIds.push(colorId); // Store the unique ColorID for each combination\r\n      });\r\n    });\r\n\r\n    return colorIds; // Return an array of all generated ColorIDs\r\n  };\r\n\r\n  // Handle number of color matches input change\r\n  const handleNumColorsChange = (e) => {\r\n    const num = parseInt(e.target.value, 10);\r\n    setNumColors(num);\r\n    setColorMatches(Array(num).fill(\"\")); // Reset color matches array based on number of matches\r\n  };\r\n\r\n  // Handle the input change for each color match\r\n  const handleColorMatchChange = (index, e) => {\r\n    const newColorMatches = [...colorMatches];\r\n    newColorMatches[index] = e.target.value;\r\n    setColorMatches(newColorMatches);\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate that all color match fields are filled\r\n    if (colorMatches.some((match) => match === \"\")) {\r\n      setError(\"All color match fields must be filled.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(\"\"); // Clear any previous errors\r\n    setSuccess(\"\"); // Clear any previous success message\r\n\r\n    // Generate all possible ColorIDs\r\n    const colorIds = generateColorIds();\r\n\r\n    try {\r\n      // Create an array to store the API call promises\r\n      const apiCalls = [];\r\n\r\n      // Loop through each ColorID and create API calls\r\n      colorIds.forEach((colorId) => {\r\n        const [colorMatch, panel] = colorId.slice(2).split(/(?=[A-Z])/); // Extract the color and panel\r\n        const colorData = {\r\n          ColorID: colorId,\r\n          RSN: RSN,\r\n          ColorMatching: colorMatch,\r\n          Panel: panel,\r\n        };\r\n\r\n        // Push API call promises into the array\r\n        apiCalls.push(addColorMatching(colorData));\r\n      });\r\n\r\n      // Wait for all API calls to finish\r\n      const responses = await Promise.all(apiCalls);\r\n\r\n      // Log and handle the success responses\r\n      console.log(\"Color matching added:\", responses);\r\n      setSuccess(\"Color matching added successfully!\");\r\n\r\n      // Reset the form after successful submission\r\n      setNumColors(0);\r\n      setColorMatches([]);\r\n    } catch (error) {\r\n      setError(\"An error occurred while adding color matching.\");\r\n      console.error(\"Error:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add Color Matching</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Step 1: Input for the number of color matches */}\r\n        <div>\r\n          <label>Number of color matches: </label>\r\n          <input\r\n            type=\"number\"\r\n            value={numColors}\r\n            onChange={handleNumColorsChange}\r\n            min=\"1\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        {/* Step 2: Render input fields for each color match */}\r\n        {Array.from({ length: numColors }).map((_, index) => (\r\n          <div key={index}>\r\n            <label>Color Match {index + 1}:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={colorMatches[index] || \"\"}\r\n              onChange={(e) => handleColorMatchChange(index, e)}\r\n              required\r\n            />\r\n          </div>\r\n        ))}\r\n\r\n        {/* Submit Button */}\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Submitting...\" : \"Add Color Matching\"}\r\n        </button>\r\n      </form>\r\n\r\n      {/* Display error or success messages */}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      {success && <p style={{ color: \"green\" }}>{success}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorMatching;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}