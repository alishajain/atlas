{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the API\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL\n\n// Function to add a new machine\nexport const addMachine = async machineData => {\n  try {\n    const response = await axios.post(`${API_URL}/add-machine`, machineData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding machine:', error);\n    throw new Error('Error adding machine');\n  }\n};\n\n// Function to search a machine by MachineNo\nexport const searchMachineByMachineNo = async MachineNo => {\n  try {\n    const response = await axios.get(`${API_URL}/search-machine/${MachineNo}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching machine:', error);\n    throw new Error('Error searching machine');\n  }\n};\n\n// Function to update a machine by MachineNo\nexport const updateMachineByMachineNo = async (MachineNo, updatedData) => {\n  try {\n    // Log the URL and data being sent\n    console.log(`Sending PUT request to: ${API_URL}/update-machine/${MachineNo}`);\n    console.log('Updated Data:', updatedData);\n    const response = await axios.put(`${API_URL}/update-machine/${MachineNo}`, updatedData);\n\n    // Return the response data if successful\n    return response.data;\n  } catch (error) {\n    // Log detailed error information\n    console.error('Error updating machine:', error.response || error.message);\n\n    // Throw a new error to be caught by the calling function\n    throw new Error('Error updating machine');\n  }\n};\nexport const getAllMachines = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/machines`);\n    return response.data; // Assume the response data contains the machines\n  } catch (error) {\n    console.error('Error fetching all machines:', error);\n    throw error;\n  }\n};\nexport const deleteMachine = async machineNo => {\n  try {\n    const response = await axios.delete(`${API_URL}/delete-machine/${machineNo}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting machine:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","addMachine","machineData","response","post","data","error","console","Error","searchMachineByMachineNo","MachineNo","get","updateMachineByMachineNo","updatedData","log","put","message","getAllMachines","deleteMachine","machineNo","delete"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/MachineApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the API\r\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL\r\n\r\n// Function to add a new machine\r\nexport const addMachine = async (machineData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-machine`, machineData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding machine:', error);\r\n    throw new Error('Error adding machine');\r\n  }\r\n};\r\n\r\n// Function to search a machine by MachineNo\r\nexport const searchMachineByMachineNo = async (MachineNo) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search-machine/${MachineNo}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching machine:', error);\r\n    throw new Error('Error searching machine');\r\n  }\r\n};\r\n\r\n// Function to update a machine by MachineNo\r\nexport const updateMachineByMachineNo = async (MachineNo, updatedData) => {\r\n \r\n  try {\r\n    // Log the URL and data being sent\r\n    console.log(`Sending PUT request to: ${API_URL}/update-machine/${MachineNo}`);\r\n    console.log('Updated Data:', updatedData);\r\n\r\n    const response = await axios.put(`${API_URL}/update-machine/${MachineNo}`, updatedData);\r\n    \r\n    // Return the response data if successful\r\n    return response.data;\r\n  } catch (error) {\r\n    // Log detailed error information\r\n    console.error('Error updating machine:', error.response || error.message);\r\n    \r\n    // Throw a new error to be caught by the calling function\r\n    throw new Error('Error updating machine');\r\n  }\r\n};\r\n\r\n\r\nexport const getAllMachines = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/machines`);\r\n    return response.data; // Assume the response data contains the machines\r\n  } catch (error) {\r\n    console.error('Error fetching all machines:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteMachine = async (machineNo) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/delete-machine/${machineNo}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting machine:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,cAAc,EAAEE,WAAW,CAAC;IACxE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,IAAIE,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,wBAAwB,GAAG,MAAOC,SAAS,IAAK;EAC3D,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,mBAAmBU,SAAS,EAAE,CAAC;IAC1E,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,wBAAwB,GAAG,MAAAA,CAAOF,SAAS,EAAEG,WAAW,KAAK;EAExE,IAAI;IACF;IACAN,OAAO,CAACO,GAAG,CAAC,2BAA2Bd,OAAO,mBAAmBU,SAAS,EAAE,CAAC;IAC7EH,OAAO,CAACO,GAAG,CAAC,eAAe,EAAED,WAAW,CAAC;IAEzC,MAAMV,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,GAAG,CAAC,GAAGf,OAAO,mBAAmBU,SAAS,EAAE,EAAEG,WAAW,CAAC;;IAEvF;IACA,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAACU,OAAO,CAAC;;IAEzE;IACA,MAAM,IAAIR,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;AAGD,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMJ,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,WAAW,CAAC;IACvD,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMY,aAAa,GAAG,MAAOC,SAAS,IAAK;EAChD,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMJ,KAAK,CAACqB,MAAM,CAAC,GAAGpB,OAAO,mBAAmBmB,SAAS,EAAE,CAAC;IAC7E,OAAOhB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}