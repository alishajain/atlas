{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\UpdateMachine.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate hook\nimport { updateMachineByMachineNo } from \"../API/MachineApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateMachine = ({\n  machine,\n  setShowUpdate\n}) => {\n  _s();\n  const [updatedMachine, setUpdatedMachine] = useState({\n    ...machine\n  });\n  const [error, setError] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const navigate = useNavigate(); // Initialize navigate hook\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUpdatedMachine(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const result = await updateMachineByMachineNo(machine.MachineNo, updatedMachine);\n      if (result.success) {\n        setSuccessMessage(\"Machine updated successfully\");\n        setShowUpdate(false);\n        navigate('/search-machine'); // Navigate back to SearchMachine after successful update\n      }\n    } catch (err) {\n      setError(\"Error updating machine\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Machine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Machine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/search-machine'),\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(UpdateMachine, \"BfpgzmoBuwpVGlqYwSZGp4KCy2A=\", false, function () {\n  return [useNavigate];\n});\n_c = UpdateMachine;\nexport default UpdateMachine;\nvar _c;\n$RefreshReg$(_c, \"UpdateMachine\");","map":{"version":3,"names":["React","useState","useNavigate","updateMachineByMachineNo","jsxDEV","_jsxDEV","UpdateMachine","machine","setShowUpdate","_s","updatedMachine","setUpdatedMachine","error","setError","successMessage","setSuccessMessage","navigate","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","result","MachineNo","success","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/UpdateMachine.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";  // Import useNavigate hook\r\nimport { updateMachineByMachineNo } from \"../API/MachineApi\";\r\n\r\nconst UpdateMachine = ({ machine, setShowUpdate }) => {\r\n  const [updatedMachine, setUpdatedMachine] = useState({ ...machine });\r\n  const [error, setError] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const navigate = useNavigate();  // Initialize navigate hook\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUpdatedMachine((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const result = await updateMachineByMachineNo(\r\n        machine.MachineNo,\r\n        updatedMachine\r\n      );\r\n      if (result.success) {\r\n        setSuccessMessage(\"Machine updated successfully\");\r\n        setShowUpdate(false);\r\n        navigate('/search-machine');  // Navigate back to SearchMachine after successful update\r\n      }\r\n    } catch (err) {\r\n      setError(\"Error updating machine\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Update Machine</h2>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      {successMessage && <p style={{ color: \"green\" }}>{successMessage}</p>}\r\n      <form onSubmit={handleSubmit}>\r\n        <table>\r\n          <tbody>\r\n            {/* Form Fields */}\r\n          </tbody>\r\n        </table>\r\n        <button type=\"submit\">Update Machine</button>\r\n      </form>\r\n\r\n      {/* Go Back Button */}\r\n      <button onClick={() => navigate('/search-machine')}>Go Back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateMachine;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}