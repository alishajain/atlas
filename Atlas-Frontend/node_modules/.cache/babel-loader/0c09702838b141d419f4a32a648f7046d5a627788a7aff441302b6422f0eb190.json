{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ColorMatchingForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { addColorMatching } from \"./api\"; // Import the addColorMatching API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorMatchingForm = ({\n  onSubmit\n}) => {\n  _s();\n  const location = useLocation();\n  const {\n    RSN,\n    selectedStates,\n    size\n  } = location.state || {}; // Access RSN and selectedFields passed via navigation\n\n  const [numColors, setNumColors] = useState(0); // Number of color matches\n  const [buttonNames, setButtonNames] = useState([]); // Names for the buttons\n  const [activeColorMatchIndices, setActiveColorMatchIndices] = useState([]); // To track which color matches are being edited\n  const [formData, setFormData] = useState([]); // To store form data for the color match form\n  const [isSubmitted, setIsSubmitted] = useState(false); // Track if submit has been clicked\n  const [successMessage, setSuccessMessage] = useState(\"\"); // Track success message for submission\n  const [errorMessage, setErrorMessage] = useState(\"\"); // Track error message in case of failure\n\n  // Function to generate ColorId\n  const generateColorId = () => {\n    const firstAndLastLetters = buttonNames.map(name => {\n      if (name) {\n        return name[0].toUpperCase() + name[name.length - 1].toUpperCase();\n      }\n      return \"\";\n    }).join(\"\"); // Join first and last letters of each button name\n\n    const selectedUppercase = Object.entries(selectedStates).filter(([key, value]) => value === true) // Filter only fields where value is true\n    .map(([key, value]) => key) // Get the keys (fields) that are true\n    .filter(key => /^[A-Z0-9]+$/.test(key)) // Keep only uppercase letters or numerals\n    .join(\"\"); // Join them into a single string\n\n    return `${RSN}${firstAndLastLetters}${selectedUppercase}`;\n  };\n\n  // Handle number of colors change\n  const handleNumColorsChange = e => {\n    const num = parseInt(e.target.value, 10);\n    setNumColors(num);\n    setButtonNames(Array(num).fill(\"\")); // Reset button names when the number changes\n    setActiveColorMatchIndices([]); // Reset active color match when number of colors changes\n    setIsSubmitted(false); // Reset submission state\n    setSuccessMessage(\"\"); // Reset success message\n    setErrorMessage(\"\"); // Reset error message\n  };\n\n  // Handle button name change\n  const handleButtonNameChange = (index, e) => {\n    const newNames = [...buttonNames];\n    newNames[index] = e.target.value;\n    setButtonNames(newNames);\n  };\n\n  // Handle form data change\n  const handleFormDataChange = (rowIndex, colIndex, e) => {\n    const newData = [...formData];\n    if (!newData[rowIndex]) newData[rowIndex] = Array(16).fill(\"\"); // Ensure each row has 16 columns\n    newData[rowIndex][colIndex] = e.target.value;\n    setFormData(newData);\n  };\n\n  // Handle submit\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Generate ColorId\n    const colorId = generateColorId();\n\n    // Iterate over each selected state and make a separate API call for each true state\n    try {\n      const promises = Object.entries(selectedStates).filter(([panel, value]) => value === true) // Filter selected states that are true\n      .map(([panel, value]) => {\n        // Prepare the color data for each selected state\n        const colorData = {\n          RSN,\n          colorId,\n          panel,\n          // Include the panel key in the data\n          colorMatches: buttonNames,\n          formData: formData\n        };\n\n        // Call the addColorMatching API function for each selected state\n        return addColorMatching(colorData);\n      });\n\n      // Wait for all API calls to complete\n      await Promise.all(promises);\n\n      // Handle success\n      setSuccessMessage(\"Color matching data successfully added!\");\n      setErrorMessage(\"\"); // Clear any error messages\n      console.log(\"All color matching data added successfully\");\n\n      // Pass the button names and formData to the parent component (AddKnittingDetailsForm)\n      onSubmit(buttonNames, formData);\n    } catch (error) {\n      // Handle error\n      setErrorMessage(\"Failed to add color matching data. Please try again.\");\n      setSuccessMessage(\"\"); // Clear success message in case of error\n      console.error(\"API calls failed:\", error);\n    }\n    setIsSubmitted(true); // Mark the form as submitted\n  };\n\n  // Open the color match form when a button is clicked\n  const openColorMatchForm = index => {\n    // Toggle the form visibility (show if not already visible, hide if already visible)\n    setActiveColorMatchIndices(prevIndices => prevIndices.includes(index) ? prevIndices.filter(i => i !== index) // Remove the form if already active\n    : [...prevIndices, index] // Add the form if not active\n    );\n\n    // Initialize the form data with rows based on selectedFields and columns = 16\n    const initialFormData = Array(Object.keys(selectedStates).length).fill(Array(16).fill(\"\"));\n    setFormData(initialFormData);\n  };\n  useEffect(() => {\n    if (selectedStates) {\n      // Ensure selectedStates is an object before proceeding\n      if (typeof selectedStates !== \"object\" || selectedStates === null) {\n        console.error(\"selectedStates is not a valid object:\", selectedStates);\n        return;\n      }\n    }\n  }, [selectedStates, RSN]); // Re-run when selectedFields or RSN change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Color Matching\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"RSN: \", RSN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Size: \", size]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"green\"\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 26\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number of color matches: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numColors,\n        onChange: handleNumColorsChange,\n        min: \"1\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Array.from({\n        length: numColors\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Color Match \", index + 1, \" Name: \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: buttonNames[index],\n          onChange: e => handleButtonNameChange(index, e),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), isSubmitted &&\n        /*#__PURE__*/\n        // Show the button only after submission\n        _jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => openColorMatchForm(index),\n          children: \"Open Color Match Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), activeColorMatchIndices.map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Color Match \", index + 1, \" Form\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          border: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this), Array.from({\n                length: 16\n              }, (_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Col \", index + 1]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(selectedStates).filter(([key, value]) => value === true) // Filter only the fields where value is true\n            .map(([fieldKey, fieldValue], rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: fieldKey\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 23\n              }, this), \" \", Array.from({\n                length: 16\n              }, (_, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: formData[rowIndex] ? formData[rowIndex][colIndex] : \"\",\n                  onChange: e => handleFormDataChange(rowIndex, colIndex, e),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 27\n                }, this)\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 25\n              }, this))]\n            }, rowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorMatchingForm, \"JaIYNGjSYhWm/F2mWqnooGMN3Bc=\", false, function () {\n  return [useLocation];\n});\n_c = ColorMatchingForm;\nexport default ColorMatchingForm;\nvar _c;\n$RefreshReg$(_c, \"ColorMatchingForm\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","addColorMatching","jsxDEV","_jsxDEV","ColorMatchingForm","onSubmit","_s","location","RSN","selectedStates","size","state","numColors","setNumColors","buttonNames","setButtonNames","activeColorMatchIndices","setActiveColorMatchIndices","formData","setFormData","isSubmitted","setIsSubmitted","successMessage","setSuccessMessage","errorMessage","setErrorMessage","generateColorId","firstAndLastLetters","map","name","toUpperCase","length","join","selectedUppercase","Object","entries","filter","key","value","test","handleNumColorsChange","e","num","parseInt","target","Array","fill","handleButtonNameChange","index","newNames","handleFormDataChange","rowIndex","colIndex","newData","handleSubmit","preventDefault","colorId","promises","panel","colorData","colorMatches","Promise","all","console","log","error","openColorMatchForm","prevIndices","includes","i","initialFormData","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","type","onChange","min","required","from","_","onClick","border","fieldKey","fieldValue","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ColorMatchingForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { addColorMatching } from \"./api\"; // Import the addColorMatching API function\r\n\r\nconst ColorMatchingForm = ({ onSubmit }) => {\r\n  const location = useLocation();\r\n  const { RSN, selectedStates, size } = location.state || {}; // Access RSN and selectedFields passed via navigation\r\n\r\n  const [numColors, setNumColors] = useState(0); // Number of color matches\r\n  const [buttonNames, setButtonNames] = useState([]); // Names for the buttons\r\n  const [activeColorMatchIndices, setActiveColorMatchIndices] = useState([]); // To track which color matches are being edited\r\n  const [formData, setFormData] = useState([]); // To store form data for the color match form\r\n  const [isSubmitted, setIsSubmitted] = useState(false); // Track if submit has been clicked\r\n  const [successMessage, setSuccessMessage] = useState(\"\"); // Track success message for submission\r\n  const [errorMessage, setErrorMessage] = useState(\"\"); // Track error message in case of failure\r\n\r\n  // Function to generate ColorId\r\n  const generateColorId = () => {\r\n    const firstAndLastLetters = buttonNames\r\n      .map((name) => {\r\n        if (name) {\r\n          return name[0].toUpperCase() + name[name.length - 1].toUpperCase();\r\n        }\r\n        return \"\";\r\n      })\r\n      .join(\"\"); // Join first and last letters of each button name\r\n\r\n    const selectedUppercase = Object.entries(selectedStates)\r\n      .filter(([key, value]) => value === true) // Filter only fields where value is true\r\n      .map(([key, value]) => key) // Get the keys (fields) that are true\r\n      .filter((key) => /^[A-Z0-9]+$/.test(key)) // Keep only uppercase letters or numerals\r\n      .join(\"\"); // Join them into a single string\r\n\r\n    return `${RSN}${firstAndLastLetters}${selectedUppercase}`;\r\n  };\r\n\r\n  // Handle number of colors change\r\n  const handleNumColorsChange = (e) => {\r\n    const num = parseInt(e.target.value, 10);\r\n    setNumColors(num);\r\n    setButtonNames(Array(num).fill(\"\")); // Reset button names when the number changes\r\n    setActiveColorMatchIndices([]); // Reset active color match when number of colors changes\r\n    setIsSubmitted(false); // Reset submission state\r\n    setSuccessMessage(\"\"); // Reset success message\r\n    setErrorMessage(\"\"); // Reset error message\r\n  };\r\n\r\n  // Handle button name change\r\n  const handleButtonNameChange = (index, e) => {\r\n    const newNames = [...buttonNames];\r\n    newNames[index] = e.target.value;\r\n    setButtonNames(newNames);\r\n  };\r\n\r\n  // Handle form data change\r\n  const handleFormDataChange = (rowIndex, colIndex, e) => {\r\n    const newData = [...formData];\r\n    if (!newData[rowIndex]) newData[rowIndex] = Array(16).fill(\"\"); // Ensure each row has 16 columns\r\n    newData[rowIndex][colIndex] = e.target.value;\r\n    setFormData(newData);\r\n  };\r\n\r\n  // Handle submit\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Generate ColorId\r\n    const colorId = generateColorId();\r\n\r\n    // Iterate over each selected state and make a separate API call for each true state\r\n    try {\r\n      const promises = Object.entries(selectedStates)\r\n        .filter(([panel, value]) => value === true) // Filter selected states that are true\r\n        .map(([panel, value]) => {\r\n          // Prepare the color data for each selected state\r\n          const colorData = {\r\n            RSN,\r\n            colorId,\r\n            panel, // Include the panel key in the data\r\n            colorMatches: buttonNames,\r\n            formData: formData,\r\n          };\r\n\r\n          // Call the addColorMatching API function for each selected state\r\n          return addColorMatching(colorData);\r\n        });\r\n\r\n      // Wait for all API calls to complete\r\n      await Promise.all(promises);\r\n\r\n      // Handle success\r\n      setSuccessMessage(\"Color matching data successfully added!\");\r\n      setErrorMessage(\"\"); // Clear any error messages\r\n      console.log(\"All color matching data added successfully\");\r\n\r\n      // Pass the button names and formData to the parent component (AddKnittingDetailsForm)\r\n      onSubmit(buttonNames, formData);\r\n    } catch (error) {\r\n      // Handle error\r\n      setErrorMessage(\"Failed to add color matching data. Please try again.\");\r\n      setSuccessMessage(\"\"); // Clear success message in case of error\r\n      console.error(\"API calls failed:\", error);\r\n    }\r\n\r\n    setIsSubmitted(true); // Mark the form as submitted\r\n  };\r\n\r\n  // Open the color match form when a button is clicked\r\n  const openColorMatchForm = (index) => {\r\n    // Toggle the form visibility (show if not already visible, hide if already visible)\r\n    setActiveColorMatchIndices(\r\n      (prevIndices) =>\r\n        prevIndices.includes(index)\r\n          ? prevIndices.filter((i) => i !== index) // Remove the form if already active\r\n          : [...prevIndices, index] // Add the form if not active\r\n    );\r\n\r\n    // Initialize the form data with rows based on selectedFields and columns = 16\r\n    const initialFormData = Array(Object.keys(selectedStates).length).fill(\r\n      Array(16).fill(\"\")\r\n    );\r\n    setFormData(initialFormData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedStates) {\r\n      // Ensure selectedStates is an object before proceeding\r\n      if (typeof selectedStates !== \"object\" || selectedStates === null) {\r\n        console.error(\"selectedStates is not a valid object:\", selectedStates);\r\n        return;\r\n      }\r\n    }\r\n  }, [selectedStates, RSN]); // Re-run when selectedFields or RSN change\r\n\r\n  return (\r\n    <div>\r\n      <h2>Color Matching</h2>\r\n      <p>RSN: {RSN}</p> {/* Display RSN for reference */}\r\n      <p>Size: {size}</p>\r\n      {/* Success/Error Messages */}\r\n      {successMessage && <div style={{ color: \"green\" }}>{successMessage}</div>}\r\n      {errorMessage && <div style={{ color: \"red\" }}>{errorMessage}</div>}\r\n      <div>\r\n        <label>Number of color matches: </label>\r\n        <input\r\n          type=\"number\"\r\n          value={numColors}\r\n          onChange={handleNumColorsChange}\r\n          min=\"1\"\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        {Array.from({ length: numColors }, (_, index) => (\r\n          <div key={index}>\r\n            <label>Color Match {index + 1} Name: </label>\r\n            <input\r\n              type=\"text\"\r\n              value={buttonNames[index]}\r\n              onChange={(e) => handleButtonNameChange(index, e)}\r\n              required\r\n            />\r\n            {isSubmitted && ( // Show the button only after submission\r\n              <button type=\"button\" onClick={() => openColorMatchForm(index)}>\r\n                Open Color Match Form\r\n              </button>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* Dynamic Form for Color Match */}\r\n      {activeColorMatchIndices.map((index) => (\r\n        <div key={index}>\r\n          <h3>Color Match {index + 1} Form</h3>\r\n          <form onSubmit={handleSubmit}>\r\n            <table border=\"1\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Field</th>\r\n                  {Array.from({ length: 16 }, (_, index) => (\r\n                    <th key={index}>Col {index + 1}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.entries(selectedStates)\r\n                  .filter(([key, value]) => value === true) // Filter only the fields where value is true\r\n                  .map(([fieldKey, fieldValue], rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                      <td>{fieldKey}</td>{\" \"}\r\n                      {/* Display field key as row header */}\r\n                      {Array.from({ length: 16 }, (_, colIndex) => (\r\n                        <td key={colIndex}>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={\r\n                              formData[rowIndex]\r\n                                ? formData[rowIndex][colIndex]\r\n                                : \"\"\r\n                            }\r\n                            onChange={(e) =>\r\n                              handleFormDataChange(rowIndex, colIndex, e)\r\n                            }\r\n                            required\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n            {/* Submit Button */}\r\n            <button type=\"submit\">Submit</button>\r\n          </form>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorMatchingForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}