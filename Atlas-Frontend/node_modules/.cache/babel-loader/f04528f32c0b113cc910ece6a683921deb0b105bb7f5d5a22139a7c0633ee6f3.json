{"ast":null,"code":"import axios from \"axios\";\n\n// Define the base URL for your API\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Function to upload an image\nexport const uploadImage = async (imageData, imageName, RSN, userId) => {\n  // Create FormData object to send the image and additional data as a multipart form\n  const formData = new FormData();\n  formData.append(\"Image\", imageData);\n  formData.append(\"ImageName\", imageName);\n  formData.append(\"RSN\", RSN);\n  formData.append(\"UserId\", userId);\n  try {\n    const response = await axios.post(`${API_URL}/upload-image`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      timeout: 5000 // Set timeout for the request\n    });\n\n    // Return response data (like a success message)\n    return response.data;\n  } catch (error) {\n    // If an error occurs, log it and throw an error\n    console.error(\"Error during image upload:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch image by RSN\nexport const getImageByRSN = async RSN => {\n  try {\n    if (!RSN) {\n      throw new Error(\"RSN is required to fetch the image\");\n    }\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\n\n    // Return the image data (either file path or base64 string)\n    return response.data;\n  } catch (error) {\n    // Handle errors and log the issue\n    console.error(\"Error fetching image:\", error);\n\n    // If the error response contains useful details, log them\n    if (error.response) {\n      console.error(\"Response error:\", error.response.data);\n      console.error(\"Status code:\", error.response.status);\n    } else if (error.request) {\n      console.error(\"No response from server:\", error.request);\n    } else {\n      console.error(\"Request setup error:\", error.message);\n    }\n\n    // Throw the error so it can be handled by the calling function\n    throw error;\n  }\n};\n\n// Function to update an image by RSN\nexport const updateImage = async (imageData, imageName, RSN, userId) => {\n  const formData = new FormData();\n  formData.append('Image', imageData);\n  formData.append('ImageName', imageName);\n  formData.append('UserId', userId);\n  try {\n    const response = await axios.put(`${API_URL}/update-image/${RSN}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 5000\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error during image update:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","uploadImage","imageData","imageName","RSN","userId","formData","FormData","append","response","post","headers","timeout","data","error","console","getImageByRSN","Error","get","status","request","message","updateImage","put"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/ImageApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Define the base URL for your API\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Function to upload an image\r\nexport const uploadImage = async (imageData, imageName, RSN, userId) => {\r\n  // Create FormData object to send the image and additional data as a multipart form\r\n  const formData = new FormData();\r\n  formData.append(\"Image\", imageData);\r\n  formData.append(\"ImageName\", imageName);\r\n  formData.append(\"RSN\", RSN);\r\n  formData.append(\"UserId\", userId);\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}/upload-image`, formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      timeout: 5000, // Set timeout for the request\r\n    });\r\n\r\n    // Return response data (like a success message)\r\n    return response.data;\r\n  } catch (error) {\r\n    // If an error occurs, log it and throw an error\r\n    console.error(\"Error during image upload:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to fetch image by RSN\r\nexport const getImageByRSN = async (RSN) => {\r\n  try {\r\n    if (!RSN) {\r\n      throw new Error(\"RSN is required to fetch the image\");\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\r\n\r\n    // Return the image data (either file path or base64 string)\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle errors and log the issue\r\n    console.error(\"Error fetching image:\", error);\r\n\r\n    // If the error response contains useful details, log them\r\n    if (error.response) {\r\n      console.error(\"Response error:\", error.response.data);\r\n      console.error(\"Status code:\", error.response.status);\r\n    } else if (error.request) {\r\n      console.error(\"No response from server:\", error.request);\r\n    } else {\r\n      console.error(\"Request setup error:\", error.message);\r\n    }\r\n\r\n    // Throw the error so it can be handled by the calling function\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to update an image by RSN\r\nexport const updateImage = async (imageData, imageName, RSN, userId) => {\r\n  const formData = new FormData();\r\n  formData.append('Image', imageData);\r\n  formData.append('ImageName', imageName);\r\n  formData.append('UserId', userId);\r\n\r\n  try {\r\n    const response = await axios.put(`${API_URL}/update-image/${RSN}`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n      timeout: 5000,\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error during image update:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAE7C;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,KAAK;EACtE;EACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,CAAC;EACnCI,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEL,SAAS,CAAC;EACvCG,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEJ,GAAG,CAAC;EAC3BE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC;EAEjC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAGb,OAAO,eAAe,EAAES,QAAQ,EAAE;MACrEK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB,CAAC;MAClDC,OAAO,EAAE,IAAI,CAAE;IACjB,CAAC,CAAC;;IAEF;IACA,OAAOH,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAOZ,GAAG,IAAK;EAC1C,IAAI;IACF,IAAI,CAACA,GAAG,EAAE;MACR,MAAM,IAAIa,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,MAAMR,QAAQ,GAAG,MAAMb,KAAK,CAACsB,GAAG,CAAC,GAAGrB,OAAO,UAAUO,GAAG,EAAE,CAAC;;IAE3D;IACA,OAAOK,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;;IAE7C;IACA,IAAIA,KAAK,CAACL,QAAQ,EAAE;MAClBM,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACL,QAAQ,CAACI,IAAI,CAAC;MACrDE,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACL,QAAQ,CAACU,MAAM,CAAC;IACtD,CAAC,MAAM,IAAIL,KAAK,CAACM,OAAO,EAAE;MACxBL,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACM,OAAO,CAAC;IAC1D,CAAC,MAAM;MACLL,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACO,OAAO,CAAC;IACtD;;IAEA;IACA,MAAMP,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAAA,CAAOpB,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,KAAK;EACtE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,CAAC;EACnCI,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEL,SAAS,CAAC;EACvCG,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC;EAEjC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMb,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,iBAAiBO,GAAG,EAAE,EAAEE,QAAQ,EAAE;MAC3EK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB,CAAC;MAClDC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,OAAOH,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}