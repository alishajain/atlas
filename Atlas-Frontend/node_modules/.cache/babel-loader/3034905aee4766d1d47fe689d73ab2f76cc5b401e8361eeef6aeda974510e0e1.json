{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{useLocation,useNavigate}from\"react-router-dom\";import{getColorMatchingByRSN,getPanel}from\"../API/ColorApi\";import{getColorDetailByColorId}from\"../API/ColorDetailApi\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const isValidValue=value=>{return value!==null&&value!==\"\"&&value!==0;};const ShowColor=()=>{const location=useLocation();const navigate=useNavigate();const RSN=location.state?location.state.RSN:null;const[colorMatchingData,setColorMatchingData]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(\"\");const[colorDetails,setColorDetails]=useState({});const[selectedPanels,setSelectedPanels]=useState(null);const[selectedStates,setSelectedStates]=useState({});// State to store selectedStates\n// First useEffect for fetching color matching data\nuseEffect(()=>{const fetchColorMatchingData=async()=>{setLoading(true);try{const response=await getColorMatchingByRSN(RSN);setColorMatchingData(response.data);}catch(err){setError(\"Failed to fetch color matching details.\");}finally{setLoading(false);}};if(RSN){fetchColorMatchingData();}},[RSN]);// Fetch color detail by ColorId\nconst fetchColorDetail=async ColorId=>{if(!colorDetails[ColorId]){try{const response=await getColorDetailByColorId(ColorId);setColorDetails(prevDetails=>({...prevDetails,[ColorId]:response}));}catch(err){console.error(\"Failed to fetch color detail for\",ColorId);}}};// Fetch selected panels and update selectedStates when panels are fetched\nuseEffect(()=>{const fetchPanelData=async()=>{try{const response=await getPanel(RSN);setSelectedPanels(response.data);// Format selectedPanels as selectedStates (object with values as keys and true as values)\nconst states=response.data.reduce((acc,panel)=>{const panelKey=panel.Panel;if(panelKey){acc[panelKey]=true;}return acc;},{});setSelectedStates(states);}catch(err){console.error(\"Failed to fetch panel data:\",err);}};if(RSN&&!selectedPanels){fetchPanelData();}},[RSN,selectedPanels]);if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading color matching data...\"});if(error)return/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\"},children:error});// Group color matching data by MatchingName\nconst groupedData=colorMatchingData===null||colorMatchingData===void 0?void 0:colorMatchingData.reduce((acc,item)=>{const{MatchingName}=item;if(!acc[MatchingName]){acc[MatchingName]=[];}acc[MatchingName].push(item);return acc;},{});// Function to render color details for each ColorId\nconst renderColorDetail=ColorId=>{var _colorDetails$ColorId;const details=(_colorDetails$ColorId=colorDetails[ColorId])===null||_colorDetails$ColorId===void 0?void 0:_colorDetails$ColorId[0];if(details){const colorKeys=[\"BaseColor\",\"Color1\",\"Color2\",\"Color3\",\"Color4\",\"Color5\",\"Color6\",\"Color7\",\"Color8\",\"Color9\",\"Color10\",\"Color11\",\"Color12\",\"Color13\",\"Color14\"];// Filter out invalid values\nconst validColorKeys=colorKeys.filter(colorKey=>{const colorData=details[colorKey];return colorData&&isValidValue(colorData.Name)&&isValidValue(colorData.Weight);});const names=validColorKeys.map(colorKey=>details[colorKey].Name);const weights=validColorKeys.map(colorKey=>details[colorKey].Weight);return/*#__PURE__*/_jsx(\"td\",{children:validColorKeys.length>0?/*#__PURE__*/_jsxs(\"table\",{border:\"1\",style:{width:\"100%\"},children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Property\"}),validColorKeys.map((colorKey,index)=>/*#__PURE__*/_jsx(\"th\",{children:colorKey},index))]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Name\"}),names.map((name,index)=>/*#__PURE__*/_jsx(\"td\",{children:name},index))]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Weight\"}),weights.map((weight,index)=>/*#__PURE__*/_jsx(\"td\",{children:weight},index))]})]})]}):/*#__PURE__*/_jsx(\"p\",{children:\"No color details available for this ColorId.\"})});}return/*#__PURE__*/_jsx(\"td\",{children:\"Loading...\"});};// Function to handle navigation back\nconst handleBack=()=>{navigate(`/show-sample/${RSN}`,{state:{RSN}});};// Function to handle navigation next\nconst handleNext=()=>{navigate(`/sample-actions/${RSN}`,{state:{RSN}});};// Function to handle Add Color button click\nconst handleAddColor=async()=>{if(!selectedPanels){console.log(\"Panels are not loaded yet, please try again later.\");return;}navigate(`/add-color-details/${RSN}`,{state:{RSN,selectedStates,size:'M',action:'addUpdate'}});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Color Matching Details for RSN: \",RSN]}),groupedData?Object.keys(groupedData).map((matchingName,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Matching name: \",matchingName]}),/*#__PURE__*/_jsxs(\"table\",{border:\"1\",style:{width:\"100%\",marginTop:\"20px\"},children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"ColorId\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Panel\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Color Details\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:groupedData[matchingName].map((item,itemIndex)=>{fetchColorDetail(item.ColorId);return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:item.ColorId}),/*#__PURE__*/_jsx(\"td\",{children:item.Panel}),renderColorDetail(item.ColorId),\" \"]},itemIndex);})})]})]},index)):/*#__PURE__*/_jsx(\"p\",{children:\"No color matching details available for this RSN.\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:handleAddColor,children:\"Add Color Matching\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleBack,children:\"Back\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleNext,children:\"Next\"})]})]});};export default ShowColor;","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","getColorMatchingByRSN","getPanel","getColorDetailByColorId","jsx","_jsx","jsxs","_jsxs","isValidValue","value","ShowColor","location","navigate","RSN","state","colorMatchingData","setColorMatchingData","loading","setLoading","error","setError","colorDetails","setColorDetails","selectedPanels","setSelectedPanels","selectedStates","setSelectedStates","fetchColorMatchingData","response","data","err","fetchColorDetail","ColorId","prevDetails","console","fetchPanelData","states","reduce","acc","panel","panelKey","Panel","children","style","color","groupedData","item","MatchingName","push","renderColorDetail","_colorDetails$ColorId","details","colorKeys","validColorKeys","filter","colorKey","colorData","Name","Weight","names","map","weights","length","border","width","index","name","weight","handleBack","handleNext","handleAddColor","log","size","action","Object","keys","matchingName","marginTop","itemIndex","onClick"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ShowColor.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { getColorMatchingByRSN, getPanel } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\nconst isValidValue = (value) => {\r\n  return value !== null && value !== \"\" && value !== 0;\r\n};\r\n\r\nconst ShowColor = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const RSN = location.state ? location.state.RSN : null;\r\n\r\n  const [colorMatchingData, setColorMatchingData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [colorDetails, setColorDetails] = useState({});\r\n  const [selectedPanels, setSelectedPanels] = useState(null);\r\n  const [selectedStates, setSelectedStates] = useState({}); // State to store selectedStates\r\n\r\n  // First useEffect for fetching color matching data\r\n  useEffect(() => {\r\n    const fetchColorMatchingData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await getColorMatchingByRSN(RSN);\r\n        setColorMatchingData(response.data);\r\n      } catch (err) {\r\n        setError(\"Failed to fetch color matching details.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (RSN) {\r\n      fetchColorMatchingData();\r\n    }\r\n  }, [RSN]);\r\n\r\n  // Fetch color detail by ColorId\r\n  const fetchColorDetail = async (ColorId) => {\r\n    if (!colorDetails[ColorId]) {\r\n      try {\r\n        const response = await getColorDetailByColorId(ColorId);\r\n        setColorDetails((prevDetails) => ({\r\n          ...prevDetails,\r\n          [ColorId]: response,\r\n        }));\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch color detail for\", ColorId);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fetch selected panels and update selectedStates when panels are fetched\r\n  useEffect(() => {\r\n    const fetchPanelData = async () => {\r\n      try {\r\n        const response = await getPanel(RSN);\r\n        setSelectedPanels(response.data);\r\n\r\n        // Format selectedPanels as selectedStates (object with values as keys and true as values)\r\n        const states = response.data.reduce((acc, panel) => {\r\n          const panelKey = panel.Panel;\r\n          if (panelKey) {\r\n            acc[panelKey] = true;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n        setSelectedStates(states);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch panel data:\", err);\r\n      }\r\n    };\r\n\r\n    if (RSN && !selectedPanels) {\r\n      fetchPanelData();\r\n    }\r\n  }, [RSN, selectedPanels]);\r\n\r\n  if (loading) return <p>Loading color matching data...</p>;\r\n  if (error) return <p style={{ color: \"red\" }}>{error}</p>;\r\n\r\n  // Group color matching data by MatchingName\r\n  const groupedData = colorMatchingData?.reduce((acc, item) => {\r\n    const { MatchingName } = item;\r\n    if (!acc[MatchingName]) {\r\n      acc[MatchingName] = [];\r\n    }\r\n    acc[MatchingName].push(item);\r\n    return acc;\r\n  }, {});\r\n\r\n  // Function to render color details for each ColorId\r\n  const renderColorDetail = (ColorId) => {\r\n    const details = colorDetails[ColorId]?.[0];\r\n    if (details) {\r\n      const colorKeys = [\r\n        \"BaseColor\",\r\n        \"Color1\",\r\n        \"Color2\",\r\n        \"Color3\",\r\n        \"Color4\",\r\n        \"Color5\",\r\n        \"Color6\",\r\n        \"Color7\",\r\n        \"Color8\",\r\n        \"Color9\",\r\n        \"Color10\",\r\n        \"Color11\",\r\n        \"Color12\",\r\n        \"Color13\",\r\n        \"Color14\",\r\n      ];\r\n\r\n      // Filter out invalid values\r\n      const validColorKeys = colorKeys.filter((colorKey) => {\r\n        const colorData = details[colorKey];\r\n        return (\r\n          colorData &&\r\n          isValidValue(colorData.Name) &&\r\n          isValidValue(colorData.Weight)\r\n        );\r\n      });\r\n\r\n      const names = validColorKeys.map((colorKey) => details[colorKey].Name);\r\n      const weights = validColorKeys.map(\r\n        (colorKey) => details[colorKey].Weight\r\n      );\r\n\r\n      return (\r\n        <td>\r\n          {validColorKeys.length > 0 ? (\r\n            <table border=\"1\" style={{ width: \"100%\" }}>\r\n              <thead>\r\n                <tr>\r\n                  <th>Property</th>\r\n                  {validColorKeys.map((colorKey, index) => (\r\n                    <th key={index}>{colorKey}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>Name</td>\r\n                  {names.map((name, index) => (\r\n                    <td key={index}>{name}</td>\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  <td>Weight</td>\r\n                  {weights.map((weight, index) => (\r\n                    <td key={index}>{weight}</td>\r\n                  ))}\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>No color details available for this ColorId.</p>\r\n          )}\r\n        </td>\r\n      );\r\n    }\r\n    return <td>Loading...</td>;\r\n  };\r\n\r\n  // Function to handle navigation back\r\n  const handleBack = () => {\r\n    navigate(`/show-sample/${RSN}`, { state: { RSN } });\r\n  };\r\n\r\n  // Function to handle navigation next\r\n  const handleNext = () => {\r\n    navigate(`/sample-actions/${RSN}`, { state: { RSN } });\r\n  };\r\n\r\n  // Function to handle Add Color button click\r\n  const handleAddColor = async () => {\r\n    if (!selectedPanels) {\r\n      console.log(\"Panels are not loaded yet, please try again later.\");\r\n      return;\r\n    }\r\n    navigate(`/add-color-details/${RSN}`, { state: { RSN, selectedStates, size: 'M', action: 'addUpdate' } });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Color Matching Details for RSN: {RSN}</h1>\r\n      {groupedData ? (\r\n        Object.keys(groupedData).map((matchingName, index) => (\r\n          <div key={index}>\r\n            <h2>Matching name: {matchingName}</h2>\r\n            <table border=\"1\" style={{ width: \"100%\", marginTop: \"20px\" }}>\r\n              <thead>\r\n                <tr>\r\n                  <th>ColorId</th>\r\n                  <th>Panel</th>\r\n                  <th>Color Details</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {groupedData[matchingName].map((item, itemIndex) => {\r\n                  fetchColorDetail(item.ColorId);\r\n                  return (\r\n                    <tr key={itemIndex}>\r\n                      <td>{item.ColorId}</td>\r\n                      <td>{item.Panel}</td>\r\n                      {renderColorDetail(item.ColorId)}{\" \"}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No color matching details available for this RSN.</p>\r\n      )}\r\n      <div>\r\n        <button onClick={handleAddColor}>Add Color Matching</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={handleBack}>Back</button>\r\n        <button onClick={handleNext}>Next</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowColor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}