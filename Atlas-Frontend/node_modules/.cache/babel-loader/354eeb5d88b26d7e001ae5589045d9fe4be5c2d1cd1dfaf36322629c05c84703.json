{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\AddColorDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { addColorDetail } from \"../API/ColorDetailApi\";\nimport { getColorId } from \"../API/ColorApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddColorDetails = ({\n  matchingName,\n  RSN,\n  selectedStates\n}) => {\n  _s();\n  const initialState = {\n    ColorId: \"\",\n    BaseColor: {\n      name: null,\n      weight: 0\n    },\n    colors: Array(14).fill({\n      name: null,\n      weight: 0\n    }),\n    totalWeight: 0\n  };\n  console.log(selectedStates);\n  console.log(RSN);\n  console.log(matchingName);\n  const selectedPanels = Object.entries(selectedStates).filter(([_, value]) => value === true).map(([key]) => key);\n\n  // Initialize the formData based on the selectedStates with true values\n  const [formData, setFormData] = useState([]);\n  const [colorId, setColorId] = useState();\n  useEffect(() => {\n    // Update the formData to have one entry per selected panel\n    setFormData(selectedPanels.map(panelName => ({\n      ...initialState,\n      ColorId: panelName // Set the panel name as ColorId\n    })));\n  }, [selectedStates]);\n  const fetchColorId = async () => {\n    try {\n      // Loop through each MatchingName and selectedPanel using forEach\n      for (const MatchingName of matchingName) {\n        for (const Panel of selectedPanels) {\n          const data = await getColorId(RSN, MatchingName, Panel);\n          setColorId(prevState => ({\n            ...prevState,\n            [MatchingName + \"-\" + Panel]: data.ColorId // Store ColorId based on MatchingName and Panel\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching ColorId:\", error);\n    }\n  };\n\n  // Handle change for input fields (ColorId, BaseColor Name/Weight, and each Color Name/Weight)\n  const handleInputChange = (e, index, field, colorIndex = null) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedFormData = [...formData];\n    if (field === \"colors\" && colorIndex !== null) {\n      // Update the specific color field (either name or weight)\n      updatedFormData[index].colors[colorIndex][name] = value;\n    } else if (field === \"BaseColor\") {\n      updatedFormData[index].BaseColor[name] = value;\n    } else {\n      updatedFormData[index][name] = value;\n    }\n\n    // Recalculate total weight whenever a weight field is changed\n    updatedFormData[index].totalWeight = updatedFormData[index].colors.reduce((sum, color) => sum + (parseFloat(color.weight) || 0), 0);\n\n    // Recalculate total weight for BaseColor\n    updatedFormData[index].totalWeight += parseFloat(updatedFormData[index].BaseColor.weight) || 0;\n    setFormData(updatedFormData);\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Prepare the data in the expected format\n    const colorData = formData.map(row => {\n      const colors = row.colors.reduce((acc, color, index) => {\n        acc[`Color${index + 1}`] = {\n          name: color.name,\n          weight: color.weight\n        };\n        return acc;\n      }, {});\n      return {\n        ColorId: row.ColorId,\n        BaseColor: row.BaseColor,\n        totalWeight: row.totalWeight,\n        ...colors\n      };\n    });\n    try {\n      // Send the data to the backend via the addColorDetail API call from ColordetailsApi.js\n      const response = await Promise.all(colorData.map(data => addColorDetail(data)));\n      console.log(response); // Log the successful response\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchColorId,\n      children: \"fetchColorId\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: colorId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: matchingName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: \"100%\",\n          tableLayout: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Base Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), [...Array(14)].map((_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"6%\"\n              },\n              children: [\"Color \", index + 1]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n              rowSpan: \"2\",\n              style: {\n                width: \"4%\"\n              },\n              children: \"Total Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: formData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.ColorId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                value: row.BaseColor.name || \"\",\n                placeholder: \"Base Color Name\",\n                onChange: e => handleInputChange(e, rowIndex, \"BaseColor\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"weight\",\n                value: row.BaseColor.weight || 0,\n                placeholder: \"Base Color Weight\",\n                onChange: e => handleInputChange(e, rowIndex, \"BaseColor\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), row.colors.map((color, colorIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"name\",\n                  value: color.name || \"\",\n                  placeholder: `Color ${colorIndex + 1} Name`,\n                  onChange: e => handleInputChange(e, rowIndex, \"colors\", colorIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  name: \"weight\",\n                  value: color.weight || 0,\n                  placeholder: `Color ${colorIndex + 1} Weight`,\n                  onChange: e => handleInputChange(e, rowIndex, \"colors\", colorIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this)\n            }, colorIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"totalWeight\",\n                value: row.totalWeight,\n                readOnly: true,\n                style: {\n                  backgroundColor: \"#f0f0f0\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this)]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(AddColorDetails, \"zvhgfxcppGSU0Kv0PTm4CPX2qJY=\");\n_c = AddColorDetails;\nexport default AddColorDetails;\nvar _c;\n$RefreshReg$(_c, \"AddColorDetails\");","map":{"version":3,"names":["React","useState","useEffect","addColorDetail","getColorId","jsxDEV","_jsxDEV","AddColorDetails","matchingName","RSN","selectedStates","_s","initialState","ColorId","BaseColor","name","weight","colors","Array","fill","totalWeight","console","log","selectedPanels","Object","entries","filter","_","value","map","key","formData","setFormData","colorId","setColorId","panelName","fetchColorId","MatchingName","Panel","data","prevState","error","handleInputChange","e","index","field","colorIndex","target","updatedFormData","reduce","sum","color","parseFloat","handleSubmit","preventDefault","colorData","row","acc","response","Promise","all","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","border","style","width","tableLayout","rowSpan","rowIndex","type","placeholder","onChange","Fragment","readOnly","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddColorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { addColorDetail } from \"../API/ColorDetailApi\";\r\nimport { getColorId } from \"../API/ColorApi\";\r\n\r\nconst AddColorDetails = ({ matchingName, RSN, selectedStates }) => {\r\n  const initialState = {\r\n    ColorId: \"\",\r\n    BaseColor: { name: null, weight: 0 },\r\n    colors: Array(14).fill({ name: null, weight: 0 }), \r\n    totalWeight: 0,\r\n  };\r\n\r\n  console.log(selectedStates);\r\n  console.log(RSN);\r\n  console.log(matchingName);\r\n  \r\n  const selectedPanels = Object.entries(selectedStates)\r\n      .filter(([_, value]) => value === true)\r\n      .map(([key]) => key);\r\n\r\n  // Initialize the formData based on the selectedStates with true values\r\n  const [formData, setFormData] = useState([]);\r\n  const [colorId, setColorId] = useState();\r\n\r\n  useEffect(() => {\r\n      // Update the formData to have one entry per selected panel\r\n    setFormData(\r\n      selectedPanels.map((panelName) => ({\r\n        ...initialState,\r\n        ColorId: panelName, // Set the panel name as ColorId\r\n      }))\r\n    );\r\n  }, [selectedStates]);\r\n\r\n  const fetchColorId = async () => {\r\n    try {\r\n      // Loop through each MatchingName and selectedPanel using forEach\r\n      for (const MatchingName of matchingName) {\r\n        for (const Panel of selectedPanels) {\r\n          const data = await getColorId(RSN, MatchingName, Panel);\r\n          setColorId((prevState) => ({\r\n            ...prevState,\r\n            [MatchingName + \"-\" + Panel]: data.ColorId, // Store ColorId based on MatchingName and Panel\r\n          }));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching ColorId:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n  // Handle change for input fields (ColorId, BaseColor Name/Weight, and each Color Name/Weight)\r\n  const handleInputChange = (e, index, field, colorIndex = null) => {\r\n    const { name, value } = e.target;\r\n    const updatedFormData = [...formData];\r\n\r\n    if (field === \"colors\" && colorIndex !== null) {\r\n      // Update the specific color field (either name or weight)\r\n      updatedFormData[index].colors[colorIndex][name] = value;\r\n    } else if (field === \"BaseColor\") {\r\n      updatedFormData[index].BaseColor[name] = value;\r\n    } else {\r\n      updatedFormData[index][name] = value;\r\n    }\r\n\r\n    // Recalculate total weight whenever a weight field is changed\r\n    updatedFormData[index].totalWeight = updatedFormData[index].colors.reduce(\r\n      (sum, color) => sum + (parseFloat(color.weight) || 0), 0\r\n    );\r\n\r\n    // Recalculate total weight for BaseColor\r\n    updatedFormData[index].totalWeight += (parseFloat(updatedFormData[index].BaseColor.weight) || 0);\r\n\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Prepare the data in the expected format\r\n    const colorData = formData.map((row) => {\r\n      const colors = row.colors.reduce((acc, color, index) => {\r\n        acc[`Color${index + 1}`] = { name: color.name, weight: color.weight };\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        ColorId: row.ColorId,\r\n        BaseColor: row.BaseColor,\r\n        totalWeight: row.totalWeight,\r\n        ...colors,\r\n      };\r\n    });\r\n\r\n    try {\r\n      // Send the data to the backend via the addColorDetail API call from ColordetailsApi.js\r\n      const response = await Promise.all(\r\n        colorData.map((data) => addColorDetail(data))\r\n      );\r\n      console.log(response); // Log the successful response\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={fetchColorId}>fetchColorId</button>\r\n      <p>{colorId}</p>\r\n      <h3>{matchingName}</h3> {/* Display the matching name as a heading */}\r\n      <form onSubmit={handleSubmit}>\r\n        <table border=\"1\" style={{ width: \"100%\", tableLayout: \"auto\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ width: \"4%\" }}>Panel</th>\r\n              <th style={{ width: \"4%\" }}>Base Color</th>\r\n              {[...Array(14)].map((_, index) => (\r\n                <th key={index} style={{ width: \"6%\" }}>\r\n                  Color {index + 1}\r\n                </th>\r\n              ))}\r\n              <th rowSpan=\"2\" style={{ width: \"4%\" }}>\r\n                Total Weight\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {formData.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {/* Panel Column - display the selected panel name instead of ColorId */}\r\n                <td>{row.ColorId}</td>\r\n\r\n                {/* Base Color */}\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={row.BaseColor.name || \"\"}\r\n                    placeholder=\"Base Color Name\"\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"weight\"\r\n                    value={row.BaseColor.weight || 0}\r\n                    placeholder=\"Base Color Weight\"\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  />\r\n                </td>\r\n\r\n                {/* Color columns */}\r\n                {row.colors.map((color, colorIndex) => (\r\n                  <React.Fragment key={colorIndex}>\r\n                    <td>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={color.name || \"\"}\r\n                        placeholder={`Color ${colorIndex + 1} Name`}\r\n                        onChange={(e) => handleInputChange(e, rowIndex, \"colors\", colorIndex)}\r\n                      />\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"weight\"\r\n                        value={color.weight || 0}\r\n                        placeholder={`Color ${colorIndex + 1} Weight`}\r\n                        onChange={(e) => handleInputChange(e, rowIndex, \"colors\", colorIndex)}\r\n                      />\r\n                    </td>\r\n                  </React.Fragment>\r\n                ))}\r\n\r\n                {/* Total Weight */}\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"totalWeight\"\r\n                    value={row.totalWeight}\r\n                    readOnly\r\n                    style={{ backgroundColor: \"#f0f0f0\" }}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddColorDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}