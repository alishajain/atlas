{"ast":null,"code":"import React,{useState,useEffect}from'react';import{getCommentsByRSN,addComment}from'../API/CommentApi';import{useSelector}from\"react-redux\";import\"../Styles/Comments.css\";import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Comments=_ref=>{let{RSN}=_ref;// State hooks for comments and new comment input\nconst[comments,setComments]=useState([]);const[newComment,setNewComment]=useState('');const[isCommentBoxVisible,setIsCommentBoxVisible]=useState(false);// Get userId from the Redux store\nconst userId=useSelector(state=>state.user.userId);// Fetch comments on component mount or when RSN changes\nconst fetchComments=async()=>{try{const result=await getCommentsByRSN(RSN);setComments(result.data);}catch(error){console.error('Failed to fetch comments:',error.message);}};console.log(comments);useEffect(()=>{fetchComments();},[RSN]);// Handle submitting a new comment\nconst handleSubmit=async e=>{e.preventDefault();if(!newComment.trim()){alert(\"Comment cannot be empty.\");return;}try{const result=await addComment(RSN,userId,newComment);setNewComment('');setIsCommentBoxVisible(false);alert(result.message||'Comment added successfully');fetchComments();}catch(error){alert(error.message||'Failed to add comment');}};// Handle showing and hiding the comment textbox\nconst handleAddCommentClick=()=>{setIsCommentBoxVisible(true);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Comments for RSN: \",RSN]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Comment Section\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Comment\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Date\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:comments.length===0?/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"2\",children:\"No comments available\"})}):comments.map((comment,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:comment.Comments}),/*#__PURE__*/_jsx(\"td\",{children:new Date(comment.Date).toLocaleString()})]},index))})]})]}),/*#__PURE__*/_jsx(\"div\",{children:!isCommentBoxVisible?/*#__PURE__*/_jsx(\"button\",{onClick:handleAddCommentClick,children:\"Add Comment\"}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Add a Comment\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"textarea\",{value:newComment,onChange:e=>setNewComment(e.target.value),placeholder:\"Enter your comment here\",required:true,className:\"textarea\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit Comment\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>setIsCommentBoxVisible(false),children:\"Cancel\"})]})]})]})})]});};export default Comments;","map":{"version":3,"names":["React","useState","useEffect","getCommentsByRSN","addComment","useSelector","jsxs","_jsxs","jsx","_jsx","Comments","_ref","RSN","comments","setComments","newComment","setNewComment","isCommentBoxVisible","setIsCommentBoxVisible","userId","state","user","fetchComments","result","data","error","console","message","log","handleSubmit","e","preventDefault","trim","alert","handleAddCommentClick","children","length","colSpan","map","comment","index","Date","toLocaleString","onClick","onSubmit","value","onChange","target","placeholder","required","className","type"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/Comments.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getCommentsByRSN, addComment } from '../API/CommentApi';\r\nimport { useSelector } from \"react-redux\";\r\nimport \"../Styles/Comments.css\";\r\n\r\nconst Comments = ({ RSN }) => {\r\n  // State hooks for comments and new comment input\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const [isCommentBoxVisible, setIsCommentBoxVisible] = useState(false);\r\n  \r\n  // Get userId from the Redux store\r\n  const userId = useSelector((state) => state.user.userId);\r\n\r\n  // Fetch comments on component mount or when RSN changes\r\n  const fetchComments = async () => {\r\n    try {\r\n      const result = await getCommentsByRSN(RSN);\r\n      setComments(result.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch comments:', error.message);\r\n    }\r\n  };\r\n  console.log(comments);\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [RSN]);\r\n\r\n  // Handle submitting a new comment\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!newComment.trim()) {\r\n      alert(\"Comment cannot be empty.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await addComment(RSN, userId, newComment);\r\n      setNewComment('');\r\n      setIsCommentBoxVisible(false);\r\n      alert(result.message || 'Comment added successfully');\r\n\r\n      fetchComments();\r\n    } catch (error) {\r\n      alert(error.message || 'Failed to add comment');\r\n    }\r\n  };\r\n\r\n  // Handle showing and hiding the comment textbox\r\n  const handleAddCommentClick = () => {\r\n    setIsCommentBoxVisible(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Comments for RSN: {RSN}</h2>\r\n      \r\n      <div>\r\n        <h3>Comment Section</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Comment</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {comments.length === 0 ? (\r\n              <tr>\r\n                <td colSpan=\"2\">No comments available</td>\r\n              </tr>\r\n            ) : (\r\n              comments.map((comment, index) => (\r\n                <tr key={index}>\r\n                  <td>{comment.Comments}</td>\r\n                  <td>{new Date(comment.Date).toLocaleString()}</td>\r\n                </tr>\r\n              ))\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div>\r\n        {!isCommentBoxVisible ? (\r\n          <button onClick={handleAddCommentClick}>Add Comment</button>\r\n        ) : (\r\n          <div>\r\n            <h3>Add a Comment</h3>\r\n            <form onSubmit={handleSubmit}>\r\n              <textarea\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n                placeholder=\"Enter your comment here\"\r\n                required\r\n                className='textarea'\r\n              />\r\n              <div>\r\n                <button type=\"submit\">Submit Comment</button>\r\n                <button type=\"button\" onClick={() => setIsCommentBoxVisible(false)}>Cancel</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}