{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnUsage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnUsage = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  //const RSN = location.state ? location.state.RSN : null;\n\n  const RSN = 69; // You can change this to dynamically set it if needed.\n\n  // State to hold matching names, color IDs, and color details\n  const [matchingNames, setMatchingNames] = useState([]);\n  const [colorDetails, setColorDetails] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!RSN) return;\n      try {\n        // Step 1: Get matching names by RSN\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\n        setMatchingNames(matchingNamesResponse.data);\n\n        // Step 2: For each matching name, get color IDs\n        const fetchColorDetails = async () => {\n          const details = {};\n          for (const matchingName of matchingNamesResponse.data) {\n            var _colorIdsResponse$dat;\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\n\n            // Safeguard: Check if colorIdsResponse has data\n            if ((colorIdsResponse === null || colorIdsResponse === void 0 ? void 0 : (_colorIdsResponse$dat = colorIdsResponse.data) === null || _colorIdsResponse$dat === void 0 ? void 0 : _colorIdsResponse$dat.length) > 0) {\n              // Step 3: For each color ID, get color details\n              const colorDetailPromises = colorIdsResponse.data.map(async color => {\n                // Ensure color object is valid and has a ColorId before making API call\n                if (color !== null && color !== void 0 && color.ColorId) {\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\n                  return colorDetail.data;\n                }\n                return null; // If ColorId is not present, return null\n              });\n\n              // Wait for all color details to be fetched for the current matching name\n              const colorDetailsData = await Promise.all(colorDetailPromises);\n\n              // Filter out null values in case some ColorId was missing or invalid\n              details[matchingName.MatchingName] = colorDetailsData.filter(item => item !== null);\n            } else {\n              // If no color IDs are found, set an empty array\n              details[matchingName.MatchingName] = [];\n            }\n          }\n          setColorDetails(details); // Store the grouped color details\n          console.log(colorDetails);\n        };\n        fetchColorDetails(); // Call to fetch color details\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData(); // Fetch data when the component mounts\n  }, [RSN]);\n  console.log(matchingNames);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Yarn Usage Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), Object.keys(colorDetails).length > 0 ? Object.entries(colorDetails).map(([matchingName, colors]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: matchingName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), colors.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: colors.map((colorDetail, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Color ID: \", colorDetail]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Color Name: \", colorDetail === null || colorDetail === void 0 ? void 0 : colorDetail.ColorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No color details available for this matching name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this)]\n    }, matchingName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading yarn usage data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnUsage, \"Slxvyhu6FwEIDnWUjb6DK0H7Stc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","jsxDEV","_jsxDEV","YarnUsage","_s","navigate","location","RSN","matchingNames","setMatchingNames","colorDetails","setColorDetails","fetchData","matchingNamesResponse","data","fetchColorDetails","details","matchingName","_colorIdsResponse$dat","colorIdsResponse","MatchingName","length","colorDetailPromises","map","color","ColorId","colorDetail","colorDetailsData","Promise","all","filter","item","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","entries","colors","index","ColorName","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\nconst YarnUsage = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  //const RSN = location.state ? location.state.RSN : null;\r\n\r\n  const RSN = 69; // You can change this to dynamically set it if needed.\r\n  \r\n  // State to hold matching names, color IDs, and color details\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [colorDetails, setColorDetails] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) return;\r\n\r\n      try {\r\n        // Step 1: Get matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        // Step 2: For each matching name, get color IDs\r\n        const fetchColorDetails = async () => {\r\n          const details = {};\r\n\r\n          for (const matchingName of matchingNamesResponse.data) {\r\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n\r\n            // Safeguard: Check if colorIdsResponse has data\r\n            if (colorIdsResponse?.data?.length > 0) {\r\n              // Step 3: For each color ID, get color details\r\n              const colorDetailPromises = colorIdsResponse.data.map(async (color) => {\r\n                // Ensure color object is valid and has a ColorId before making API call\r\n                if (color?.ColorId) {\r\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\r\n                  return colorDetail.data;\r\n                }\r\n                return null; // If ColorId is not present, return null\r\n              });\r\n\r\n              // Wait for all color details to be fetched for the current matching name\r\n              const colorDetailsData = await Promise.all(colorDetailPromises);\r\n\r\n              // Filter out null values in case some ColorId was missing or invalid\r\n              details[matchingName.MatchingName] = colorDetailsData.filter((item) => item !== null);\r\n            } else {\r\n              // If no color IDs are found, set an empty array\r\n              details[matchingName.MatchingName] = [];\r\n            }\r\n          }\r\n\r\n          setColorDetails(details); // Store the grouped color details\r\n          console.log(colorDetails);\r\n        };\r\n\r\n        fetchColorDetails(); // Call to fetch color details\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, [RSN]);\r\n\r\n  console.log(matchingNames);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details</h1>\r\n      {/* Display the color details grouped by matching name */}\r\n      {Object.keys(colorDetails).length > 0 ? (\r\n        Object.entries(colorDetails).map(([matchingName, colors]) => (\r\n          <div key={matchingName}>\r\n            <h2>{matchingName}</h2>\r\n            {colors.length > 0 ? (\r\n              <ul>\r\n                {colors.map((colorDetail, index) => (\r\n                  <li key={index}>\r\n                    <h3>Color ID: {colorDetail}</h3>\r\n                    {/* Display other color details here as needed */}\r\n                    <p>Color Name: {colorDetail?.ColorName}</p>\r\n                    {/* Add any other details you want to display */}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>No color details available for this matching name.</p>\r\n            )}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Loading yarn usage data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}