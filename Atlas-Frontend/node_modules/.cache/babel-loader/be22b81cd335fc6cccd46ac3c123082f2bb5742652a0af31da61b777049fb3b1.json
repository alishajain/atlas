{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nconst addOrder = async orderData => {\n  try {\n    const response = await axios.post(`${API_URL}/add-order`, orderData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding order:', error);\n    throw error;\n  }\n};\nconst updateOrder = async orderData => {\n  try {\n    console.log(orderData);\n    const response = await axios.put(`${API_URL}/update-order/${orderNo}`, orderData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating order:', error);\n    throw error;\n  }\n};\nconst updateOrderStatus = async (orderNo, orderStatus) => {\n  try {\n    const response = await axios.put(`${API_URL}/update-order-status/${orderNo}`, {\n      OrderStatus: orderStatus\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating order status:', error);\n    throw error;\n  }\n};\nconst deleteOrder = async orderNo => {\n  try {\n    const response = await axios.delete(`${API_URL}/delete-order/${orderNo}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting order:', error);\n    throw error;\n  }\n};\nconst getAllOrders = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/get-all-orders`);\n    return response.data;\n  } catch (error) {\n    console.error('Error retrieving orders:', error);\n    throw error;\n  }\n};\nconst getOrderDetails = async orderNo => {\n  try {\n    const response = await axios.get(`${API_URL}/get-order/${orderNo}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error retrieving order details:', error);\n    throw error;\n  }\n};\nexport { addOrder, updateOrder, updateOrderStatus, deleteOrder, getAllOrders, getOrderDetails };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","addOrder","orderData","response","post","data","error","console","updateOrder","log","put","orderNo","updateOrderStatus","orderStatus","OrderStatus","deleteOrder","delete","getAllOrders","get","getOrderDetails"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/OrderApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst addOrder = async (orderData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-order`, orderData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst updateOrder = async (orderData) => {\r\n  try {\r\n    console.log(orderData);\r\n    const response = await axios.put(`${API_URL}/update-order/${orderNo}`, orderData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst updateOrderStatus = async (orderNo, orderStatus) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/update-order-status/${orderNo}`, { OrderStatus: orderStatus });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating order status:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deleteOrder = async (orderNo) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/delete-order/${orderNo}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getAllOrders = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/get-all-orders`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error retrieving orders:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getOrderDetails = async (orderNo) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/get-order/${orderNo}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error retrieving order details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  addOrder,\r\n  updateOrder,\r\n  updateOrderStatus,\r\n  deleteOrder,\r\n  getAllOrders,\r\n  getOrderDetails,\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,QAAQ,GAAG,MAAOC,SAAS,IAAK;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,YAAY,EAAEK,SAAS,CAAC;IACpE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,WAAW,GAAG,MAAON,SAAS,IAAK;EACvC,IAAI;IACFK,OAAO,CAACE,GAAG,CAACP,SAAS,CAAC;IACtB,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAG,CAAC,GAAGb,OAAO,iBAAiBc,OAAO,EAAE,EAAET,SAAS,CAAC;IACjF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMM,iBAAiB,GAAG,MAAAA,CAAOD,OAAO,EAAEE,WAAW,KAAK;EACxD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAG,CAAC,GAAGb,OAAO,wBAAwBc,OAAO,EAAE,EAAE;MAAEG,WAAW,EAAED;IAAY,CAAC,CAAC;IAC3G,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMS,WAAW,GAAG,MAAOJ,OAAO,IAAK;EACrC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMP,KAAK,CAACoB,MAAM,CAAC,GAAGnB,OAAO,iBAAiBc,OAAO,EAAE,CAAC;IACzE,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMP,KAAK,CAACsB,GAAG,CAAC,GAAGrB,OAAO,iBAAiB,CAAC;IAC7D,OAAOM,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMa,eAAe,GAAG,MAAOR,OAAO,IAAK;EACzC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMP,KAAK,CAACsB,GAAG,CAAC,GAAGrB,OAAO,cAAcc,OAAO,EAAE,CAAC;IACnE,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,SACEL,QAAQ,EACRO,WAAW,EACXI,iBAAiB,EACjBG,WAAW,EACXE,YAAY,EACZE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}