{"ast":null,"code":"import axios from \"axios\";\n\n// Base URL for the API\nconst API_URL = \"process.env.REACT_APP_API_URL\";\n\n// Function to add a new machine\nexport const addMachine = async machineData => {\n  try {\n    const response = await axios.post(`${API_URL}/add-machine`, machineData);\n    return response.data;\n  } catch (error) {\n    // Improved error logging\n    console.error(\"Error adding machine:\", error.response ? error.response.data : error.message);\n    throw new Error(\"Error adding machine\");\n  }\n};\n\n// Function to search a machine by MachineNo\nexport const searchMachineByMachineNo = async MachineNo => {\n  try {\n    const response = await axios.get(`${API_URL}/search-machine/${MachineNo}`);\n    return response.data;\n  } catch (error) {\n    // Improved error logging\n    console.error(\"Error searching machine:\", error.response ? error.response.data : error.message);\n    throw new Error(\"Error searching machine\");\n  }\n};\n\n// Function to update a machine by MachineNo\nexport const updateMachineByMachineNo = async (MachineNo, updatedData) => {\n  try {\n    console.log(updatedData);\n    const response = await fetch(`${API_URL}/update-machine/${MachineNo}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error updating machine');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error updating machine:', error.response ? error.response.data : error.message);\n    throw new Error('Error updating machine');\n  }\n};\n\n// Function to get all machines\nexport const getAllMachines = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/machines`);\n    return response.data; // Assume the response data contains the machines\n  } catch (error) {\n    // Enhanced error logging\n    console.error(\"Error fetching all machines:\", error.response ? error.response.data : error.message);\n    throw new Error(\"Error fetching all machines\");\n  }\n};\n\n// Function to delete a machine by its MachineNo\nexport const deleteMachine = async machineNo => {\n  try {\n    const response = await axios.delete(`${API_URL}/delete-machine/${machineNo}`);\n    return response.data;\n  } catch (error) {\n    // Enhanced error logging\n    console.error(\"Error deleting machine:\", error.response ? error.response.data : error.message);\n    throw new Error(\"Error deleting machine\");\n  }\n};","map":{"version":3,"names":["axios","API_URL","addMachine","machineData","response","post","data","error","console","message","Error","searchMachineByMachineNo","MachineNo","get","updateMachineByMachineNo","updatedData","log","fetch","method","headers","body","JSON","stringify","ok","errorData","json","getAllMachines","deleteMachine","machineNo","delete"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/MachineApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL for the API\r\nconst API_URL = \"process.env.REACT_APP_API_URL\";\r\n\r\n// Function to add a new machine\r\nexport const addMachine = async (machineData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-machine`, machineData);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Improved error logging\r\n    console.error(\r\n      \"Error adding machine:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error adding machine\");\r\n  }\r\n};\r\n\r\n// Function to search a machine by MachineNo\r\nexport const searchMachineByMachineNo = async (MachineNo) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search-machine/${MachineNo}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Improved error logging\r\n    console.error(\r\n      \"Error searching machine:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error searching machine\");\r\n  }\r\n};\r\n\r\n// Function to update a machine by MachineNo\r\nexport const updateMachineByMachineNo = async (MachineNo, updatedData) => {\r\n  try {\r\n    console.log(updatedData);\r\n    const response = await fetch(`${API_URL}/update-machine/${MachineNo}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Error updating machine');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error updating machine:',\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error('Error updating machine');\r\n  }\r\n};\r\n\r\n\r\n// Function to get all machines\r\nexport const getAllMachines = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/machines`);\r\n    return response.data; // Assume the response data contains the machines\r\n  } catch (error) {\r\n    // Enhanced error logging\r\n    console.error(\r\n      \"Error fetching all machines:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error fetching all machines\");\r\n  }\r\n};\r\n\r\n// Function to delete a machine by its MachineNo\r\nexport const deleteMachine = async (machineNo) => {\r\n  try {\r\n    const response = await axios.delete(\r\n      `${API_URL}/delete-machine/${machineNo}`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    // Enhanced error logging\r\n    console.error(\r\n      \"Error deleting machine:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error deleting machine\");\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}