{"ast":null,"code":"import axios from'axios';// Define the base URL for your API\nconst API_URL=process.env.REACT_APP_API_URL;// Function to upload an image\nexport const uploadImage=async(imageData,imageName,RSN,userId)=>{// Create FormData object to send the image and additional data as a multipart form\nconst formData=new FormData();formData.append('Image',imageData);formData.append('ImageName',imageName);formData.append('RSN',RSN);formData.append('UserId',userId);try{const response=await axios.post(`${API_URL}/upload-image`,formData,{headers:{'Content-Type':'multipart/form-data'},timeout:5000// Set timeout for the request\n});// Return response data (like a success message)\nreturn response.data;}catch(error){// If an error occurs, log it and throw an error\nconsole.error(\"Error during image upload:\",error);throw error;}};// Function to fetch image by RSN\nexport const getImageByRSN=async RSN=>{try{if(!RSN){throw new Error('RSN is required to fetch the image');}const response=await axios.get(`${API_URL}/image/${RSN}`);// Return the image data (either file path or base64 string)\nreturn response.data;}catch(error){// Handle errors and log the issue\nconsole.error(\"Error fetching image:\",error);// If the error response contains useful details, log them\nif(error.response){console.error('Response error:',error.response.data);console.error('Status code:',error.response.status);}else if(error.request){console.error('No response from server:',error.request);}else{console.error('Request setup error:',error.message);}// Throw the error so it can be handled by the calling function\nthrow error;}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","uploadImage","imageData","imageName","RSN","userId","formData","FormData","append","response","post","headers","timeout","data","error","console","getImageByRSN","Error","get","status","request","message"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/ImageApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define the base URL for your API\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Function to upload an image\r\nexport const uploadImage = async (imageData, imageName, RSN, userId) => {\r\n  // Create FormData object to send the image and additional data as a multipart form\r\n  const formData = new FormData();\r\n  formData.append('Image', imageData);\r\n  formData.append('ImageName', imageName);\r\n  formData.append('RSN', RSN);\r\n  formData.append('UserId', userId);\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}/upload-image`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n      timeout: 5000, // Set timeout for the request\r\n    });\r\n    \r\n    // Return response data (like a success message)\r\n    return response.data;\r\n  } catch (error) {\r\n    // If an error occurs, log it and throw an error\r\n    console.error(\"Error during image upload:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to fetch image by RSN\r\nexport const getImageByRSN = async (RSN) => {\r\n  try {\r\n    if (!RSN) {\r\n      throw new Error('RSN is required to fetch the image');\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\r\n\r\n    // Return the image data (either file path or base64 string)\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle errors and log the issue\r\n    console.error(\"Error fetching image:\", error);\r\n\r\n    // If the error response contains useful details, log them\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      console.error('Status code:', error.response.status);\r\n    } else if (error.request) {\r\n      console.error('No response from server:', error.request);\r\n    } else {\r\n      console.error('Request setup error:', error.message);\r\n    }\r\n\r\n    // Throw the error so it can be handled by the calling function\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAE7C;AACA,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAAA,CAAOC,SAAS,CAAEC,SAAS,CAAEC,GAAG,CAAEC,MAAM,GAAK,CACtE;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAEN,SAAS,CAAC,CACnCI,QAAQ,CAACE,MAAM,CAAC,WAAW,CAAEL,SAAS,CAAC,CACvCG,QAAQ,CAACE,MAAM,CAAC,KAAK,CAAEJ,GAAG,CAAC,CAC3BE,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAEH,MAAM,CAAC,CAEjC,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAb,KAAK,CAACc,IAAI,CAAC,GAAGb,OAAO,eAAe,CAAES,QAAQ,CAAE,CACrEK,OAAO,CAAE,CAAE,cAAc,CAAE,qBAAsB,CAAC,CAClDC,OAAO,CAAE,IAAM;AACjB,CAAC,CAAC,CAEF;AACA,MAAO,CAAAH,QAAQ,CAACI,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,aAAa,CAAG,KAAO,CAAAZ,GAAG,EAAK,CAC1C,GAAI,CACF,GAAI,CAACA,GAAG,CAAE,CACR,KAAM,IAAI,CAAAa,KAAK,CAAC,oCAAoC,CAAC,CACvD,CAEA,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAb,KAAK,CAACsB,GAAG,CAAC,GAAGrB,OAAO,UAAUO,GAAG,EAAE,CAAC,CAE3D;AACA,MAAO,CAAAK,QAAQ,CAACI,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAE7C;AACA,GAAIA,KAAK,CAACL,QAAQ,CAAE,CAClBM,OAAO,CAACD,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAACL,QAAQ,CAACI,IAAI,CAAC,CACrDE,OAAO,CAACD,KAAK,CAAC,cAAc,CAAEA,KAAK,CAACL,QAAQ,CAACU,MAAM,CAAC,CACtD,CAAC,IAAM,IAAIL,KAAK,CAACM,OAAO,CAAE,CACxBL,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAACM,OAAO,CAAC,CAC1D,CAAC,IAAM,CACLL,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAACO,OAAO,CAAC,CACtD,CAEA;AACA,KAAM,CAAAP,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}