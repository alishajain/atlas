{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\AddColorDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { addColorDetail } from \"../API/ColorDetailApi\";\nimport { getColorId } from \"../API/ColorApi\";\nimport { getYarnIds } from \"../API/YarnApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddColorDetails = ({\n  matchingName,\n  RSN,\n  size,\n  selectedStates\n}) => {\n  _s();\n  // Initial state for a row in the table\n  const initialRowState = {\n    ColorId: \"\",\n    Size: size,\n    BaseColor: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    colors: Array(14).fill({\n      Name: \"\",\n      Weight: \"\"\n    }) // Initialize colors array with 14 colors\n  };\n\n  // State for form data (this will be an array of rows)\n  const [formData, setFormData] = useState([]);\n\n  // State to store ColorIds fetched from the API\n  const [colorIds, setColorIds] = useState({});\n\n  // State to handle success and error messages\n  const [message, setMessage] = useState({\n    type: \"\",\n    content: \"\"\n  });\n\n  // State to store YarnIds fetched from the API\n  const [yarnIds, setYarnIds] = useState([]);\n\n  // Extract selected panels from selectedStates\n  const selectedPanels = Object.entries(selectedStates).filter(([_, value]) => value === true).map(([key]) => key);\n\n  // Set initial formData when selectedStates change\n  useEffect(() => {\n    setFormData(selectedPanels.map(panelName => ({\n      ...initialRowState,\n      ColorId: panelName // Assign the panel name to ColorId\n    })));\n  }, [selectedStates]);\n\n  // Fetch ColorId for each selected panel\n  const fetchColorId = async () => {\n    try {\n      const newColorIds = {};\n      for (const Panel of selectedPanels) {\n        const data = await getColorId(RSN, matchingName, Panel);\n        newColorIds[Panel] = data.ColorId; // Use only Panel as the key\n      }\n\n      // Update formData with the fetched ColorIds\n      setFormData(prevFormData => prevFormData.map(row => ({\n        ...row,\n        ColorId: newColorIds[row.ColorId] || row.ColorId\n      })));\n      setColorIds(newColorIds); // Store all ColorIds in state\n    } catch (error) {\n      console.error(\"Error fetching ColorId:\", error);\n      setMessage({\n        type: \"error\",\n        content: \"Error fetching ColorIds.\"\n      });\n    }\n  };\n\n  // Fetch YarnIds for dropdown selection\n  const fetchYarnIds = async () => {\n    try {\n      const data = await getYarnIds();\n      setYarnIds(data); // Store YarnIds in state\n    } catch (error) {\n      console.error(\"Error fetching YarnIds:\", error);\n      setMessage({\n        type: \"error\",\n        content: \"Error fetching YarnIds.\"\n      });\n    }\n  };\n\n  // Handle input changes (BaseColor, Color1, Color2, etc.)\n  const handleInputChange = (e, rowIndex, field, colorIndex = null) => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Create a new array by mapping over formData\n    const updatedFormData = formData.map((row, index) => {\n      if (index === rowIndex) {\n        // Only update the row that was modified\n        const updatedRow = {\n          ...row\n        };\n        if (field === \"colors\" && colorIndex !== null) {\n          // Update specific color field (either name or weight)\n          updatedRow.colors = updatedRow.colors.map((color, idx) => idx === colorIndex ? {\n            ...color,\n            [name]: value\n          } // Update the color field (Name or Weight)\n          : color);\n        } else if (field === \"BaseColor\") {\n          updatedRow.BaseColor = {\n            ...updatedRow.BaseColor,\n            // Copy BaseColor object\n            [name]: value // Update BaseColor field (name or weight)\n          };\n        } else {\n          updatedRow[name] = value; // Update other fields like ColorId, Size\n        }\n        return updatedRow; // Return the updated row\n      }\n      return row; // For other rows, return the original unchanged row\n    });\n\n    // Update formData with the modified array\n    setFormData(updatedFormData);\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const colorData = formData.map(row => {\n      const colors = row.colors.reduce((acc, color, index) => {\n        acc[`Color${index + 1}`] = {\n          Name: color.Name,\n          Weight: color.Weight\n        };\n        return acc;\n      }, {});\n      return {\n        ColorId: row.ColorId,\n        Size: row.Size,\n        BaseColor: row.BaseColor,\n        ...colors\n      };\n    });\n    try {\n      // Send the data to the backend via the addColorDetail API, making separate API calls for each row\n      const responses = await Promise.all(colorData.map(data => addColorDetail(data)));\n      setMessage({\n        type: \"success\",\n        content: \"Data submitted successfully!\"\n      });\n      console.log(responses); // Log the successful responses for all panels\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      setMessage({\n        type: \"error\",\n        content: \"Error submitting the form.\"\n      });\n    }\n  };\n\n  // Fetch YarnIds on component mount\n  useEffect(() => {\n    fetchYarnIds();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchColorId,\n      children: \"Fetch ColorIds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: matchingName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), message.content && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: message.type === \"error\" ? \"red\" : \"green\",\n        marginBottom: \"10px\",\n        fontWeight: \"bold\"\n      },\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: \"100%\",\n          tableLayout: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Base Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), [...Array(14)].map((_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"6%\"\n              },\n              children: [\"Color \", index + 1]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n              rowSpan: \"2\",\n              style: {\n                width: \"4%\"\n              },\n              children: \"Total Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: formData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.ColorId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"Name\",\n                value: row.BaseColor.Name || \"\",\n                onChange: e => handleInputChange(e, rowIndex, \"BaseColor\"),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Yarn\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), yarnIds.map(yarn => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: yarn.Name,\n                  children: yarn.Name\n                }, yarn.YarnId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"Weight\",\n                value: row.BaseColor.Weight || \"\",\n                placeholder: \"Base Color Weight\",\n                onChange: e => handleInputChange(e, rowIndex, \"BaseColor\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this), row.colors.map((color, colorIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                  name: \"Name\",\n                  value: color.Name || \"\",\n                  onChange: e => handleInputChange(e, rowIndex, \"colors\", colorIndex),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Yarn\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 25\n                  }, this), yarnIds.map(yarn => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: yarn.Name,\n                    children: yarn.Name\n                  }, yarn.YarnId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 27\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  name: \"Weight\",\n                  value: color.Weight || \"\",\n                  placeholder: `Color ${colorIndex + 1} Weight`,\n                  onChange: e => handleInputChange(e, rowIndex, \"colors\", colorIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this)\n            }, colorIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"totalWeight\",\n                value: row.totalWeight || \"\",\n                readOnly: true,\n                style: {\n                  backgroundColor: \"#f0f0f0\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this)]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(AddColorDetails, \"mE1Bkc1HrZVw83zkEG0tNxQMpUQ=\");\n_c = AddColorDetails;\nexport default AddColorDetails;\nvar _c;\n$RefreshReg$(_c, \"AddColorDetails\");","map":{"version":3,"names":["React","useState","useEffect","addColorDetail","getColorId","getYarnIds","jsxDEV","_jsxDEV","AddColorDetails","matchingName","RSN","size","selectedStates","_s","initialRowState","ColorId","Size","BaseColor","Name","Weight","colors","Array","fill","formData","setFormData","colorIds","setColorIds","message","setMessage","type","content","yarnIds","setYarnIds","selectedPanels","Object","entries","filter","_","value","map","key","panelName","fetchColorId","newColorIds","Panel","data","prevFormData","row","error","console","fetchYarnIds","handleInputChange","e","rowIndex","field","colorIndex","name","target","updatedFormData","index","updatedRow","color","idx","handleSubmit","preventDefault","colorData","reduce","acc","responses","Promise","all","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","fontWeight","onSubmit","border","width","tableLayout","rowSpan","onChange","yarn","YarnId","placeholder","Fragment","totalWeight","readOnly","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddColorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { addColorDetail } from \"../API/ColorDetailApi\";\r\nimport { getColorId } from \"../API/ColorApi\";\r\nimport { getYarnIds } from \"../API/YarnApi\";\r\n\r\nconst AddColorDetails = ({ matchingName, RSN, size, selectedStates }) => {\r\n  // Initial state for a row in the table\r\n  const initialRowState = {\r\n    ColorId: \"\",\r\n    Size: size,\r\n    BaseColor: { Name: \"\", Weight: \"\" },\r\n    colors: Array(14).fill({ Name: \"\", Weight: \"\" }), // Initialize colors array with 14 colors\r\n  };\r\n\r\n  // State for form data (this will be an array of rows)\r\n  const [formData, setFormData] = useState([]);\r\n\r\n  // State to store ColorIds fetched from the API\r\n  const [colorIds, setColorIds] = useState({});\r\n\r\n  // State to handle success and error messages\r\n  const [message, setMessage] = useState({ type: \"\", content: \"\" });\r\n\r\n  // State to store YarnIds fetched from the API\r\n  const [yarnIds, setYarnIds] = useState([]);\r\n\r\n  // Extract selected panels from selectedStates\r\n  const selectedPanels = Object.entries(selectedStates)\r\n    .filter(([_, value]) => value === true)\r\n    .map(([key]) => key);\r\n\r\n  // Set initial formData when selectedStates change\r\n  useEffect(() => {\r\n    setFormData(\r\n      selectedPanels.map((panelName) => ({\r\n        ...initialRowState,\r\n        ColorId: panelName, // Assign the panel name to ColorId\r\n      }))\r\n    );\r\n  }, [selectedStates]);\r\n\r\n  // Fetch ColorId for each selected panel\r\n  const fetchColorId = async () => {\r\n    try {\r\n      const newColorIds = {};\r\n\r\n      for (const Panel of selectedPanels) {\r\n        const data = await getColorId(RSN, matchingName, Panel);\r\n        newColorIds[Panel] = data.ColorId; // Use only Panel as the key\r\n      }\r\n\r\n      // Update formData with the fetched ColorIds\r\n      setFormData((prevFormData) =>\r\n        prevFormData.map((row) => ({\r\n          ...row,\r\n          ColorId: newColorIds[row.ColorId] || row.ColorId,\r\n        }))\r\n      );\r\n      setColorIds(newColorIds); // Store all ColorIds in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching ColorId:\", error);\r\n      setMessage({ type: \"error\", content: \"Error fetching ColorIds.\" });\r\n    }\r\n  };\r\n\r\n  // Fetch YarnIds for dropdown selection\r\n  const fetchYarnIds = async () => {\r\n    try {\r\n      const data = await getYarnIds();\r\n      setYarnIds(data); // Store YarnIds in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching YarnIds:\", error);\r\n      setMessage({ type: \"error\", content: \"Error fetching YarnIds.\" });\r\n    }\r\n  };\r\n\r\n  // Handle input changes (BaseColor, Color1, Color2, etc.)\r\n  const handleInputChange = (e, rowIndex, field, colorIndex = null) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Create a new array by mapping over formData\r\n    const updatedFormData = formData.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        // Only update the row that was modified\r\n        const updatedRow = { ...row };\r\n\r\n        if (field === \"colors\" && colorIndex !== null) {\r\n          // Update specific color field (either name or weight)\r\n          updatedRow.colors = updatedRow.colors.map((color, idx) =>\r\n            idx === colorIndex\r\n              ? { ...color, [name]: value } // Update the color field (Name or Weight)\r\n              : color\r\n          );\r\n        } else if (field === \"BaseColor\") {\r\n          updatedRow.BaseColor = {\r\n            ...updatedRow.BaseColor, // Copy BaseColor object\r\n            [name]: value, // Update BaseColor field (name or weight)\r\n          };\r\n        } else {\r\n          updatedRow[name] = value; // Update other fields like ColorId, Size\r\n        }\r\n\r\n        return updatedRow; // Return the updated row\r\n      }\r\n      return row; // For other rows, return the original unchanged row\r\n    });\r\n\r\n    // Update formData with the modified array\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const colorData = formData.map((row) => {\r\n      const colors = row.colors.reduce((acc, color, index) => {\r\n        acc[`Color${index + 1}`] = { Name: color.Name, Weight: color.Weight };\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        ColorId: row.ColorId,\r\n        Size: row.Size,\r\n        BaseColor: row.BaseColor,\r\n        ...colors,\r\n      };\r\n    });\r\n\r\n    try {\r\n      // Send the data to the backend via the addColorDetail API, making separate API calls for each row\r\n      const responses = await Promise.all(\r\n        colorData.map((data) => addColorDetail(data))\r\n      );\r\n      setMessage({ type: \"success\", content: \"Data submitted successfully!\" });\r\n      console.log(responses); // Log the successful responses for all panels\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      setMessage({ type: \"error\", content: \"Error submitting the form.\" });\r\n    }\r\n  };\r\n\r\n  // Fetch YarnIds on component mount\r\n  useEffect(() => {\r\n    fetchYarnIds();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={fetchColorId}>Fetch ColorIds</button>\r\n      <h3>{matchingName}</h3>\r\n\r\n      {/* Show success/error message */}\r\n      {message.content && (\r\n        <div\r\n          style={{\r\n            color: message.type === \"error\" ? \"red\" : \"green\",\r\n            marginBottom: \"10px\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {message.content}\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <table border=\"1\" style={{ width: \"100%\", tableLayout: \"auto\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ width: \"4%\" }}>Panel</th>\r\n              <th style={{ width: \"4%\" }}>Base Color</th>\r\n              {[...Array(14)].map((_, index) => (\r\n                <th key={index} style={{ width: \"6%\" }}>\r\n                  Color {index + 1}\r\n                </th>\r\n              ))}\r\n              <th rowSpan=\"2\" style={{ width: \"4%\" }}>\r\n                Total Weight\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {formData.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                <td>{row.ColorId}</td>\r\n\r\n                {/* Base Color */}\r\n                <td>\r\n                  <select\r\n                    name=\"Name\"\r\n                    value={row.BaseColor.Name || \"\"}\r\n                    onChange={(e) =>\r\n                      handleInputChange(e, rowIndex, \"BaseColor\")\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Yarn</option>\r\n                    {yarnIds.map((yarn) => (\r\n                      <option key={yarn.YarnId} value={yarn.Name}>\r\n                        {yarn.Name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"Weight\"\r\n                    value={row.BaseColor.Weight || \"\"}\r\n                    placeholder=\"Base Color Weight\"\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  />\r\n                </td>\r\n\r\n                {/* Color columns */}\r\n                {row.colors.map((color, colorIndex) => (\r\n                  <React.Fragment key={colorIndex}>\r\n                    <td>\r\n                      <select\r\n                        name=\"Name\"\r\n                        value={color.Name || \"\"}\r\n                        onChange={(e) =>\r\n                          handleInputChange(e, rowIndex, \"colors\", colorIndex)\r\n                        }\r\n                      >\r\n                        <option value=\"\">Select Yarn</option>\r\n                        {yarnIds.map((yarn) => (\r\n                          <option key={yarn.YarnId} value={yarn.Name}>\r\n                            {yarn.Name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"Weight\"\r\n                        value={color.Weight || \"\"}\r\n                        placeholder={`Color ${colorIndex + 1} Weight`}\r\n                        onChange={(e) =>\r\n                          handleInputChange(e, rowIndex, \"colors\", colorIndex)\r\n                        }\r\n                      />\r\n                    </td>\r\n                  </React.Fragment>\r\n                ))}\r\n\r\n                {/* Total Weight */}\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"totalWeight\"\r\n                    value={row.totalWeight || \"\"}\r\n                    readOnly\r\n                    style={{ backgroundColor: \"#f0f0f0\" }}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddColorDetails;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,eAAe,GAAGA,CAAC;EAAEC,YAAY;EAAEC,GAAG;EAAEC,IAAI;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACvE;EACA,MAAMC,eAAe,GAAG;IACtBC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAEL,IAAI;IACVM,SAAS,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC;IACnCC,MAAM,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC;MAAEJ,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC,CAAC,CAAE;EACpD,CAAC;;EAED;EACA,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC;IAAE4B,IAAI,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;;EAEjE;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMgC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACvB,cAAc,CAAC,CAClDwB,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,KAAK,CAAC,KAAKA,KAAK,KAAK,IAAI,CAAC,CACtCC,GAAG,CAAC,CAAC,CAACC,GAAG,CAAC,KAAKA,GAAG,CAAC;;EAEtB;EACAtC,SAAS,CAAC,MAAM;IACdsB,WAAW,CACTS,cAAc,CAACM,GAAG,CAAEE,SAAS,KAAM;MACjC,GAAG3B,eAAe;MAClBC,OAAO,EAAE0B,SAAS,CAAE;IACtB,CAAC,CAAC,CACJ,CAAC;EACH,CAAC,EAAE,CAAC7B,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAM8B,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,WAAW,GAAG,CAAC,CAAC;MAEtB,KAAK,MAAMC,KAAK,IAAIX,cAAc,EAAE;QAClC,MAAMY,IAAI,GAAG,MAAMzC,UAAU,CAACM,GAAG,EAAED,YAAY,EAAEmC,KAAK,CAAC;QACvDD,WAAW,CAACC,KAAK,CAAC,GAAGC,IAAI,CAAC9B,OAAO,CAAC,CAAC;MACrC;;MAEA;MACAS,WAAW,CAAEsB,YAAY,IACvBA,YAAY,CAACP,GAAG,CAAEQ,GAAG,KAAM;QACzB,GAAGA,GAAG;QACNhC,OAAO,EAAE4B,WAAW,CAACI,GAAG,CAAChC,OAAO,CAAC,IAAIgC,GAAG,CAAChC;MAC3C,CAAC,CAAC,CACJ,CAAC;MACDW,WAAW,CAACiB,WAAW,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CpB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAE;MAA2B,CAAC,CAAC;IACpE;EACF,CAAC;;EAED;EACA,MAAMoB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAML,IAAI,GAAG,MAAMxC,UAAU,CAAC,CAAC;MAC/B2B,UAAU,CAACa,IAAI,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CpB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAE;MAA0B,CAAC,CAAC;IACnE;EACF,CAAC;;EAED;EACA,MAAMqB,iBAAiB,GAAGA,CAACC,CAAC,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,UAAU,GAAG,IAAI,KAAK;IACnE,MAAM;MAAEC,IAAI;MAAElB;IAAM,CAAC,GAAGc,CAAC,CAACK,MAAM;;IAEhC;IACA,MAAMC,eAAe,GAAGnC,QAAQ,CAACgB,GAAG,CAAC,CAACQ,GAAG,EAAEY,KAAK,KAAK;MACnD,IAAIA,KAAK,KAAKN,QAAQ,EAAE;QACtB;QACA,MAAMO,UAAU,GAAG;UAAE,GAAGb;QAAI,CAAC;QAE7B,IAAIO,KAAK,KAAK,QAAQ,IAAIC,UAAU,KAAK,IAAI,EAAE;UAC7C;UACAK,UAAU,CAACxC,MAAM,GAAGwC,UAAU,CAACxC,MAAM,CAACmB,GAAG,CAAC,CAACsB,KAAK,EAAEC,GAAG,KACnDA,GAAG,KAAKP,UAAU,GACd;YAAE,GAAGM,KAAK;YAAE,CAACL,IAAI,GAAGlB;UAAM,CAAC,CAAC;UAAA,EAC5BuB,KACN,CAAC;QACH,CAAC,MAAM,IAAIP,KAAK,KAAK,WAAW,EAAE;UAChCM,UAAU,CAAC3C,SAAS,GAAG;YACrB,GAAG2C,UAAU,CAAC3C,SAAS;YAAE;YACzB,CAACuC,IAAI,GAAGlB,KAAK,CAAE;UACjB,CAAC;QACH,CAAC,MAAM;UACLsB,UAAU,CAACJ,IAAI,CAAC,GAAGlB,KAAK,CAAC,CAAC;QAC5B;QAEA,OAAOsB,UAAU,CAAC,CAAC;MACrB;MACA,OAAOb,GAAG,CAAC,CAAC;IACd,CAAC,CAAC;;IAEF;IACAvB,WAAW,CAACkC,eAAe,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMK,YAAY,GAAG,MAAOX,CAAC,IAAK;IAChCA,CAAC,CAACY,cAAc,CAAC,CAAC;IAElB,MAAMC,SAAS,GAAG1C,QAAQ,CAACgB,GAAG,CAAEQ,GAAG,IAAK;MACtC,MAAM3B,MAAM,GAAG2B,GAAG,CAAC3B,MAAM,CAAC8C,MAAM,CAAC,CAACC,GAAG,EAAEN,KAAK,EAAEF,KAAK,KAAK;QACtDQ,GAAG,CAAC,QAAQR,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG;UAAEzC,IAAI,EAAE2C,KAAK,CAAC3C,IAAI;UAAEC,MAAM,EAAE0C,KAAK,CAAC1C;QAAO,CAAC;QACrE,OAAOgD,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,OAAO;QACLpD,OAAO,EAAEgC,GAAG,CAAChC,OAAO;QACpBC,IAAI,EAAE+B,GAAG,CAAC/B,IAAI;QACdC,SAAS,EAAE8B,GAAG,CAAC9B,SAAS;QACxB,GAAGG;MACL,CAAC;IACH,CAAC,CAAC;IAEF,IAAI;MACF;MACA,MAAMgD,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CACjCL,SAAS,CAAC1B,GAAG,CAAEM,IAAI,IAAK1C,cAAc,CAAC0C,IAAI,CAAC,CAC9C,CAAC;MACDjB,UAAU,CAAC;QAAEC,IAAI,EAAE,SAAS;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;MACxEmB,OAAO,CAACsB,GAAG,CAACH,SAAS,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CpB,UAAU,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAE;MAA6B,CAAC,CAAC;IACtE;EACF,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACdgD,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3C,OAAA;IAAAiE,QAAA,gBACEjE,OAAA;MAAQkE,OAAO,EAAE/B,YAAa;MAAA8B,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACtDtE,OAAA;MAAAiE,QAAA,EAAK/D;IAAY;MAAAiE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAGtBlD,OAAO,CAACG,OAAO,iBACdvB,OAAA;MACEuE,KAAK,EAAE;QACLjB,KAAK,EAAElC,OAAO,CAACE,IAAI,KAAK,OAAO,GAAG,KAAK,GAAG,OAAO;QACjDkD,YAAY,EAAE,MAAM;QACpBC,UAAU,EAAE;MACd,CAAE;MAAAR,QAAA,EAED7C,OAAO,CAACG;IAAO;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CACN,eAEDtE,OAAA;MAAM0E,QAAQ,EAAElB,YAAa;MAAAS,QAAA,gBAC3BjE,OAAA;QAAO2E,MAAM,EAAC,GAAG;QAACJ,KAAK,EAAE;UAAEK,KAAK,EAAE,MAAM;UAAEC,WAAW,EAAE;QAAO,CAAE;QAAAZ,QAAA,gBAC9DjE,OAAA;UAAAiE,QAAA,eACEjE,OAAA;YAAAiE,QAAA,gBACEjE,OAAA;cAAIuE,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAK,CAAE;cAAAX,QAAA,EAAC;YAAK;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACtCtE,OAAA;cAAIuE,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAK,CAAE;cAAAX,QAAA,EAAC;YAAU;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EAC1C,CAAC,GAAGxD,KAAK,CAAC,EAAE,CAAC,CAAC,CAACkB,GAAG,CAAC,CAACF,CAAC,EAAEsB,KAAK,kBAC3BpD,OAAA;cAAgBuE,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAK,CAAE;cAAAX,QAAA,GAAC,QAChC,EAACb,KAAK,GAAG,CAAC;YAAA,GADTA,KAAK;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEV,CACL,CAAC,eACFtE,OAAA;cAAI8E,OAAO,EAAC,GAAG;cAACP,KAAK,EAAE;gBAAEK,KAAK,EAAE;cAAK,CAAE;cAAAX,QAAA,EAAC;YAExC;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRtE,OAAA;UAAAiE,QAAA,EACGjD,QAAQ,CAACgB,GAAG,CAAC,CAACQ,GAAG,EAAEM,QAAQ,kBAC1B9C,OAAA;YAAAiE,QAAA,gBACEjE,OAAA;cAAAiE,QAAA,EAAKzB,GAAG,CAAChC;YAAO;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAGtBtE,OAAA;cAAAiE,QAAA,gBACEjE,OAAA;gBACEiD,IAAI,EAAC,MAAM;gBACXlB,KAAK,EAAES,GAAG,CAAC9B,SAAS,CAACC,IAAI,IAAI,EAAG;gBAChCoE,QAAQ,EAAGlC,CAAC,IACVD,iBAAiB,CAACC,CAAC,EAAEC,QAAQ,EAAE,WAAW,CAC3C;gBAAAmB,QAAA,gBAEDjE,OAAA;kBAAQ+B,KAAK,EAAC,EAAE;kBAAAkC,QAAA,EAAC;gBAAW;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACpC9C,OAAO,CAACQ,GAAG,CAAEgD,IAAI,iBAChBhF,OAAA;kBAA0B+B,KAAK,EAAEiD,IAAI,CAACrE,IAAK;kBAAAsD,QAAA,EACxCe,IAAI,CAACrE;gBAAI,GADCqE,IAAI,CAACC,MAAM;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEhB,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC,eACTtE,OAAA;gBACEsB,IAAI,EAAC,QAAQ;gBACb2B,IAAI,EAAC,QAAQ;gBACblB,KAAK,EAAES,GAAG,CAAC9B,SAAS,CAACE,MAAM,IAAI,EAAG;gBAClCsE,WAAW,EAAC,mBAAmB;gBAC/BH,QAAQ,EAAGlC,CAAC,IAAKD,iBAAiB,CAACC,CAAC,EAAEC,QAAQ,EAAE,WAAW;cAAE;gBAAAqB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9D,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,EAGJ9B,GAAG,CAAC3B,MAAM,CAACmB,GAAG,CAAC,CAACsB,KAAK,EAAEN,UAAU,kBAChChD,OAAA,CAACP,KAAK,CAAC0F,QAAQ;cAAAlB,QAAA,eACbjE,OAAA;gBAAAiE,QAAA,gBACEjE,OAAA;kBACEiD,IAAI,EAAC,MAAM;kBACXlB,KAAK,EAAEuB,KAAK,CAAC3C,IAAI,IAAI,EAAG;kBACxBoE,QAAQ,EAAGlC,CAAC,IACVD,iBAAiB,CAACC,CAAC,EAAEC,QAAQ,EAAE,QAAQ,EAAEE,UAAU,CACpD;kBAAAiB,QAAA,gBAEDjE,OAAA;oBAAQ+B,KAAK,EAAC,EAAE;oBAAAkC,QAAA,EAAC;kBAAW;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,EACpC9C,OAAO,CAACQ,GAAG,CAAEgD,IAAI,iBAChBhF,OAAA;oBAA0B+B,KAAK,EAAEiD,IAAI,CAACrE,IAAK;oBAAAsD,QAAA,EACxCe,IAAI,CAACrE;kBAAI,GADCqE,IAAI,CAACC,MAAM;oBAAAd,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEhB,CACT,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC,eACTtE,OAAA;kBACEsB,IAAI,EAAC,QAAQ;kBACb2B,IAAI,EAAC,QAAQ;kBACblB,KAAK,EAAEuB,KAAK,CAAC1C,MAAM,IAAI,EAAG;kBAC1BsE,WAAW,EAAE,SAASlC,UAAU,GAAG,CAAC,SAAU;kBAC9C+B,QAAQ,EAAGlC,CAAC,IACVD,iBAAiB,CAACC,CAAC,EAAEC,QAAQ,EAAE,QAAQ,EAAEE,UAAU;gBACpD;kBAAAmB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA;YAAC,GAzBctB,UAAU;cAAAmB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA0Bf,CACjB,CAAC,eAGFtE,OAAA;cAAAiE,QAAA,eACEjE,OAAA;gBACEsB,IAAI,EAAC,QAAQ;gBACb2B,IAAI,EAAC,aAAa;gBAClBlB,KAAK,EAAES,GAAG,CAAC4C,WAAW,IAAI,EAAG;gBAC7BC,QAAQ;gBACRd,KAAK,EAAE;kBAAEe,eAAe,EAAE;gBAAU;cAAE;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC;UAAA,GApEExB,QAAQ;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqEb,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACRtE,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAAA2C,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAChE,EAAA,CA/PIL,eAAe;AAAAsF,EAAA,GAAftF,eAAe;AAiQrB,eAAeA,eAAe;AAAC,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}