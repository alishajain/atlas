{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const addSampleDetails = async data => {\n  try {\n    const response = await axios.post(`${API_URL}/add-sample`, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data; // Return response data to the caller\n  } catch (error) {\n    // Enhanced error handling with more specific details\n    console.error('API call error:', error);\n\n    // Check if the error has a response (e.g., 404, 500)\n    if (error.response) {\n      console.error('Response error:', error.response.data);\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\n    }\n    // Check if the error is due to network issues or no response\n    else if (error.request) {\n      console.error('Request error:', error.request);\n      throw new Error('No response received from the API');\n    }\n    // For other types of errors (e.g., misconfiguration)\n    else {\n      console.error('Error message:', error.message);\n      throw new Error(`Error: ${error.message}`);\n    }\n  }\n};\n\n// This function handles the PUT request to update a record in the database\nexport const updateRecord = async data => {\n  try {\n    const response = await fetch('http://localhost:5000/api/update', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result.message || 'Error updating record');\n    }\n    return result;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(error.message || 'There was an error with the API request');\n  }\n};","map":{"version":3,"names":["axios","API_URL","addSampleDetails","data","response","post","headers","error","console","Error","status","request","message","updateRecord","fetch","method","body","JSON","stringify","result","json","ok"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const addSampleDetails = async (data) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-sample`, data, {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n    return response.data; // Return response data to the caller\r\n  } catch (error) {\r\n    // Enhanced error handling with more specific details\r\n    console.error('API call error:', error);\r\n\r\n    // Check if the error has a response (e.g., 404, 500)\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\r\n    } \r\n    // Check if the error is due to network issues or no response\r\n    else if (error.request) {\r\n      console.error('Request error:', error.request);\r\n      throw new Error('No response received from the API');\r\n    } \r\n    // For other types of errors (e.g., misconfiguration)\r\n    else {\r\n      console.error('Error message:', error.message);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// This function handles the PUT request to update a record in the database\r\nexport const updateRecord = async (data) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/update', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(result.message || 'Error updating record');\r\n    }\r\n\r\n    return result;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw new Error(error.message || 'There was an error with the API request');\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,aAAa,EAAEE,IAAI,EAAE;MAC/DG,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACD,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;;IAEvC;IACA,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClBI,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACH,QAAQ,CAACD,IAAI,CAAC;MACrD,MAAM,IAAIM,KAAK,CAAC,UAAUF,KAAK,CAACH,QAAQ,CAACM,MAAM,MAAMH,KAAK,CAACH,QAAQ,CAACD,IAAI,EAAE,CAAC;IAC7E;IACA;IAAA,KACK,IAAII,KAAK,CAACI,OAAO,EAAE;MACtBH,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACI,OAAO,CAAC;MAC9C,MAAM,IAAIF,KAAK,CAAC,mCAAmC,CAAC;IACtD;IACA;IAAA,KACK;MACHD,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACK,OAAO,CAAC;MAC9C,MAAM,IAAIH,KAAK,CAAC,UAAUF,KAAK,CAACK,OAAO,EAAE,CAAC;IAC5C;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOV,IAAI,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMU,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,KAAK;MACbT,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI;IAC3B,CAAC,CAAC;IAEF,MAAMgB,MAAM,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;IAEpC,IAAI,CAAChB,QAAQ,CAACiB,EAAE,EAAE;MAChB,MAAM,IAAIZ,KAAK,CAACU,MAAM,CAACP,OAAO,IAAI,uBAAuB,CAAC;IAC5D;IAEA,OAAOO,MAAM;EACf,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACK,OAAO,IAAI,yCAAyC,CAAC;EAC7E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}