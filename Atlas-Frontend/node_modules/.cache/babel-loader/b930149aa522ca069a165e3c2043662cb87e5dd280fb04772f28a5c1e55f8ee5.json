{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ColorMatchingForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorMatchingForm = ({\n  onSubmit\n}) => {\n  _s();\n  const location = useLocation();\n  const {\n    RSN,\n    selectedStates\n  } = location.state || {}; // Access RSN and selectedFields passed via navigation\n\n  const [numColors, setNumColors] = useState(0); // Number of color matches\n  const [buttonNames, setButtonNames] = useState([]); // Names for the buttons\n  const [activeColorMatchIndex, setActiveColorMatchIndex] = useState(null); // To track which color match is being edited\n  const [formData, setFormData] = useState([]); // To store form data for the color match form\n\n  // Handle number of colors change\n  const handleNumColorsChange = e => {\n    const num = parseInt(e.target.value, 10);\n    setNumColors(num);\n    setButtonNames(Array(num).fill(\"\")); // Reset button names when the number changes\n    setActiveColorMatchIndex(null); // Reset active color match when number of colors changes\n  };\n\n  // Handle button name change\n  const handleButtonNameChange = (index, e) => {\n    const newNames = [...buttonNames];\n    newNames[index] = e.target.value;\n    setButtonNames(newNames);\n  };\n\n  // Handle form data change\n  const handleFormDataChange = (rowIndex, colIndex, e) => {\n    const newData = [...formData];\n    if (!newData[rowIndex]) newData[rowIndex] = Array(16).fill(\"\"); // Ensure each row has 16 columns\n    newData[rowIndex][colIndex] = e.target.value;\n    setFormData(newData);\n  };\n\n  // Handle submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Pass the button names and formData to the parent component (AddKnittingDetailsForm)\n    onSubmit(buttonNames, formData);\n  };\n\n  // Open the color match form when a button is clicked\n  const openColorMatchForm = index => {\n    setActiveColorMatchIndex(index);\n    // Initialize the form data with rows based on selectedFields and columns = 16\n    const initialFormData = Array(Object.keys(selectedStates).length).fill(Array(16).fill(\"\"));\n    setFormData(initialFormData);\n  };\n  useEffect(() => {\n    // Optionally, you can pre-populate the form based on RSN or selectedFields if needed.\n    if (selectedStates) {\n      // Log selectedStates for debugging\n      console.log(\"selectedStates:\", selectedStates);\n\n      // Ensure selectedStates is an object before proceeding\n      if (typeof selectedStates !== \"object\" || selectedStates === null) {\n        console.error(\"selectedStates is not a valid object:\", selectedStates);\n        return;\n      }\n    }\n  }, [selectedStates, RSN]); // Re-run when selectedFields or RSN change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Color Matching\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"RSN: \", RSN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected Panels: \", JSON.stringify(selectedStates)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number of color matches: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numColors,\n        onChange: handleNumColorsChange,\n        min: \"1\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Array.from({\n        length: numColors\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Color Match \", index + 1, \" Name: \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: buttonNames[index],\n          onChange: e => handleButtonNameChange(index, e),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => openColorMatchForm(index),\n          children: \"Open Color Match Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), activeColorMatchIndex !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Color Match \", activeColorMatchIndex + 1, \" Form\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          border: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this), Array.from({\n                length: 16\n              }, (_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Col \", index + 1]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(selectedStates).filter(([key, value]) => value === true) // Filter only the fields where value is true\n            .map(([fieldKey, fieldValue], rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: fieldKey\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 23\n              }, this), \" \", Array.from({\n                length: 16\n              }, (_, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: formData[rowIndex] ? formData[rowIndex][colIndex] : \"\",\n                  onChange: e => handleFormDataChange(rowIndex, colIndex, e),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 27\n                }, this)\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 25\n              }, this))]\n            }, rowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorMatchingForm, \"x09lUuw+DuFlkmxHpksjjKTjv/c=\", false, function () {\n  return [useLocation];\n});\n_c = ColorMatchingForm;\nexport default ColorMatchingForm;\nvar _c;\n$RefreshReg$(_c, \"ColorMatchingForm\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","ColorMatchingForm","onSubmit","_s","location","RSN","selectedStates","state","numColors","setNumColors","buttonNames","setButtonNames","activeColorMatchIndex","setActiveColorMatchIndex","formData","setFormData","handleNumColorsChange","e","num","parseInt","target","value","Array","fill","handleButtonNameChange","index","newNames","handleFormDataChange","rowIndex","colIndex","newData","handleSubmit","preventDefault","openColorMatchForm","initialFormData","Object","keys","length","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","type","onChange","min","required","from","_","onClick","border","entries","filter","key","map","fieldKey","fieldValue","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ColorMatchingForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst ColorMatchingForm = ({ onSubmit }) => {\r\n  const location = useLocation();\r\n  const { RSN, selectedStates } = location.state || {}; // Access RSN and selectedFields passed via navigation\r\n\r\n  const [numColors, setNumColors] = useState(0); // Number of color matches\r\n  const [buttonNames, setButtonNames] = useState([]); // Names for the buttons\r\n  const [activeColorMatchIndex, setActiveColorMatchIndex] = useState(null); // To track which color match is being edited\r\n  const [formData, setFormData] = useState([]); // To store form data for the color match form\r\n\r\n  // Handle number of colors change\r\n  const handleNumColorsChange = (e) => {\r\n    const num = parseInt(e.target.value, 10);\r\n    setNumColors(num);\r\n    setButtonNames(Array(num).fill(\"\")); // Reset button names when the number changes\r\n    setActiveColorMatchIndex(null); // Reset active color match when number of colors changes\r\n  };\r\n\r\n  // Handle button name change\r\n  const handleButtonNameChange = (index, e) => {\r\n    const newNames = [...buttonNames];\r\n    newNames[index] = e.target.value;\r\n    setButtonNames(newNames);\r\n  };\r\n\r\n  // Handle form data change\r\n  const handleFormDataChange = (rowIndex, colIndex, e) => {\r\n    const newData = [...formData];\r\n    if (!newData[rowIndex]) newData[rowIndex] = Array(16).fill(\"\"); // Ensure each row has 16 columns\r\n    newData[rowIndex][colIndex] = e.target.value;\r\n    setFormData(newData);\r\n  };\r\n\r\n  // Handle submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Pass the button names and formData to the parent component (AddKnittingDetailsForm)\r\n    onSubmit(buttonNames, formData);\r\n  };\r\n\r\n  // Open the color match form when a button is clicked\r\n  const openColorMatchForm = (index) => {\r\n    setActiveColorMatchIndex(index);\r\n    // Initialize the form data with rows based on selectedFields and columns = 16\r\n    const initialFormData = Array(Object.keys(selectedStates).length).fill(\r\n      Array(16).fill(\"\")\r\n    );\r\n    setFormData(initialFormData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Optionally, you can pre-populate the form based on RSN or selectedFields if needed.\r\n    if (selectedStates) {\r\n      // Log selectedStates for debugging\r\n      console.log(\"selectedStates:\", selectedStates);\r\n\r\n      // Ensure selectedStates is an object before proceeding\r\n      if (typeof selectedStates !== \"object\" || selectedStates === null) {\r\n        console.error(\"selectedStates is not a valid object:\", selectedStates);\r\n        return;\r\n      }\r\n    }\r\n  }, [selectedStates, RSN]); // Re-run when selectedFields or RSN change\r\n\r\n  return (\r\n    <div>\r\n      <h2>Color Matching</h2>\r\n      <p>RSN: {RSN}</p> {/* Display RSN for reference */}\r\n      <p>Selected Panels: {JSON.stringify(selectedStates)}</p>{\" \"}\r\n      {/* Optionally, display selected fields */}\r\n      {/* Color Match Buttons */}\r\n      <div>\r\n        <label>Number of color matches: </label>\r\n        <input\r\n          type=\"number\"\r\n          value={numColors}\r\n          onChange={handleNumColorsChange}\r\n          min=\"1\"\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        {Array.from({ length: numColors }, (_, index) => (\r\n          <div key={index}>\r\n            <label>Color Match {index + 1} Name: </label>\r\n            <input\r\n              type=\"text\"\r\n              value={buttonNames[index]}\r\n              onChange={(e) => handleButtonNameChange(index, e)}\r\n              required\r\n            />\r\n            <button type=\"button\" onClick={() => openColorMatchForm(index)}>\r\n              Open Color Match Form\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* Dynamic Form for Color Match */}\r\n      {activeColorMatchIndex !== null && (\r\n        <div>\r\n          <h3>Color Match {activeColorMatchIndex + 1} Form</h3>\r\n          <form onSubmit={handleSubmit}>\r\n            <table border=\"1\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Field</th>\r\n                  {Array.from({ length: 16 }, (_, index) => (\r\n                    <th key={index}>Col {index + 1}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.entries(selectedStates)\r\n                  .filter(([key, value]) => value === true) // Filter only the fields where value is true\r\n                  .map(([fieldKey, fieldValue], rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                      <td>{fieldKey}</td>{\" \"}\r\n                      {/* Display field key as row header */}\r\n                      {Array.from({ length: 16 }, (_, colIndex) => (\r\n                        <td key={colIndex}>\r\n                          <input\r\n                            type=\"text\"\r\n                            value={\r\n                              formData[rowIndex]\r\n                                ? formData[rowIndex][colIndex]\r\n                                : \"\"\r\n                            }\r\n                            onChange={(e) =>\r\n                              handleFormDataChange(rowIndex, colIndex, e)\r\n                            }\r\n                            required\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            <button type=\"submit\">Submit</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorMatchingForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}