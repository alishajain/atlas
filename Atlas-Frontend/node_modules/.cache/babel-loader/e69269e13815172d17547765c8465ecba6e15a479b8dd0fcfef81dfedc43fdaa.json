{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ColorMatching.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { addColorMatching } from \"../API/ColorApi\"; // Assuming colorApi.js is in the 'API' folder\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorMatching = () => {\n  _s();\n  const location = useLocation();\n  // const { RSN, selectedStates, size } = location.state || {};\n  const RSN = 10;\n  const selectedStates = {\n    FrontRight: false,\n    FrontLeft: false,\n    FrontComplete: true,\n    Tape: true,\n    kharcha1: false,\n    Kharcha2: true\n  };\n  // const size = \"M\";\n\n  const [numColors, setNumColors] = useState(0); // Number of color matches\n  const [colorMatches, setColorMatches] = useState([]); // Color match names entered by user\n  const [error, setError] = useState(\"\"); // To store error messages\n  const [loading, setLoading] = useState(false); // To handle loading state\n  const [success, setSuccess] = useState(\"\"); // To store success message\n\n  // Function to generate ColorId based on RSN, first and last letters of button names, and selected uppercase fields\n  const generateColorId = () => {\n    const firstAndLastLetters = colorMatches.map(name => {\n      if (name) {\n        return name[0].toUpperCase() + name[name.length - 1].toUpperCase();\n      }\n      return \"\";\n    }).join(\"\"); // Join first and last letters of each color match name\n\n    const selectedUppercase = Object.entries(selectedStates).filter(([key, value]) => value === true) // Filter selected states where value is true\n    .map(([key]) => key) // Get keys of the selected states\n    .filter(key => /^[A-Z0-9]+$/.test(key)) // Only include uppercase letters and numerals\n    .join(\"\"); // Join them into a single string\n\n    return `${RSN}${firstAndLastLetters}${selectedUppercase}`;\n  };\n\n  // Handle number of color matches input change\n  const handleNumColorsChange = e => {\n    const num = parseInt(e.target.value, 10);\n    setNumColors(num);\n    setColorMatches(Array(num).fill(\"\")); // Reset color matches array based on number of matches\n  };\n\n  // Handle the input change for each color match\n  const handleColorMatchChange = (index, e) => {\n    const newColorMatches = [...colorMatches];\n    newColorMatches[index] = e.target.value;\n    setColorMatches(newColorMatches);\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate that all color match fields are filled\n    if (colorMatches.some(match => match === \"\")) {\n      setError(\"All color match fields must be filled.\");\n      return;\n    }\n    setLoading(true);\n    setError(\"\"); // Clear any previous errors\n    setSuccess(\"\"); // Clear any previous success message\n\n    // Generate the ColorID\n    const colorId = generateColorId();\n\n    // Prepare the combinations of panels and matching names\n    const panelEntries = Object.entries(selectedStates).filter(([key, value]) => value === true);\n    try {\n      // Create an array of promises to make multiple API calls\n      const apiCalls = panelEntries.map(([panel]) => {\n        return colorMatches.map(async matchingName => {\n          const colorData = {\n            RSN,\n            ColorID: colorId,\n            Panel: panel,\n            // Panel for this specific iteration\n            MatchingName: matchingName // Matching name for this specific iteration\n          };\n\n          // Call the addColorMatching API for each combination\n          try {\n            const response = await addColorMatching(colorData);\n            console.log(\"Color matching added:\", response);\n            return response;\n          } catch (error) {\n            console.error(\"Error:\", error);\n            throw error;\n          }\n        });\n      });\n\n      // Flatten the array of promises and wait for all of them to resolve\n      await Promise.all(apiCalls.flat());\n\n      // After all API calls are successful, set the success message\n      setSuccess(\"Color matching added successfully!\");\n      // Reset the form after successful submission\n      setNumColors(0);\n      setColorMatches([]);\n    } catch (error) {\n      setError(\"An error occurred while adding color matching.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Color Matching\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Number of color matches: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: numColors,\n          onChange: handleNumColorsChange,\n          min: \"1\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), Array.from({\n        length: numColors\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Color Match \", index + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: colorMatches[index] || \"\",\n          onChange: e => handleColorMatchChange(index, e),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Submitting...\" : \"Add Color Matching\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorMatching, \"eZWPwyWz8h9KtuaXTRrb49dopo4=\", false, function () {\n  return [useLocation];\n});\n_c = ColorMatching;\nexport default ColorMatching;\nvar _c;\n$RefreshReg$(_c, \"ColorMatching\");","map":{"version":3,"names":["React","useState","useLocation","addColorMatching","jsxDEV","_jsxDEV","ColorMatching","_s","location","RSN","selectedStates","FrontRight","FrontLeft","FrontComplete","Tape","kharcha1","Kharcha2","numColors","setNumColors","colorMatches","setColorMatches","error","setError","loading","setLoading","success","setSuccess","generateColorId","firstAndLastLetters","map","name","toUpperCase","length","join","selectedUppercase","Object","entries","filter","key","value","test","handleNumColorsChange","e","num","parseInt","target","Array","fill","handleColorMatchChange","index","newColorMatches","handleSubmit","preventDefault","some","match","colorId","panelEntries","apiCalls","panel","matchingName","colorData","ColorID","Panel","MatchingName","response","console","log","Promise","all","flat","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","min","required","from","_","disabled","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ColorMatching.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { addColorMatching } from \"../API/ColorApi\"; // Assuming colorApi.js is in the 'API' folder\r\n\r\nconst ColorMatching = () => {\r\n  const location = useLocation();\r\n  // const { RSN, selectedStates, size } = location.state || {};\r\n  const RSN = 10;\r\n  const selectedStates = {\r\n    FrontRight: false,\r\n    FrontLeft: false,\r\n    FrontComplete: true,\r\n    Tape: true,\r\n    kharcha1: false,\r\n    Kharcha2: true,\r\n  };\r\n  // const size = \"M\";\r\n\r\n  const [numColors, setNumColors] = useState(0); // Number of color matches\r\n  const [colorMatches, setColorMatches] = useState([]); // Color match names entered by user\r\n  const [error, setError] = useState(\"\"); // To store error messages\r\n  const [loading, setLoading] = useState(false); // To handle loading state\r\n  const [success, setSuccess] = useState(\"\"); // To store success message\r\n\r\n  // Function to generate ColorId based on RSN, first and last letters of button names, and selected uppercase fields\r\n  const generateColorId = () => {\r\n    const firstAndLastLetters = colorMatches\r\n      .map((name) => {\r\n        if (name) {\r\n          return name[0].toUpperCase() + name[name.length - 1].toUpperCase();\r\n        }\r\n        return \"\";\r\n      })\r\n      .join(\"\"); // Join first and last letters of each color match name\r\n\r\n    const selectedUppercase = Object.entries(selectedStates)\r\n      .filter(([key, value]) => value === true) // Filter selected states where value is true\r\n      .map(([key]) => key) // Get keys of the selected states\r\n      .filter((key) => /^[A-Z0-9]+$/.test(key)) // Only include uppercase letters and numerals\r\n      .join(\"\"); // Join them into a single string\r\n\r\n    return `${RSN}${firstAndLastLetters}${selectedUppercase}`;\r\n  };\r\n\r\n  // Handle number of color matches input change\r\n  const handleNumColorsChange = (e) => {\r\n    const num = parseInt(e.target.value, 10);\r\n    setNumColors(num);\r\n    setColorMatches(Array(num).fill(\"\")); // Reset color matches array based on number of matches\r\n  };\r\n\r\n  // Handle the input change for each color match\r\n  const handleColorMatchChange = (index, e) => {\r\n    const newColorMatches = [...colorMatches];\r\n    newColorMatches[index] = e.target.value;\r\n    setColorMatches(newColorMatches);\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate that all color match fields are filled\r\n    if (colorMatches.some((match) => match === \"\")) {\r\n      setError(\"All color match fields must be filled.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(\"\"); // Clear any previous errors\r\n    setSuccess(\"\"); // Clear any previous success message\r\n\r\n    // Generate the ColorID\r\n    const colorId = generateColorId();\r\n\r\n    // Prepare the combinations of panels and matching names\r\n    const panelEntries = Object.entries(selectedStates).filter(\r\n      ([key, value]) => value === true\r\n    );\r\n\r\n    try {\r\n      // Create an array of promises to make multiple API calls\r\n      const apiCalls = panelEntries.map(([panel]) => {\r\n        return colorMatches.map(async (matchingName) => {\r\n          const colorData = {\r\n            RSN,\r\n            ColorID: colorId,\r\n            Panel: panel, // Panel for this specific iteration\r\n            MatchingName: matchingName, // Matching name for this specific iteration\r\n          };\r\n\r\n          // Call the addColorMatching API for each combination\r\n          try {\r\n            const response = await addColorMatching(colorData);\r\n            console.log(\"Color matching added:\", response);\r\n            return response;\r\n          } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            throw error;\r\n          }\r\n        });\r\n      });\r\n\r\n      // Flatten the array of promises and wait for all of them to resolve\r\n      await Promise.all(apiCalls.flat());\r\n\r\n      // After all API calls are successful, set the success message\r\n      setSuccess(\"Color matching added successfully!\");\r\n      // Reset the form after successful submission\r\n      setNumColors(0);\r\n      setColorMatches([]);\r\n    } catch (error) {\r\n      setError(\"An error occurred while adding color matching.\");\r\n      console.error(\"Error:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add Color Matching</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Step 1: Input for the number of color matches */}\r\n        <div>\r\n          <label>Number of color matches: </label>\r\n          <input\r\n            type=\"number\"\r\n            value={numColors}\r\n            onChange={handleNumColorsChange}\r\n            min=\"1\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        {/* Step 2: Render input fields for each color match */}\r\n        {Array.from({ length: numColors }).map((_, index) => (\r\n          <div key={index}>\r\n            <label>Color Match {index + 1}:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={colorMatches[index] || \"\"}\r\n              onChange={(e) => handleColorMatchChange(index, e)}\r\n              required\r\n            />\r\n          </div>\r\n        ))}\r\n\r\n        {/* Submit Button */}\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Submitting...\" : \"Add Color Matching\"}\r\n        </button>\r\n      </form>\r\n\r\n      {/* Display error or success messages */}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      {success && <p style={{ color: \"green\" }}>{success}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorMatching;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}