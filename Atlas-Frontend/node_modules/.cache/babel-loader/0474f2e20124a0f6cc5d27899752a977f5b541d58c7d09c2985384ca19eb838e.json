{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Create a new color matching entry\nconst addColorMatching = async colorData => {\n  // Log the data that will be sent in the API request to ensure it's correct\n  console.log(\"Sending Color Data:\", colorData);\n  try {\n    // Ensure headers are set if needed (e.g., Content-Type, Authorization, etc.)\n    const response = await axios.post(`${API_URL}/add-color-matching`, colorData, {\n      headers: {\n        \"Content-Type\": \"application/json\" // Adjust if the server expects something different\n      }\n    });\n\n    // Log and return the response data\n    console.log(\"API Response:\", response.data);\n    return response.data;\n  } catch (error) {\n    // Log more detailed error information\n    console.error(\"Error creating color matching:\", error.response ? error.response.data : error.message);\n\n    // Throwing the error with additional context\n    throw new Error(`Error during API call: ${error.response ? error.response.data : error.message}`);\n  }\n};\nexport { addColorMatching };","map":{"version":3,"names":["axios","API_URL","addColorMatching","colorData","console","log","response","post","headers","data","error","message","Error"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/ColorApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Create a new color matching entry\r\nconst addColorMatching = async (colorData) => {\r\n  // Log the data that will be sent in the API request to ensure it's correct\r\n  console.log(\"Sending Color Data:\", colorData);\r\n\r\n  try {\r\n    // Ensure headers are set if needed (e.g., Content-Type, Authorization, etc.)\r\n    const response = await axios.post(`${API_URL}/add-color-matching`, colorData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\", // Adjust if the server expects something different\r\n      },\r\n    });\r\n\r\n    // Log and return the response data\r\n    console.log(\"API Response:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Log more detailed error information\r\n    console.error(\"Error creating color matching:\", error.response ? error.response.data : error.message);\r\n\r\n    // Throwing the error with additional context\r\n    throw new Error(`Error during API call: ${error.response ? error.response.data : error.message}`);\r\n  }\r\n};\r\n\r\nexport { addColorMatching };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,gBAAgB,GAAG,MAAOC,SAAS,IAAK;EAC5C;EACAC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,SAAS,CAAC;EAE7C,IAAI;IACF;IACA,MAAMG,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,qBAAqB,EAAEE,SAAS,EAAE;MAC5EK,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB,CAAE;MACtC;IACF,CAAC,CAAC;;IAEF;IACAJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACG,IAAI,CAAC;IAC3C,OAAOH,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAN,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC;;IAErG;IACA,MAAM,IAAIC,KAAK,CAAC,0BAA0BF,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAGC,KAAK,CAACC,OAAO,EAAE,CAAC;EACnG;AACF,CAAC;AAED,SAAST,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}