{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ShowImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getImageByRSN } from '../API/ImageApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowImage = ({\n  RSN\n}) => {\n  _s();\n  const [imageData, setImageData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchImage = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const data = await getImageByRSN(RSN);\n        console.log('Image data received:', data); // Debugging log\n        setImageData(data.ImageData); // Assuming the data contains ImageData (base64 or file path)\n      } catch (err) {\n        setError('Error fetching image');\n        console.error(err); // Log the error for debugging\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchImage();\n  }, [RSN]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: imageData ?\n    // Check if it's base64 or file path before displaying\n    imageData.startsWith('data:image') ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageData,\n      alt: \"Sample\",\n      style: {\n        width: '100%',\n        maxWidth: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this) :\n    /*#__PURE__*/\n    // If it's a file path, use a proper URL to fetch the image\n    _jsxDEV(\"img\", {\n      src: `http://localhost:5000/uploads/${imageData}`,\n      alt: \"Sample\",\n      style: {\n        width: '100%',\n        maxWidth: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No image found for this RSN.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowImage, \"KEnvJThExdJ31O6VITgjvSJA/AQ=\");\n_c = ShowImage;\nexport default ShowImage;\nvar _c;\n$RefreshReg$(_c, \"ShowImage\");","map":{"version":3,"names":["React","useState","useEffect","getImageByRSN","jsxDEV","_jsxDEV","ShowImage","RSN","_s","imageData","setImageData","loading","setLoading","error","setError","fetchImage","data","console","log","ImageData","err","children","fileName","_jsxFileName","lineNumber","columnNumber","startsWith","src","alt","style","width","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ShowImage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getImageByRSN } from '../API/ImageApi';\r\n\r\nconst ShowImage = ({ RSN }) => {\r\n  const [imageData, setImageData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchImage = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const data = await getImageByRSN(RSN);\r\n        console.log('Image data received:', data); // Debugging log\r\n        setImageData(data.ImageData); // Assuming the data contains ImageData (base64 or file path)\r\n      } catch (err) {\r\n        setError('Error fetching image');\r\n        console.error(err); // Log the error for debugging\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchImage();\r\n  }, [RSN]);\r\n\r\n  if (loading) {\r\n    return <p>Loading image...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {imageData ? (\r\n        // Check if it's base64 or file path before displaying\r\n        imageData.startsWith('data:image') ? (\r\n          <img src={imageData} alt=\"Sample\" style={{ width: '100%', maxWidth: '600px' }} />\r\n        ) : (\r\n          // If it's a file path, use a proper URL to fetch the image\r\n          <img src={`http://localhost:5000/uploads/${imageData}`} alt=\"Sample\" style={{ width: '100%', maxWidth: '600px' }} />\r\n        )\r\n      ) : (\r\n        <p>No image found for this RSN.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowImage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QACd,MAAME,IAAI,GAAG,MAAMb,aAAa,CAACI,GAAG,CAAC;QACrCU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,IAAI,CAAC,CAAC,CAAC;QAC3CN,YAAY,CAACM,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZN,QAAQ,CAAC,sBAAsB,CAAC;QAChCG,OAAO,CAACJ,KAAK,CAACO,GAAG,CAAC,CAAC,CAAC;MACtB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,IAAII,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAgB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChC;EAEA,IAAIZ,KAAK,EAAE;IACT,oBAAOR,OAAA;MAAAgB,QAAA,EAAIR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACvB;EAEA,oBACEpB,OAAA;IAAAgB,QAAA,EACGZ,SAAS;IACR;IACAA,SAAS,CAACiB,UAAU,CAAC,YAAY,CAAC,gBAChCrB,OAAA;MAAKsB,GAAG,EAAElB,SAAU;MAACmB,GAAG,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAQ;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAAA;IAEjF;IACApB,OAAA;MAAKsB,GAAG,EAAE,iCAAiClB,SAAS,EAAG;MAACmB,GAAG,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAQ;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACpH,gBAEDpB,OAAA;MAAAgB,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACnC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CA/CIF,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAiDf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}