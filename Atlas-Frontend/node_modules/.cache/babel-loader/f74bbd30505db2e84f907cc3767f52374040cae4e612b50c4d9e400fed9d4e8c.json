{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Function to fetch employee details\nexport const employeeDetails = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/EmployeeDetails`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error Fetching Employee Details\", error);\n    throw new Error(\"Error Fetching Employee Details\");\n  }\n};\n\n// Function to add a new employee\nexport const addEmployee = async employeeData => {\n  try {\n    const response = await axios.post(`${API_URL}/add-employee`, employeeData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error adding employee:\", error);\n    throw new Error(\"Failed to add employee. Please try again later.\");\n  }\n};\n\n// Function to search for employees\nexport const searchEmployee = async (empId, empName) => {\n  try {\n    const response = await axios.get(`${API_URL}/search-employee`, {\n      params: {\n        empId: empId || undefined,\n        // Send undefined if the field is empty\n        empName: empName || undefined // Send undefined if the field is empty\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching employee details:\", error);\n    throw new Error(\"Error fetching employee details\");\n  }\n};\n\n// Function to delete an employee\nexport const deleteEmployee = async empId => {\n  try {\n    const response = await axios.delete(`${API_URL}/delete-employee/${empId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error deleting employee:\", error);\n    throw new Error(\"Error deleting employee\");\n  }\n};\n\n// Function to update an employee\nexport const updateEmployee = async updatedEmployee => {\n  try {\n    console.log(updatedEmployee); // Log to check the data being sent\n\n    // Make a PUT request to update the employee, passing EmpId in the URL\n    const response = await axios.put(`${API_URL}/update-employee/${updatedEmployee.EmpId}`, updatedEmployee // Send the updated employee data in the request body\n    );\n    console.log(response.data.success);\n    // Assuming the response contains a `success` field to indicate success\n    if (response.data.success) {\n      return response.data; // Return the updated employee data on success\n    } else {\n      throw new Error(\"Failed to update employee\");\n    }\n  } catch (error) {\n    console.error(\"Error updating employee:\", error);\n    throw new Error(\"Error updating employee\");\n  }\n};","map":{"version":3,"names":["axios","API_URL","employeeDetails","response","get","data","error","console","Error","addEmployee","employeeData","post","searchEmployee","empId","empName","params","undefined","deleteEmployee","delete","updateEmployee","updatedEmployee","log","put","EmpId","success"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/EmployeeApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Function to fetch employee details\r\nexport const employeeDetails = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/EmployeeDetails`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error Fetching Employee Details\", error);\r\n    throw new Error(\"Error Fetching Employee Details\");\r\n  }\r\n};\r\n\r\n// Function to add a new employee\r\nexport const addEmployee = async (employeeData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-employee`, employeeData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error adding employee:\", error);\r\n    throw new Error(\"Failed to add employee. Please try again later.\");\r\n  }\r\n};\r\n\r\n// Function to search for employees\r\nexport const searchEmployee = async (empId, empName) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search-employee`, {\r\n      params: {\r\n        empId: empId || undefined, // Send undefined if the field is empty\r\n        empName: empName || undefined, // Send undefined if the field is empty\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching employee details:\", error);\r\n    throw new Error(\"Error fetching employee details\");\r\n  }\r\n};\r\n\r\n// Function to delete an employee\r\nexport const deleteEmployee = async (empId) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/delete-employee/${empId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting employee:\", error);\r\n    throw new Error(\"Error deleting employee\");\r\n  }\r\n};\r\n\r\n// Function to update an employee\r\nexport const updateEmployee = async (updatedEmployee) => {\r\n  try {\r\n    console.log(updatedEmployee); // Log to check the data being sent\r\n\r\n    // Make a PUT request to update the employee, passing EmpId in the URL\r\n    const response = await axios.put(\r\n      `${API_URL}/update-employee/${updatedEmployee.EmpId}`,\r\n      updatedEmployee // Send the updated employee data in the request body\r\n    );\r\n\r\n    console.log(response.data.success);\r\n    // Assuming the response contains a `success` field to indicate success\r\n    if (response.data.success) {\r\n      return response.data; // Return the updated employee data on success\r\n    } else {\r\n      throw new Error(\"Failed to update employee\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error updating employee:\", error);\r\n    throw new Error(\"Error updating employee\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,kBAAkB,CAAC;IAC9D,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,YAAY,IAAK;EACjD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,eAAe,EAAES,YAAY,CAAC;IAC1E,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIE,KAAK,CAAC,iDAAiD,CAAC;EACpE;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,KAAK;EACtD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,kBAAkB,EAAE;MAC7Dc,MAAM,EAAE;QACNF,KAAK,EAAEA,KAAK,IAAIG,SAAS;QAAE;QAC3BF,OAAO,EAAEA,OAAO,IAAIE,SAAS,CAAE;MACjC;IACF,CAAC,CAAC;IACF,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,cAAc,GAAG,MAAOJ,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACkB,MAAM,CAAC,GAAGjB,OAAO,oBAAoBY,KAAK,EAAE,CAAC;IAC1E,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,cAAc,GAAG,MAAOC,eAAe,IAAK;EACvD,IAAI;IACFb,OAAO,CAACc,GAAG,CAACD,eAAe,CAAC,CAAC,CAAC;;IAE9B;IACA,MAAMjB,QAAQ,GAAG,MAAMH,KAAK,CAACsB,GAAG,CAC9B,GAAGrB,OAAO,oBAAoBmB,eAAe,CAACG,KAAK,EAAE,EACrDH,eAAe,CAAC;IAClB,CAAC;IAEDb,OAAO,CAACc,GAAG,CAAClB,QAAQ,CAACE,IAAI,CAACmB,OAAO,CAAC;IAClC;IACA,IAAIrB,QAAQ,CAACE,IAAI,CAACmB,OAAO,EAAE;MACzB,OAAOrB,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}