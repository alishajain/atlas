{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\EmplyeeDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { employeeDetails } from '../API/EmployeeApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeDetails = () => {\n  _s();\n  // State hooks to manage employees, loading state, and error state\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch employee details on component mount\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const data = await employeeDetails(); // Fetch employee details\n        setEmployees(data.data); // Set the employees' data to state\n        setLoading(false); // Set loading to false once data is fetched\n      } catch (err) {\n        setError('Failed to fetch employee details'); // Handle error\n        setLoading(false); // Stop loading if there's an error\n      }\n    };\n    fetchEmployeeData(); // Call the function to fetch data\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // If loading, show loading indicator\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, this);\n\n  // If there's an error, show the error message\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 21\n  }, this);\n\n  // If data is successfully fetched, display the employee list\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Employee List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [employee.name, \" - \", employee.position, \" \"]\n      }, employee.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeDetails, \"nDNsbwi6cauKbYJjxXXg9/c4fAc=\");\n_c = EmployeeDetails;\nexport default EmployeeDetails;\nvar _c;\n$RefreshReg$(_c, \"EmployeeDetails\");","map":{"version":3,"names":["React","useState","useEffect","employeeDetails","jsxDEV","_jsxDEV","EmployeeDetails","_s","employees","setEmployees","loading","setLoading","error","setError","fetchEmployeeData","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","map","employee","name","position","id","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/EmplyeeDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { employeeDetails } from '../API/EmployeeApi';\r\n\r\nconst EmployeeDetails = () => {\r\n  // State hooks to manage employees, loading state, and error state\r\n  const [employees, setEmployees] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch employee details on component mount\r\n  useEffect(() => {\r\n    const fetchEmployeeData = async () => {\r\n      try {\r\n        const data = await employeeDetails(); // Fetch employee details\r\n        setEmployees(data.data); // Set the employees' data to state\r\n        setLoading(false); // Set loading to false once data is fetched\r\n      } catch (err) {\r\n        setError('Failed to fetch employee details'); // Handle error\r\n        setLoading(false); // Stop loading if there's an error\r\n      }\r\n    };\r\n\r\n    fetchEmployeeData(); // Call the function to fetch data\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  // If loading, show loading indicator\r\n  if (loading) return <div>Loading...</div>;\r\n\r\n  // If there's an error, show the error message\r\n  if (error) return <div>{error}</div>;\r\n\r\n  // If data is successfully fetched, display the employee list\r\n  return (\r\n    <div>\r\n      <h1>Employee List</h1>\r\n      <ul>\r\n        {employees.map((employee) => (\r\n          <li key={employee.id}>\r\n            {employee.name} - {employee.position} {/* Adjust these properties to match your data structure */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeDetails;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMZ,eAAe,CAAC,CAAC,CAAC,CAAC;QACtCM,YAAY,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;QACzBJ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZH,QAAQ,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAC9CF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDG,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,IAAIJ,OAAO,EAAE,oBAAOL,OAAA;IAAAY,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAEzC;EACA,IAAIT,KAAK,EAAE,oBAAOP,OAAA;IAAAY,QAAA,EAAML;EAAK;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;;EAEpC;EACA,oBACEhB,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBhB,OAAA;MAAAY,QAAA,EACGT,SAAS,CAACc,GAAG,CAAEC,QAAQ,iBACtBlB,OAAA;QAAAY,QAAA,GACGM,QAAQ,CAACC,IAAI,EAAC,KAAG,EAACD,QAAQ,CAACE,QAAQ,EAAC,GAAC;MAAA,GAD/BF,QAAQ,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACd,EAAA,CAzCID,eAAe;AAAAqB,EAAA,GAAfrB,eAAe;AA2CrB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}