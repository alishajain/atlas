{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\ShowColorDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\n\n// Utility function to check for non-null, non-zero values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isValidValue = value => {\n  return value !== null && value !== \"\" && value !== 0;\n};\nconst ShowColorDetail = ({\n  ColorId\n}) => {\n  _s();\n  const [colorDetail, setColorDetail] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    if (ColorId) {\n      const fetchData = async () => {\n        setLoading(true);\n        try {\n          const response = await getColorDetailByColorId(ColorId);\n          setColorDetail(response);\n        } catch (err) {\n          setError(\"Failed to fetch color details.\");\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchData();\n    }\n  }, [ColorId]); // Trigger effect whenever ColorId changes\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 21\n  }, this);\n\n  // Handle the case when colorDetail is an array with multiple entries\n  if (!colorDetail || colorDetail.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No color details available for this Color ID.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Access the first item in the array\n  const details = colorDetail[0];\n\n  // Define columns based on the Color keys\n  const colorKeys = [\"BaseColor\", \"Color1\", \"Color2\", \"Color3\", \"Color4\", \"Color5\", \"Color6\", \"Color7\", \"Color8\", \"Color9\", \"Color10\", \"Color11\", \"Color12\", \"Color13\", \"Color14\"];\n\n  // Filter out invalid values\n  const validColorKeys = colorKeys.filter(colorKey => {\n    const colorData = details[colorKey];\n    return colorData && isValidValue(colorData.Name) && isValidValue(colorData.Weight);\n  });\n\n  // Extract all 'Name' and 'Weight' data for valid color fields\n  const names = validColorKeys.map(colorKey => details[colorKey].Name);\n  const weights = validColorKeys.map(colorKey => details[colorKey].Weight);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Color Detail for Color ID: \", ColorId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), colorDetail ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: \"100%\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Property\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), validColorKeys.map((colorKey, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: colorKey\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), names.map((name, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), weights.map((weight, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: weight\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No color details available for this Color ID.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowColorDetail, \"c9fwLj3ITR7NSgBqPjlxLyvVv28=\");\n_c = ShowColorDetail;\nexport default ShowColorDetail;\nvar _c;\n$RefreshReg$(_c, \"ShowColorDetail\");","map":{"version":3,"names":["React","useState","useEffect","getColorDetailByColorId","jsxDEV","_jsxDEV","isValidValue","value","ShowColorDetail","ColorId","_s","colorDetail","setColorDetail","loading","setLoading","error","setError","fetchData","response","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","details","colorKeys","validColorKeys","filter","colorKey","colorData","Name","Weight","names","map","weights","border","width","marginTop","index","name","weight","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/ShowColorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\n// Utility function to check for non-null, non-zero values\r\nconst isValidValue = (value) => {\r\n  return value !== null && value !== \"\" && value !== 0;\r\n};\r\n\r\nconst ShowColorDetail = ({ ColorId }) => {\r\n  const [colorDetail, setColorDetail] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (ColorId) {\r\n      const fetchData = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const response = await getColorDetailByColorId(ColorId);\r\n          setColorDetail(response);\r\n        } catch (err) {\r\n          setError(\"Failed to fetch color details.\");\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [ColorId]); // Trigger effect whenever ColorId changes\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p style={{ color: \"red\" }}>{error}</p>;\r\n\r\n  // Handle the case when colorDetail is an array with multiple entries\r\n  if (!colorDetail || colorDetail.length === 0) {\r\n    return <p>No color details available for this Color ID.</p>;\r\n  }\r\n\r\n  // Access the first item in the array\r\n  const details = colorDetail[0];\r\n\r\n  // Define columns based on the Color keys\r\n  const colorKeys = [\r\n    \"BaseColor\", \"Color1\", \"Color2\", \"Color3\", \"Color4\", \"Color5\", \r\n    \"Color6\", \"Color7\", \"Color8\", \"Color9\", \"Color10\", \"Color11\", \r\n    \"Color12\", \"Color13\", \"Color14\"\r\n  ];\r\n\r\n  // Filter out invalid values\r\n  const validColorKeys = colorKeys.filter((colorKey) => {\r\n    const colorData = details[colorKey];\r\n    return colorData && isValidValue(colorData.Name) && isValidValue(colorData.Weight);\r\n  });\r\n\r\n  // Extract all 'Name' and 'Weight' data for valid color fields\r\n  const names = validColorKeys.map(colorKey => details[colorKey].Name);\r\n  const weights = validColorKeys.map(colorKey => details[colorKey].Weight);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Color Detail for Color ID: {ColorId}</h2>\r\n      {colorDetail ? (\r\n        <div>\r\n          <table border=\"1\" style={{ width: \"100%\", marginTop: \"20px\" }}>\r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                {validColorKeys.map((colorKey, index) => (\r\n                  <th key={index}>{colorKey}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>Name</td>\r\n                {names.map((name, index) => (\r\n                  <td key={index}>{name}</td>\r\n                ))}\r\n              </tr>\r\n              <tr>\r\n                <td>Weight</td>\r\n                {weights.map((weight, index) => (\r\n                  <td key={index}>{weight}</td>\r\n                ))}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <p>No color details available for this Color ID.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowColorDetail;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}