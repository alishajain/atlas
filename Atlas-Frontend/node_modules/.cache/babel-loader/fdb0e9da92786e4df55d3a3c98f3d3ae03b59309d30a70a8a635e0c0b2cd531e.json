{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\SearchYarn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getYarnIds, getYarnDetailsByLotNo } from \"../API/YarnApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchYarn = () => {\n  _s();\n  const [selectedYarnId, setSelectedYarnId] = useState(\"\");\n  const [yarnIds, setYarnIds] = useState([]); // Initialize as empty array\n  const [yarnDetails, setYarnDetails] = useState([]);\n\n  // Fetch Yarn IDs on component mount\n  useEffect(() => {\n    const fetchYarnIds = async () => {\n      try {\n        const yarnIdsData = await getYarnIds();\n        // Accessing the data field from the response and ensuring it's an array\n        if (yarnIdsData && Array.isArray(yarnIdsData.data)) {\n          setYarnIds(yarnIdsData.data); // Setting the yarnIds to the data array\n        } else {\n          console.error(\"Invalid data format for YarnIds\", yarnIdsData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching Yarn IDs:\", error);\n      }\n    };\n    fetchYarnIds();\n  }, []);\n\n  // Fetch Yarn details when selected YarnId changes\n  useEffect(() => {\n    if (selectedYarnId) {\n      const fetchYarnDetails = async () => {\n        try {\n          const yarnData = await getYarnDetailsByLotNo(selectedYarnId);\n          setYarnDetails(yarnData.data || []); // Ensure the data is an array\n        } catch (error) {\n          console.error(\"Error fetching yarn details:\", error);\n        }\n      };\n      fetchYarnDetails();\n    }\n  }, [selectedYarnId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Yarn Details by LotNo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"yarnId\",\n          children: \"Yarn ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"yarnId\",\n          value: selectedYarnId,\n          onChange: e => setSelectedYarnId(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Yarn ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), Array.isArray(yarnIds) && yarnIds.length > 0 ? yarnIds.map(yarn => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: yarn.YarnId,\n            children: yarn.YarnId\n          }, yarn.YarnId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"No Yarn IDs available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), yarnDetails.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Yarn Details:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Lot No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: yarnDetails.map((yarn, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: yarn.LottNo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: yarn.TotalWeight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchYarn, \"07PUnEUBAzfAjbQuCAeD1vuEaks=\");\n_c = SearchYarn;\nexport default SearchYarn;\nvar _c;\n$RefreshReg$(_c, \"SearchYarn\");","map":{"version":3,"names":["React","useState","useEffect","getYarnIds","getYarnDetailsByLotNo","jsxDEV","_jsxDEV","SearchYarn","_s","selectedYarnId","setSelectedYarnId","yarnIds","setYarnIds","yarnDetails","setYarnDetails","fetchYarnIds","yarnIdsData","Array","isArray","data","console","error","fetchYarnDetails","yarnData","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","required","length","map","yarn","YarnId","index","LottNo","TotalWeight","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/SearchYarn.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getYarnIds, getYarnDetailsByLotNo } from \"../API/YarnApi\";\r\n\r\nconst SearchYarn = () => {\r\n  const [selectedYarnId, setSelectedYarnId] = useState(\"\");\r\n  const [yarnIds, setYarnIds] = useState([]); // Initialize as empty array\r\n  const [yarnDetails, setYarnDetails] = useState([]);\r\n\r\n  // Fetch Yarn IDs on component mount\r\n  useEffect(() => {\r\n    const fetchYarnIds = async () => {\r\n      try {\r\n        const yarnIdsData = await getYarnIds();\r\n        // Accessing the data field from the response and ensuring it's an array\r\n        if (yarnIdsData && Array.isArray(yarnIdsData.data)) {\r\n          setYarnIds(yarnIdsData.data); // Setting the yarnIds to the data array\r\n        } else {\r\n          console.error(\"Invalid data format for YarnIds\", yarnIdsData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching Yarn IDs:\", error);\r\n      }\r\n    };\r\n\r\n    fetchYarnIds();\r\n  }, []);\r\n\r\n  // Fetch Yarn details when selected YarnId changes\r\n  useEffect(() => {\r\n    if (selectedYarnId) {\r\n      const fetchYarnDetails = async () => {\r\n        try {\r\n          const yarnData = await getYarnDetailsByLotNo(selectedYarnId);\r\n          setYarnDetails(yarnData.data || []); // Ensure the data is an array\r\n        } catch (error) {\r\n          console.error(\"Error fetching yarn details:\", error);\r\n        }\r\n      };\r\n\r\n      fetchYarnDetails();\r\n    }\r\n  }, [selectedYarnId]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Yarn Details by LotNo</h2>\r\n      <form>\r\n        <div>\r\n          <label htmlFor=\"yarnId\">Yarn ID:</label>\r\n          <select\r\n            id=\"yarnId\"\r\n            value={selectedYarnId}\r\n            onChange={(e) => setSelectedYarnId(e.target.value)}\r\n            required\r\n          >\r\n            <option value=\"\">Select Yarn ID</option>\r\n            {Array.isArray(yarnIds) && yarnIds.length > 0 ? (\r\n              yarnIds.map((yarn) => (\r\n                <option key={yarn.YarnId} value={yarn.YarnId}>\r\n                  {yarn.YarnId}\r\n                </option>\r\n              ))\r\n            ) : (\r\n              <option value=\"\">No Yarn IDs available</option>\r\n            )}\r\n          </select>\r\n        </div>\r\n      </form>\r\n\r\n      {yarnDetails.length > 0 && (\r\n        <div>\r\n          <h3>Yarn Details:</h3>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Lot No</th>\r\n                <th>Weight</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {yarnDetails.map((yarn, index) => (\r\n                <tr key={index}>\r\n                  <td>{yarn.LottNo}</td>\r\n                  <td>{yarn.TotalWeight}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchYarn;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}