{"ast":null,"code":"import axios from\"axios\";const API_URL=\"http://localhost:5000/api\";// Add Yarn Details - Insert new Yarn into yarn_master\nexport const addYarnDetails=async data=>{try{const response=await axios.post(`${API_URL}/add-yarn`,data,{headers:{\"Content-Type\":\"application/json\"}});return response.data;// Return response data to the caller\n}catch(error){// Enhanced error handling with more specific details\nconsole.error(\"API call error:\",error);// Check if the error has a response (e.g., 404, 500)\nif(error.response){console.error(\"Response error:\",error.response.data);throw new Error(`Error: ${error.response.status} - ${error.response.data}`);}// Check if the error is due to network issues or no response\nelse if(error.request){console.error(\"Request error:\",error.request);throw new Error(\"No response received from the API\");}// For other types of errors (e.g., misconfiguration)\nelse{console.error(\"Error message:\",error.message);throw new Error(`Error: ${error.message}`);}}};// Fetch Yarn IDs for the dropdown\nexport const getYarnIds=async()=>{try{const response=await axios.get(`${API_URL}/yarnId`);return response.data;}catch(error){console.error(\"Error fetching YarnIds:\",error);throw new Error(\"Error fetching YarnIds\");}};// API function to insert Yarn stock details and update YarnMaster table\nexport const addYarnStockDetails=async data=>{try{console.log(\"Sending data to API:\",data);// Debugging log\nconst stockResponse=await axios.post(`${API_URL}/add-yarn-stock`,data,{headers:{\"Content-Type\":\"application/json\"}});console.log(\"Received API response:\",stockResponse);// Debugging log\n// Check if success status is true\nif(stockResponse.data&&stockResponse.data.success){const{YarnId,Weight}=data;return{success:true,message:\"Yarn stock added successfully and yarn master updated.\"};}else{throw new Error(\"Error adding yarn stock details\");}}catch(error){console.error(\"API call error:\",error);if(error.response){console.error(\"Response error:\",error.response.data);throw new Error(`Error: ${error.response.status} - ${error.response.data}`);}else if(error.request){console.error(\"Request error:\",error.request);throw new Error(\"No response received from the API\");}else{console.error(\"Error message:\",error.message);throw new Error(`Error: ${error.message}`);}}};","map":{"version":3,"names":["axios","API_URL","addYarnDetails","data","response","post","headers","error","console","Error","status","request","message","getYarnIds","get","addYarnStockDetails","log","stockResponse","success","YarnId","Weight"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/YarnApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Add Yarn Details - Insert new Yarn into yarn_master\r\nexport const addYarnDetails = async (data) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-yarn`, data, {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    return response.data; // Return response data to the caller\r\n  } catch (error) {\r\n    // Enhanced error handling with more specific details\r\n    console.error(\"API call error:\", error);\r\n\r\n    // Check if the error has a response (e.g., 404, 500)\r\n    if (error.response) {\r\n      console.error(\"Response error:\", error.response.data);\r\n      throw new Error(\r\n        `Error: ${error.response.status} - ${error.response.data}`\r\n      );\r\n    }\r\n    // Check if the error is due to network issues or no response\r\n    else if (error.request) {\r\n      console.error(\"Request error:\", error.request);\r\n      throw new Error(\"No response received from the API\");\r\n    }\r\n    // For other types of errors (e.g., misconfiguration)\r\n    else {\r\n      console.error(\"Error message:\", error.message);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// Fetch Yarn IDs for the dropdown\r\nexport const getYarnIds = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/yarnId`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching YarnIds:\", error);\r\n    throw new Error(\"Error fetching YarnIds\");\r\n  }\r\n};\r\n\r\n// API function to insert Yarn stock details and update YarnMaster table\r\nexport const addYarnStockDetails = async (data) => {\r\n    try {\r\n      console.log(\"Sending data to API:\", data);  // Debugging log\r\n  \r\n      const stockResponse = await axios.post(`${API_URL}/add-yarn-stock`, data, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n  \r\n      console.log(\"Received API response:\", stockResponse);  // Debugging log\r\n  \r\n      // Check if success status is true\r\n      if (stockResponse.data && stockResponse.data.success) {\r\n        const { YarnId, Weight } = data;\r\n        return {\r\n          success: true,\r\n          message: \"Yarn stock added successfully and yarn master updated.\",\r\n        };\r\n      } else {\r\n        throw new Error(\"Error adding yarn stock details\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"API call error:\", error);\r\n  \r\n      if (error.response) {\r\n        console.error(\"Response error:\", error.response.data);\r\n        throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\r\n      } else if (error.request) {\r\n        console.error(\"Request error:\", error.request);\r\n        throw new Error(\"No response received from the API\");\r\n      } else {\r\n        console.error(\"Error message:\", error.message);\r\n        throw new Error(`Error: ${error.message}`);\r\n      }\r\n    }\r\n  };\r\n  \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}