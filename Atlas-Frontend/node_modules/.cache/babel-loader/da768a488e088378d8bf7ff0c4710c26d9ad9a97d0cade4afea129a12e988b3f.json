{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const addYarnDetails = async data => {\n  try {\n    const response = await axios.post(`${API_URL}/add-yarn`, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('--------------------------------');\n    console.log(response.data);\n    return response.data; // Return response data to the caller\n  } catch (error) {\n    // Enhanced error handling with more specific details\n    console.error('API call error:', error);\n\n    // Check if the error has a response (e.g., 404, 500)\n    if (error.response) {\n      console.error('Response error:', error.response.data);\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\n    }\n    // Check if the error is due to network issues or no response\n    else if (error.request) {\n      console.error('Request error:', error.request);\n      throw new Error('No response received from the API');\n    }\n    // For other types of errors (e.g., misconfiguration)\n    else {\n      console.error('Error message:', error.message);\n      throw new Error(`Error: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","addYarnDetails","data","response","post","headers","console","log","error","Error","status","request","message"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/YarnApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const addYarnDetails = async (data) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/add-yarn`, data, {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n  \r\n      console.log('--------------------------------');\r\n      console.log(response.data);\r\n      return response.data; // Return response data to the caller\r\n    } catch (error) {\r\n      // Enhanced error handling with more specific details\r\n      console.error('API call error:', error);\r\n  \r\n      // Check if the error has a response (e.g., 404, 500)\r\n      if (error.response) {\r\n        console.error('Response error:', error.response.data);\r\n        throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\r\n      } \r\n      // Check if the error is due to network issues or no response\r\n      else if (error.request) {\r\n        console.error('Request error:', error.request);\r\n        throw new Error('No response received from the API');\r\n      } \r\n      // For other types of errors (e.g., misconfiguration)\r\n      else {\r\n        console.error('Error message:', error.message);\r\n        throw new Error(`Error: ${error.message}`);\r\n      }\r\n    }\r\n  };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,WAAW,EAAEE,IAAI,EAAE;MAC7DG,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/CD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACD,IAAI,CAAC;IAC1B,OAAOC,QAAQ,CAACD,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd;IACAF,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;;IAEvC;IACA,IAAIA,KAAK,CAACL,QAAQ,EAAE;MAClBG,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACL,QAAQ,CAACD,IAAI,CAAC;MACrD,MAAM,IAAIO,KAAK,CAAC,UAAUD,KAAK,CAACL,QAAQ,CAACO,MAAM,MAAMF,KAAK,CAACL,QAAQ,CAACD,IAAI,EAAE,CAAC;IAC7E;IACA;IAAA,KACK,IAAIM,KAAK,CAACG,OAAO,EAAE;MACtBL,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACG,OAAO,CAAC;MAC9C,MAAM,IAAIF,KAAK,CAAC,mCAAmC,CAAC;IACtD;IACA;IAAA,KACK;MACHH,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACI,OAAO,CAAC;MAC9C,MAAM,IAAIH,KAAK,CAAC,UAAUD,KAAK,CAACI,OAAO,EAAE,CAAC;IAC5C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}