{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnUsage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnUsage = () => {\n  _s();\n  const RSN = 69; // You can change this to dynamically set it if needed.\n\n  // State to hold matching names, color IDs, and color details\n  const [matchingNames, setMatchingNames] = useState([]);\n  const [usageByName, setUsageByName] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!RSN) return;\n      try {\n        // Step 1: Get matching names by RSN\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\n        console.log(\"Matching Names Response: \", matchingNamesResponse.data); // Debugging line\n        setMatchingNames(matchingNamesResponse.data);\n\n        // Step 2: For each matching name, get color IDs and fetch color details\n        const fetchColorDetails = async () => {\n          const usage = {}; // This will hold total usage grouped by color Name\n\n          for (const matchingName of matchingNamesResponse.data) {\n            var _colorIdsResponse$dat;\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\n            console.log(\"Color IDs Response: \", colorIdsResponse.data); // Debugging line\n\n            // Safeguard: Check if colorIdsResponse has data\n            if ((colorIdsResponse === null || colorIdsResponse === void 0 ? void 0 : (_colorIdsResponse$dat = colorIdsResponse.data) === null || _colorIdsResponse$dat === void 0 ? void 0 : _colorIdsResponse$dat.length) > 0) {\n              const colorDetailPromises = colorIdsResponse.data.map(async color => {\n                if (color !== null && color !== void 0 && color.ColorId) {\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\n                  console.log(`Color Detail for ColorId ${color.ColorId}: `, colorDetail[0]);\n                  return colorDetail[0];\n                }\n                return null;\n              });\n\n              // Wait for all color details to be fetched for the current matching name\n              const colorDetailsData = await Promise.all(colorDetailPromises);\n\n              // Process each color detail and sum yarn usage grouped by Name\n              colorDetailsData.forEach(colorDetail => {\n                if (colorDetail) {\n                  var _colorDetail$BaseColo;\n                  const colorName = ((_colorDetail$BaseColo = colorDetail.BaseColor) === null || _colorDetail$BaseColo === void 0 ? void 0 : _colorDetail$BaseColo.YarnId) || \"Unknown Color\"; // Get color name\n\n                  if (colorDetail.YarnUsage) {\n                    console.log(\"YarnUsage for ColorId:\", colorDetail.ColorId, colorDetail.YarnUsage); // Debugging line\n                    colorDetail.YarnUsage.forEach(yarn => {\n                      // Group by color Name instead of YarnId\n                      if (!usage[colorName]) {\n                        usage[colorName] = 0;\n                      }\n                      usage[colorName] += yarn.UsageAmount || 0; // Sum up yarn usage\n                    });\n                  }\n                }\n              });\n            }\n          }\n          setUsageByName(usage); // Store the total yarn usage grouped by Name\n          setLoading(false); // Set loading to false when data is fetched\n        };\n        fetchColorDetails(); // Call to fetch color details\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false); // Set loading to false in case of error\n      }\n    };\n    fetchData(); // Fetch data when the component mounts\n  }, [RSN]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Yarn Usage Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading yarn usage data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : Object.keys(usageByName).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Total Yarn Usage Grouped by Color Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(usageByName).map(([colorName, totalUsage]) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Color Name: \", colorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Usage: \", totalUsage, \" units\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, colorName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No yarn usage data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnUsage, \"icpOSq7iu7oqwGEzpEGMn3yezT8=\");\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","useState","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","jsxDEV","_jsxDEV","YarnUsage","_s","RSN","matchingNames","setMatchingNames","usageByName","setUsageByName","loading","setLoading","fetchData","matchingNamesResponse","console","log","data","fetchColorDetails","usage","matchingName","_colorIdsResponse$dat","colorIdsResponse","MatchingName","length","colorDetailPromises","map","color","ColorId","colorDetail","colorDetailsData","Promise","all","forEach","_colorDetail$BaseColo","colorName","BaseColor","YarnId","yarn","UsageAmount","error","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","entries","totalUsage","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\nconst YarnUsage = () => {\r\n  const RSN = 69; // You can change this to dynamically set it if needed.\r\n\r\n  // State to hold matching names, color IDs, and color details\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [usageByName, setUsageByName] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) return;\r\n\r\n      try {\r\n        // Step 1: Get matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        console.log(\"Matching Names Response: \", matchingNamesResponse.data); // Debugging line\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        // Step 2: For each matching name, get color IDs and fetch color details\r\n        const fetchColorDetails = async () => {\r\n          const usage = {}; // This will hold total usage grouped by color Name\r\n\r\n          for (const matchingName of matchingNamesResponse.data) {\r\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n            console.log(\"Color IDs Response: \", colorIdsResponse.data); // Debugging line\r\n\r\n            // Safeguard: Check if colorIdsResponse has data\r\n            if (colorIdsResponse?.data?.length > 0) {\r\n              const colorDetailPromises = colorIdsResponse.data.map(async (color) => {\r\n                if (color?.ColorId) {\r\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\r\n                  console.log(`Color Detail for ColorId ${color.ColorId}: `, colorDetail[0]);\r\n                  return colorDetail[0];\r\n                }\r\n                return null;\r\n              });\r\n\r\n              // Wait for all color details to be fetched for the current matching name\r\n              const colorDetailsData = await Promise.all(colorDetailPromises);\r\n\r\n              // Process each color detail and sum yarn usage grouped by Name\r\n              colorDetailsData.forEach((colorDetail) => {\r\n                if (colorDetail) {\r\n                  const colorName = colorDetail.BaseColor?.YarnId || \"Unknown Color\"; // Get color name\r\n\r\n                  if (colorDetail.YarnUsage) {\r\n                    console.log(\"YarnUsage for ColorId:\", colorDetail.ColorId, colorDetail.YarnUsage); // Debugging line\r\n                    colorDetail.YarnUsage.forEach((yarn) => {\r\n                      // Group by color Name instead of YarnId\r\n                      if (!usage[colorName]) {\r\n                        usage[colorName] = 0;\r\n                      }\r\n                      usage[colorName] += yarn.UsageAmount || 0; // Sum up yarn usage\r\n                    });\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          }\r\n\r\n          setUsageByName(usage); // Store the total yarn usage grouped by Name\r\n          setLoading(false); // Set loading to false when data is fetched\r\n        };\r\n\r\n        fetchColorDetails(); // Call to fetch color details\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false); // Set loading to false in case of error\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, [RSN]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details</h1>\r\n      {loading ? (\r\n        <p>Loading yarn usage data...</p>\r\n      ) : Object.keys(usageByName).length > 0 ? (\r\n        <div>\r\n          <h2>Total Yarn Usage Grouped by Color Name</h2>\r\n          <ul>\r\n            {Object.entries(usageByName).map(([colorName, totalUsage]) => (\r\n              <li key={colorName}>\r\n                <h3>Color Name: {colorName}</h3>\r\n                <p>Total Usage: {totalUsage} units</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>No yarn usage data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}