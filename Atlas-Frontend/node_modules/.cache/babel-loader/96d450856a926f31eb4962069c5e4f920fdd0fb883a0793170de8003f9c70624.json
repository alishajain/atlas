{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{useNavigate,useLocation}from\"react-router-dom\";import{getColorIds,getMatchingNameByRSN}from\"../API/ColorApi\";import{getColorDetailByColorId}from\"../API/ColorDetailApi\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const YarnUsage=()=>{const navigate=useNavigate();const location=useLocation();//const RSN = location.state ? location.state.RSN : null;\nconst RSN=69;// State to hold matching names, color IDs, and color details\nconst[matchingNames,setMatchingNames]=useState([]);const[colorDetails,setColorDetails]=useState({});useEffect(()=>{const fetchData=async()=>{if(!RSN)return;try{// Step 1: Get matching names by RSN\nconst matchingNamesResponse=await getMatchingNameByRSN(RSN);setMatchingNames(matchingNamesResponse.data);// Step 2: For each matching name, get color IDs\nconst fetchColorDetails=async()=>{const details={};for(const matchingName of matchingNamesResponse.data){const colorIdsResponse=await getColorIds(RSN,matchingName.MatchingName);// Step 3: For each color ID, get color details\nconst colorDetailPromises=colorIdsResponse.data.map(async color=>{const colorDetail=await getColorDetailByColorId(color.ColorId);return colorDetail.data;});// Wait for all color details to be fetched for the current matching name\nconst colorDetailsData=await Promise.all(colorDetailPromises);details[matchingName.MatchingName]=colorDetailsData;}setColorDetails(details);// Store the grouped color details\n};fetchColorDetails();// Call to fetch color details\n}catch(error){console.error(\"Error fetching data:\",error);}};fetchData();// Fetch data when the component mounts\n},[RSN]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Yarn Usage Details\"}),Object.keys(colorDetails).length>0?Object.entries(colorDetails).map(_ref=>{let[matchingName,colors]=_ref;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:matchingName}),/*#__PURE__*/_jsx(\"ul\",{children:colors.map((colorDetail,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Color ID: \",colorDetail.ColorId]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Color Name: \",colorDetail.ColorName]})]},index))})]},matchingName);}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading yarn usage data...\"})]});};export default YarnUsage;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","jsx","_jsx","jsxs","_jsxs","YarnUsage","navigate","location","RSN","matchingNames","setMatchingNames","colorDetails","setColorDetails","fetchData","matchingNamesResponse","data","fetchColorDetails","details","matchingName","colorIdsResponse","MatchingName","colorDetailPromises","map","color","colorDetail","ColorId","colorDetailsData","Promise","all","error","console","children","Object","keys","length","entries","_ref","colors","index","ColorName"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\n\r\nconst YarnUsage = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  //const RSN = location.state ? location.state.RSN : null;\r\n\r\n  const RSN = 69;\r\n  // State to hold matching names, color IDs, and color details\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [colorDetails, setColorDetails] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) return;\r\n\r\n      try {\r\n        // Step 1: Get matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        // Step 2: For each matching name, get color IDs\r\n        const fetchColorDetails = async () => {\r\n          const details = {};\r\n\r\n          for (const matchingName of matchingNamesResponse.data) {\r\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n\r\n            // Step 3: For each color ID, get color details\r\n            const colorDetailPromises = colorIdsResponse.data.map(async (color) => {\r\n              const colorDetail = await getColorDetailByColorId(color.ColorId);\r\n              return colorDetail.data;\r\n            });\r\n\r\n            // Wait for all color details to be fetched for the current matching name\r\n            const colorDetailsData = await Promise.all(colorDetailPromises);\r\n            details[matchingName.MatchingName] = colorDetailsData;\r\n          }\r\n\r\n          setColorDetails(details); // Store the grouped color details\r\n        };\r\n\r\n        fetchColorDetails(); // Call to fetch color details\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, [RSN]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details</h1>\r\n      {/* Display the color details grouped by matching name */}\r\n      {Object.keys(colorDetails).length > 0 ? (\r\n        Object.entries(colorDetails).map(([matchingName, colors]) => (\r\n          <div key={matchingName}>\r\n            <h2>{matchingName}</h2>\r\n            <ul>\r\n              {colors.map((colorDetail, index) => (\r\n                <li key={index}>\r\n                  <h3>Color ID: {colorDetail.ColorId}</h3>\r\n                  {/* Display other color details here as needed */}\r\n                  <p>Color Name: {colorDetail.ColorName}</p>\r\n                  {/* Add any other details you want to display */}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Loading yarn usage data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CAC3D,OAASC,WAAW,CAAEC,oBAAoB,KAAQ,iBAAiB,CACnE,OAASC,uBAAuB,KAAQ,uBAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhE,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAAAC,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAW,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B;AAEA,KAAM,CAAAW,GAAG,CAAG,EAAE,CACd;AACA,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACgB,YAAY,CAAEC,eAAe,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpDD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CAACL,GAAG,CAAE,OAEV,GAAI,CACF;AACA,KAAM,CAAAM,qBAAqB,CAAG,KAAM,CAAAf,oBAAoB,CAACS,GAAG,CAAC,CAC7DE,gBAAgB,CAACI,qBAAqB,CAACC,IAAI,CAAC,CAE5C;AACA,KAAM,CAAAC,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,KAAM,CAAAC,OAAO,CAAG,CAAC,CAAC,CAElB,IAAK,KAAM,CAAAC,YAAY,GAAI,CAAAJ,qBAAqB,CAACC,IAAI,CAAE,CACrD,KAAM,CAAAI,gBAAgB,CAAG,KAAM,CAAArB,WAAW,CAACU,GAAG,CAAEU,YAAY,CAACE,YAAY,CAAC,CAE1E;AACA,KAAM,CAAAC,mBAAmB,CAAGF,gBAAgB,CAACJ,IAAI,CAACO,GAAG,CAAC,KAAO,CAAAC,KAAK,EAAK,CACrE,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAxB,uBAAuB,CAACuB,KAAK,CAACE,OAAO,CAAC,CAChE,MAAO,CAAAD,WAAW,CAACT,IAAI,CACzB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAW,gBAAgB,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACP,mBAAmB,CAAC,CAC/DJ,OAAO,CAACC,YAAY,CAACE,YAAY,CAAC,CAAGM,gBAAgB,CACvD,CAEAd,eAAe,CAACK,OAAO,CAAC,CAAE;AAC5B,CAAC,CAEDD,iBAAiB,CAAC,CAAC,CAAE;AACvB,CAAE,MAAOa,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAEDhB,SAAS,CAAC,CAAC,CAAE;AACf,CAAC,CAAE,CAACL,GAAG,CAAC,CAAC,CAET,mBACEJ,KAAA,QAAA2B,QAAA,eACE7B,IAAA,OAAA6B,QAAA,CAAI,oBAAkB,CAAI,CAAC,CAE1BC,MAAM,CAACC,IAAI,CAACtB,YAAY,CAAC,CAACuB,MAAM,CAAG,CAAC,CACnCF,MAAM,CAACG,OAAO,CAACxB,YAAY,CAAC,CAACW,GAAG,CAACc,IAAA,MAAC,CAAClB,YAAY,CAAEmB,MAAM,CAAC,CAAAD,IAAA,oBACtDhC,KAAA,QAAA2B,QAAA,eACE7B,IAAA,OAAA6B,QAAA,CAAKb,YAAY,CAAK,CAAC,cACvBhB,IAAA,OAAA6B,QAAA,CACGM,MAAM,CAACf,GAAG,CAAC,CAACE,WAAW,CAAEc,KAAK,gBAC7BlC,KAAA,OAAA2B,QAAA,eACE3B,KAAA,OAAA2B,QAAA,EAAI,YAAU,CAACP,WAAW,CAACC,OAAO,EAAK,CAAC,cAExCrB,KAAA,MAAA2B,QAAA,EAAG,cAAY,CAACP,WAAW,CAACe,SAAS,EAAI,CAAC,GAHnCD,KAKL,CACL,CAAC,CACA,CAAC,GAXGpB,YAYL,CAAC,EACP,CAAC,cAEFhB,IAAA,MAAA6B,QAAA,CAAG,4BAA0B,CAAG,CACjC,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAA1B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}