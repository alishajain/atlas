{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Function to fetch employee details\nexport const employeeDetails = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/EmployeeDetails`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error Fetching Employee Details\", error);\n    throw new Error(\"Error Fetching Employee Details\");\n  }\n};\n\n// Function to add a new employee\nexport const addEmployee = async employeeData => {\n  try {\n    const response = await axios.post(`${API_URL}/add-employee`, employeeData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error adding employee:\", error);\n    throw new Error(\"Failed to add employee. Please try again later.\");\n  }\n};\n\n// Function to search for employees\nexport const searchEmployee = async (empId, empName) => {\n  try {\n    const response = await axios.get(`${API_URL}/search-employee`, {\n      params: {\n        empId: empId || undefined,\n        // Send undefined if the field is empty\n        empName: empName || undefined // Send undefined if the field is empty\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching employee details:\", error);\n    throw new Error(\"Error fetching employee details\");\n  }\n};\n\n// Function to delete an employee\nexport const deleteEmployee = async empId => {\n  try {\n    const response = await axios.delete(`${API_URL}/delete-employee/${empId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error deleting employee:\", error);\n    throw new Error(\"Error deleting employee\");\n  }\n};\nexport const updateEmployee = async updatedEmployee => {\n  try {\n    // Make a PUT request to update the employee, passing EmpId in the URL\n    const response = await axios.put(`${API_URL}/update-employee/${updatedEmployee.EmpId}`, updatedEmployee, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log('Alisha');\n\n    // Log the full response to check the structure\n    console.log('Response:', response);\n    console.log('Alisha');\n    // Check if the response contains the success field and its value\n    if (response.data && response.data.success) {\n      return response.data; // Return the updated employee data on success\n    } else {\n      throw new Error('Failed to update employee. No success field in response.');\n    }\n  } catch (error) {\n    // Log the error details for debugging\n    console.error('Error updating employee:', error);\n\n    // If Axios response is available\n    if (error.response) {\n      console.error('Error response:', error.response); // Full error response from the server\n      throw new Error(`Error updating employee: ${error.response.data.message || error.message}`);\n    } else if (error.request) {\n      // If no response was received\n      console.error('No response received:', error.request);\n      throw new Error('No response received from the server.');\n    } else {\n      // General error handling\n      console.error('Error:', error.message);\n      throw new Error(`Error updating employee: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","employeeDetails","response","get","data","error","console","Error","addEmployee","employeeData","post","searchEmployee","empId","empName","params","undefined","deleteEmployee","delete","updateEmployee","updatedEmployee","put","EmpId","headers","log","success","message","request"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/EmployeeApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Function to fetch employee details\r\nexport const employeeDetails = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/EmployeeDetails`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error Fetching Employee Details\", error);\r\n    throw new Error(\"Error Fetching Employee Details\");\r\n  }\r\n};\r\n\r\n// Function to add a new employee\r\nexport const addEmployee = async (employeeData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-employee`, employeeData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error adding employee:\", error);\r\n    throw new Error(\"Failed to add employee. Please try again later.\");\r\n  }\r\n};\r\n\r\n// Function to search for employees\r\nexport const searchEmployee = async (empId, empName) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search-employee`, {\r\n      params: {\r\n        empId: empId || undefined, // Send undefined if the field is empty\r\n        empName: empName || undefined, // Send undefined if the field is empty\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching employee details:\", error);\r\n    throw new Error(\"Error fetching employee details\");\r\n  }\r\n};\r\n\r\n// Function to delete an employee\r\nexport const deleteEmployee = async (empId) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/delete-employee/${empId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting employee:\", error);\r\n    throw new Error(\"Error deleting employee\");\r\n  }\r\n};\r\n\r\nexport const updateEmployee = async (updatedEmployee) => {\r\n  try {\r\n    // Make a PUT request to update the employee, passing EmpId in the URL\r\n    const response = await axios.put(\r\n      `${API_URL}/update-employee/${updatedEmployee.EmpId}`,\r\n      updatedEmployee,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    console.log('Alisha');\r\n\r\n    // Log the full response to check the structure\r\n    console.log('Response:', response);\r\nconsole.log('Alisha');\r\n    // Check if the response contains the success field and its value\r\n    if (response.data && response.data.success) {\r\n      return response.data; // Return the updated employee data on success\r\n    } else {\r\n      throw new Error('Failed to update employee. No success field in response.');\r\n    }\r\n  } catch (error) {\r\n    // Log the error details for debugging\r\n    console.error('Error updating employee:', error);\r\n    \r\n    // If Axios response is available\r\n    if (error.response) {\r\n      console.error('Error response:', error.response); // Full error response from the server\r\n      throw new Error(`Error updating employee: ${error.response.data.message || error.message}`);\r\n    } else if (error.request) {\r\n      // If no response was received\r\n      console.error('No response received:', error.request);\r\n      throw new Error('No response received from the server.');\r\n    } else {\r\n      // General error handling\r\n      console.error('Error:', error.message);\r\n      throw new Error(`Error updating employee: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}