{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Add Yarn Details - Insert new Yarn into yarn_master\nexport const addYarnDetails = async data => {\n  console.log(data);\n  try {\n    const response = await axios.post(`${API_URL}/add-yarn`, data, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data; // Return response data to the caller\n  } catch (error) {\n    // Enhanced error handling with more specific details\n    console.error(\"API call error:\", error);\n\n    // Check if the error has a response (e.g., 404, 500)\n    if (error.response) {\n      console.error(\"Response error:\", error.response.data);\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\n    }\n    // Check if the error is due to network issues or no response\n    else if (error.request) {\n      console.error(\"Request error:\", error.request);\n      throw new Error(\"No response received from the API\");\n    }\n    // For other types of errors (e.g., misconfiguration)\n    else {\n      console.error(\"Error message:\", error.message);\n      throw new Error(`Error: ${error.message}`);\n    }\n  }\n};\n\n// Fetch Yarn IDs for the dropdown\nexport const getYarnIds = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/yarnId`);\n    return response.data; // Return the Yarn IDs\n  } catch (error) {\n    console.error(\"Error fetching YarnIds:\", error);\n    throw new Error(\"Error fetching YarnIds\");\n  }\n};\n\n// API function to insert Yarn stock details and update YarnMaster table\nexport const addYarnStockDetails = async data => {\n  try {\n    // Step 1: Insert Yarn stock details into yarn_inventory\n    const stockResponse = await axios.post(`${API_URL}/add-yarn-stock`, data, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // Step 2: If insertion is successful, update yarn_master table by adding weight\n    if (stockResponse.success) {\n      const {\n        YarnId,\n        Weight\n      } = data;\n      // Here, instead of sending a separate request to update the weight, we rely on the backend \n      // to handle the weight update within the same API endpoint (already updated in backend).\n\n      return {\n        success: true,\n        message: \"Yarn stock added successfully and yarn master updated.\"\n      };\n    } else {\n      throw new Error(\"Error adding yarn stock details\");\n    }\n  } catch (error) {\n    // Enhanced error handling with more specific details\n    console.error(\"API call error:\", error);\n\n    // Check if the error has a response (e.g., 404, 500)\n    if (error.response) {\n      console.error(\"Response error:\", error.response.data);\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\n    }\n    // Check if the error is due to network issues or no response\n    else if (error.request) {\n      console.error(\"Request error:\", error.request);\n      throw new Error(\"No response received from the API\");\n    }\n    // For other types of errors (e.g., misconfiguration)\n    else {\n      console.error(\"Error message:\", error.message);\n      throw new Error(`Error: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","addYarnDetails","data","console","log","response","post","headers","error","Error","status","request","message","getYarnIds","get","addYarnStockDetails","stockResponse","success","YarnId","Weight"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/YarnApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Add Yarn Details - Insert new Yarn into yarn_master\r\nexport const addYarnDetails = async (data) => {\r\n  console.log(data);\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-yarn`, data, {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    return response.data; // Return response data to the caller\r\n  } catch (error) {\r\n    // Enhanced error handling with more specific details\r\n    console.error(\"API call error:\", error);\r\n\r\n    // Check if the error has a response (e.g., 404, 500)\r\n    if (error.response) {\r\n      console.error(\"Response error:\", error.response.data);\r\n      throw new Error(\r\n        `Error: ${error.response.status} - ${error.response.data}`\r\n      );\r\n    }\r\n    // Check if the error is due to network issues or no response\r\n    else if (error.request) {\r\n      console.error(\"Request error:\", error.request);\r\n      throw new Error(\"No response received from the API\");\r\n    }\r\n    // For other types of errors (e.g., misconfiguration)\r\n    else {\r\n      console.error(\"Error message:\", error.message);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// Fetch Yarn IDs for the dropdown\r\nexport const getYarnIds = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/yarnId`);\r\n    return response.data; // Return the Yarn IDs\r\n  } catch (error) {\r\n    console.error(\"Error fetching YarnIds:\", error);\r\n    throw new Error(\"Error fetching YarnIds\");\r\n  }\r\n};\r\n\r\n// API function to insert Yarn stock details and update YarnMaster table\r\nexport const addYarnStockDetails = async (data) => {\r\n  try {\r\n    // Step 1: Insert Yarn stock details into yarn_inventory\r\n    const stockResponse = await axios.post(`${API_URL}/add-yarn-stock`, data, {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    // Step 2: If insertion is successful, update yarn_master table by adding weight\r\n    if (stockResponse.success) {\r\n      const { YarnId, Weight } = data;\r\n      // Here, instead of sending a separate request to update the weight, we rely on the backend \r\n      // to handle the weight update within the same API endpoint (already updated in backend).\r\n\r\n      return {\r\n        success: true,\r\n        message: \"Yarn stock added successfully and yarn master updated.\",\r\n      };\r\n    } else {\r\n      throw new Error(\"Error adding yarn stock details\");\r\n    }\r\n  } catch (error) {\r\n    // Enhanced error handling with more specific details\r\n    console.error(\"API call error:\", error);\r\n\r\n    // Check if the error has a response (e.g., 404, 500)\r\n    if (error.response) {\r\n      console.error(\"Response error:\", error.response.data);\r\n      throw new Error(\r\n        `Error: ${error.response.status} - ${error.response.data}`\r\n      );\r\n    }\r\n    // Check if the error is due to network issues or no response\r\n    else if (error.request) {\r\n      console.error(\"Request error:\", error.request);\r\n      throw new Error(\"No response received from the API\");\r\n    }\r\n    // For other types of errors (e.g., misconfiguration)\r\n    else {\r\n      console.error(\"Error message:\", error.message);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}