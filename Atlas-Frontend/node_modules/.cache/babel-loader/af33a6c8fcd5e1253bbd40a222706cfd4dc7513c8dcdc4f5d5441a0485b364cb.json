{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n//Adds Sample details\nexport const addSampleDetails = async data => {\n  try {\n    const response = await axios.post(`${API_URL}/add-sample`, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data; // Return response data to the caller\n  } catch (error) {\n    // Enhanced error handling with more specific details\n    console.error('API call error:', error);\n\n    // Check if the error has a response (e.g., 404, 500)\n    if (error.response) {\n      console.error('Response error:', error.response.data);\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\n    }\n    // Check if the error is due to network issues or no response\n    else if (error.request) {\n      console.error('Request error:', error.request);\n      throw new Error('No response received from the API');\n    }\n    // For other types of errors (e.g., misconfiguration)\n    else {\n      console.error('Error message:', error.message);\n      throw new Error(`Error: ${error.message}`);\n    }\n  }\n};\n\n//Adds Knitting Details\nexport const addKnittingDetails = async data => {\n  try {\n    const response = await axios.post(`${API_URL}/add-knitting`, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Check for a successful response (e.g., status 200)\n    if (response.status === 200) {\n      return response.data; // Return response data to the caller\n    } else {\n      throw new Error('Unexpected response status: ' + response.status);\n    }\n  } catch (error) {\n    // Enhanced error handling with more specific details\n    console.error('API call error:', error);\n\n    // Check if the error has a response (e.g., 404, 500)\n    if (error.response) {\n      console.error('Response error:', error.response.data);\n      return {\n        success: false,\n        message: `Error: ${error.response.status} - ${error.response.data}`\n      };\n    }\n    // Check if the error is due to network issues or no response\n    else if (error.request) {\n      console.error('Request error:', error.request);\n      return {\n        success: false,\n        message: 'No response received from the API'\n      };\n    }\n    // For other types of errors (e.g., misconfiguration)\n    else {\n      console.error('Error message:', error.message);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n};\n\n//Updates Sample details\nexport const updateRecord = async data => {\n  try {\n    const response = await fetch('http://localhost:5000/api/update-sample', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result.message || 'Error updating record');\n    }\n    return result;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(error.message || 'There was an error with the API request');\n  }\n};\nexport const getKnittingDetailsByRSN = async RSN => {\n  try {\n    const response = await axios.get(`${API_URL}/knitting-details/${RSN}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching knitting details:\", error);\n    throw error;\n  }\n};\n\n// Function to update knitting details by RSN\nexport const updateKnittingDetails = async (RSN, knittingData) => {\n  const response = await fetch(`${API_URL}/knitting-details/${RSN}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(knittingData)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update knitting details\");\n  }\n  return await response.json();\n};","map":{"version":3,"names":["axios","API_URL","addSampleDetails","data","response","post","headers","error","console","Error","status","request","message","addKnittingDetails","success","updateRecord","fetch","method","body","JSON","stringify","result","json","ok","getKnittingDetailsByRSN","RSN","get","updateKnittingDetails","knittingData"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n//Adds Sample details\r\nexport const addSampleDetails = async (data) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-sample`, data, {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n    return response.data; // Return response data to the caller\r\n  } catch (error) {\r\n    // Enhanced error handling with more specific details\r\n    console.error('API call error:', error);\r\n\r\n    // Check if the error has a response (e.g., 404, 500)\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\r\n    } \r\n    // Check if the error is due to network issues or no response\r\n    else if (error.request) {\r\n      console.error('Request error:', error.request);\r\n      throw new Error('No response received from the API');\r\n    } \r\n    // For other types of errors (e.g., misconfiguration)\r\n    else {\r\n      console.error('Error message:', error.message);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n//Adds Knitting Details\r\nexport const addKnittingDetails = async (data) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-knitting`, data, {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n    // Check for a successful response (e.g., status 200)\r\n    if (response.status === 200) {\r\n      return response.data; // Return response data to the caller\r\n    } else {\r\n      throw new Error('Unexpected response status: ' + response.status);\r\n    }\r\n  } catch (error) {\r\n    // Enhanced error handling with more specific details\r\n    console.error('API call error:', error);\r\n\r\n    // Check if the error has a response (e.g., 404, 500)\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      return { success: false, message: `Error: ${error.response.status} - ${error.response.data}` };\r\n    } \r\n    // Check if the error is due to network issues or no response\r\n    else if (error.request) {\r\n      console.error('Request error:', error.request);\r\n      return { success: false, message: 'No response received from the API' };\r\n    } \r\n    // For other types of errors (e.g., misconfiguration)\r\n    else {\r\n      console.error('Error message:', error.message);\r\n      return { success: false, message: error.message };\r\n    }\r\n  }\r\n};\r\n\r\n//Updates Sample details\r\nexport const updateRecord = async (data) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/update-sample', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    const result = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(result.message || 'Error updating record');\r\n    }\r\n\r\n    return result;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw new Error(error.message || 'There was an error with the API request');\r\n  }\r\n};\r\n\r\nexport const getKnittingDetailsByRSN = async (RSN) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/knitting-details/${RSN}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching knitting details:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to update knitting details by RSN\r\nexport const updateKnittingDetails = async (RSN, knittingData) => {\r\n  const response = await fetch(`${API_URL}/knitting-details/${RSN}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(knittingData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to update knitting details\");\r\n  }\r\n  return await response.json();\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}