{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Function to register a new user\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/signup`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error registering user:\", error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : error.message;\n  }\n};\n\n// Function to check if an EmpID already exists\nexport const checkIfEmpIDExists = async empID => {\n  try {\n    const response = await axios.get(`${API_URL}/users`);\n    const users = response.data;\n\n    // Check if any user has the same EmpID\n    const userExists = users.some(user => user.EmpID === empID);\n    return userExists;\n  } catch (error) {\n    console.error(\"Error checking EmpID:\", error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : error.message;\n  }\n};\n\n// Function to login a user\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, credentials);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error logging in user:\", error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : error.message;\n  }\n};\n\n// Function to get all users (admin functionality)\nexport const getAllUsers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/users`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users:\", error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : error.message;\n  }\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","console","message","checkIfEmpIDExists","empID","get","users","userExists","some","user","EmpID","loginUser","credentials","getAllUsers"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/UserApi.js"],"sourcesContent":["import axios from 'axios';\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Function to register a new user\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/signup`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error registering user:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n\r\n// Function to check if an EmpID already exists\r\nexport const checkIfEmpIDExists = async (empID) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users`);\r\n    const users = response.data;\r\n\r\n    // Check if any user has the same EmpID\r\n    const userExists = users.some(user => user.EmpID === empID);\r\n    return userExists;\r\n  } catch (error) {\r\n    console.error(\"Error checking EmpID:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n\r\n// Function to login a user\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, credentials);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error logging in user:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n\r\n// Function to get all users (admin functionality)\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching users:\", error.response ? error.response.data : error.message);\r\n    throw error.response ? error.response.data : error.message;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,SAAS,EAAEE,QAAQ,CAAC;IAChE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC;IAC9F,MAAMF,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EACjD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,QAAQ,CAAC;IACpD,MAAMY,KAAK,GAAGT,QAAQ,CAACE,IAAI;;IAE3B;IACA,MAAMQ,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,KAAKN,KAAK,CAAC;IAC3D,OAAOG,UAAU;EACnB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC;IAC5F,MAAMF,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,QAAQ,EAAEkB,WAAW,CAAC;IAClE,OAAOf,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC;IAC7F,MAAMF,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMJ,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,QAAQ,CAAC;IACpD,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC;IAC5F,MAAMF,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO;EAC5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}