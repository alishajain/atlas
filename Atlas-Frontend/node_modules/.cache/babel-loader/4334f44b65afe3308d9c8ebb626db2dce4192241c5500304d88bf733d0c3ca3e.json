{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\AddOrderDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getYarnUsageByArticleNo } from \"../API/YarnUsageApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddOrderDetails = ({\n  ArticleNo\n}) => {\n  _s();\n  var _yarnUsageData$;\n  const [yarnUsageData, setYarnUsageData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [quantities, setQuantities] = useState({});\n  const [updatedYarnUsageData, setUpdatedYarnUsageData] = useState([]); // To store the updated yarn data\n\n  useEffect(() => {\n    const fetchYarnUsage = async () => {\n      try {\n        const response = await getYarnUsageByArticleNo(ArticleNo);\n        if (response.success && response.data && response.data.length > 0) {\n          setYarnUsageData(response.data);\n        } else {\n          setError(\"No data found for this ArticleNo.\");\n        }\n      } catch (err) {\n        setError(\"Failed to fetch yarn usage data.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchYarnUsage();\n  }, [ArticleNo]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  // List of all possible sizes (to ensure we check across all data)\n  const sizes = [\"Freesize\", \"XS\", \"S\", \"M\", \"L\", \"XL\", \"2XL\", \"3XL\", \"4XL\", \"5XL\"];\n\n  // Function to get the sizes that have non-null values across all MatchingNames\n  const getAllNonNullSizes = data => {\n    const nonNullSizes = sizes.filter(size => data.some(row => row[size] !== null));\n    return nonNullSizes;\n  };\n\n  // Get all non-null sizes across all yarn usage data\n  const nonNullSizes = getAllNonNullSizes(yarnUsageData);\n\n  // Function to handle quantity input changes\n  const handleQuantityChange = (matchingName, size, value) => {\n    setQuantities(prevQuantities => ({\n      ...prevQuantities,\n      [matchingName]: {\n        ...prevQuantities[matchingName],\n        [size]: value\n      }\n    }));\n  };\n\n  // Function to get non-null yarns (YarnId and Weight)\n  const getNonNullYarns = data => {\n    const yarns = [];\n    for (let i = 1; i <= 15; i++) {\n      const yarnKey = `Yarn${i}`;\n      if (data[yarnKey] && data[yarnKey].YarnId) {\n        yarns.push({\n          YarnId: data[yarnKey].YarnId,\n          Weight: data[yarnKey].Weight\n        });\n      }\n    }\n    return yarns;\n  };\n\n  // Function to calculate the updated weight based on the quantity change\n  const calculateUpdatedWeight = (originalWeight, size, matchingName) => {\n    var _quantities$matchingN;\n    // Fetch the quantity for the given matchingName and size\n    const quantity = (_quantities$matchingN = quantities[matchingName]) === null || _quantities$matchingN === void 0 ? void 0 : _quantities$matchingN[size];\n\n    // Find the percentage change for the given size\n    const row = yarnUsageData.find(row => row.MatchingName === matchingName);\n    const percentage = row ? row[size] : 0;\n\n    // If quantity exists, adjust the weight\n    if (quantity && percentage !== null) {\n      return originalWeight * (1 + percentage / 100) * quantity;\n    }\n    return originalWeight; // No change if no quantity or percentage\n  };\n\n  // Handle the submit button click to perform the calculation and update table 2\n  const handleSubmit = () => {\n    const updatedData = yarnUsageData.map(data => {\n      const yarns = getNonNullYarns(data);\n      const updatedYarns = yarns.map(yarn => {\n        return {\n          ...yarn,\n          Weight: calculateUpdatedWeight(yarn.Weight, \"S\", data.MatchingName) // Adjust for 'S' or dynamic size\n        };\n      });\n      return {\n        ...data,\n        yarns: updatedYarns\n      };\n    });\n    setUpdatedYarnUsageData(updatedData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Order Quantity Details for Article No: \", ArticleNo, \" with RSN:\", \" \", (_yarnUsageData$ = yarnUsageData[0]) === null || _yarnUsageData$ === void 0 ? void 0 : _yarnUsageData$.RSN]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), yarnUsageData.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"10\",\n      style: {\n        width: \"100%\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Matching Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), nonNullSizes.map(size => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: size\n          }, size, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: yarnUsageData.map((data, dataIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.MatchingName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this), nonNullSizes.map(size => {\n            var _quantities$data$Matc;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: ((_quantities$data$Matc = quantities[data.MatchingName]) === null || _quantities$data$Matc === void 0 ? void 0 : _quantities$data$Matc[size]) || \"\",\n                onChange: e => handleQuantityChange(data.MatchingName, size, e.target.value),\n                min: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this)\n            }, size, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this);\n          })]\n        }, dataIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No yarn usage data found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), updatedYarnUsageData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Updated Yarn Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        cellPadding: \"10\",\n        style: {\n          width: \"100%\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Matching Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Yarn ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), nonNullSizes.map(size => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: size\n            }, size, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: updatedYarnUsageData.map((data, dataIndex) => {\n            return data.yarns.map((yarn, yarnIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [yarnIndex === 0 && /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: data.yarns.length,\n                children: data.MatchingName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: yarn.YarnId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: yarn.Weight.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 21\n              }, this), nonNullSizes.map(size => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: data[size] !== null ? `${data[size]}%` : \"-\"\n              }, `${size}-${yarnIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 23\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 21\n              }, this)]\n            }, `${dataIndex}-${yarnIndex}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this));\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(AddOrderDetails, \"32oDzTSYUyMpyV868t+Rp2UejhE=\");\n_c = AddOrderDetails;\nexport default AddOrderDetails;\nvar _c;\n$RefreshReg$(_c, \"AddOrderDetails\");","map":{"version":3,"names":["React","useState","useEffect","getYarnUsageByArticleNo","jsxDEV","_jsxDEV","AddOrderDetails","ArticleNo","_s","_yarnUsageData$","yarnUsageData","setYarnUsageData","error","setError","loading","setLoading","quantities","setQuantities","updatedYarnUsageData","setUpdatedYarnUsageData","fetchYarnUsage","response","success","data","length","err","children","fileName","_jsxFileName","lineNumber","columnNumber","sizes","getAllNonNullSizes","nonNullSizes","filter","size","some","row","handleQuantityChange","matchingName","value","prevQuantities","getNonNullYarns","yarns","i","yarnKey","YarnId","push","Weight","calculateUpdatedWeight","originalWeight","_quantities$matchingN","quantity","find","MatchingName","percentage","handleSubmit","updatedData","map","updatedYarns","yarn","RSN","border","cellPadding","style","width","marginTop","dataIndex","_quantities$data$Matc","type","onChange","e","target","min","onClick","yarnIndex","rowSpan","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddOrderDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getYarnUsageByArticleNo } from \"../API/YarnUsageApi\";\r\n\r\nconst AddOrderDetails = ({ ArticleNo }) => {\r\n  const [yarnUsageData, setYarnUsageData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [quantities, setQuantities] = useState({});\r\n  const [updatedYarnUsageData, setUpdatedYarnUsageData] = useState([]); // To store the updated yarn data\r\n\r\n  useEffect(() => {\r\n    const fetchYarnUsage = async () => {\r\n      try {\r\n        const response = await getYarnUsageByArticleNo(ArticleNo);\r\n        if (response.success && response.data && response.data.length > 0) {\r\n          setYarnUsageData(response.data);\r\n        } else {\r\n          setError(\"No data found for this ArticleNo.\");\r\n        }\r\n      } catch (err) {\r\n        setError(\"Failed to fetch yarn usage data.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchYarnUsage();\r\n  }, [ArticleNo]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  // List of all possible sizes (to ensure we check across all data)\r\n  const sizes = [\r\n    \"Freesize\",\r\n    \"XS\",\r\n    \"S\",\r\n    \"M\",\r\n    \"L\",\r\n    \"XL\",\r\n    \"2XL\",\r\n    \"3XL\",\r\n    \"4XL\",\r\n    \"5XL\",\r\n  ];\r\n\r\n  // Function to get the sizes that have non-null values across all MatchingNames\r\n  const getAllNonNullSizes = (data) => {\r\n    const nonNullSizes = sizes.filter((size) =>\r\n      data.some((row) => row[size] !== null)\r\n    );\r\n    return nonNullSizes;\r\n  };\r\n\r\n  // Get all non-null sizes across all yarn usage data\r\n  const nonNullSizes = getAllNonNullSizes(yarnUsageData);\r\n\r\n  // Function to handle quantity input changes\r\n  const handleQuantityChange = (matchingName, size, value) => {\r\n    setQuantities((prevQuantities) => ({\r\n      ...prevQuantities,\r\n      [matchingName]: {\r\n        ...prevQuantities[matchingName],\r\n        [size]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Function to get non-null yarns (YarnId and Weight)\r\n  const getNonNullYarns = (data) => {\r\n    const yarns = [];\r\n    for (let i = 1; i <= 15; i++) {\r\n      const yarnKey = `Yarn${i}`;\r\n      if (data[yarnKey] && data[yarnKey].YarnId) {\r\n        yarns.push({\r\n          YarnId: data[yarnKey].YarnId,\r\n          Weight: data[yarnKey].Weight,\r\n        });\r\n      }\r\n    }\r\n    return yarns;\r\n  };\r\n\r\n  // Function to calculate the updated weight based on the quantity change\r\n  const calculateUpdatedWeight = (originalWeight, size, matchingName) => {\r\n    // Fetch the quantity for the given matchingName and size\r\n    const quantity = quantities[matchingName]?.[size];\r\n\r\n    // Find the percentage change for the given size\r\n    const row = yarnUsageData.find((row) => row.MatchingName === matchingName);\r\n    const percentage = row ? row[size] : 0;\r\n\r\n    // If quantity exists, adjust the weight\r\n    if (quantity && percentage !== null) {\r\n      return originalWeight * (1 + percentage / 100) * quantity;\r\n    }\r\n    return originalWeight; // No change if no quantity or percentage\r\n  };\r\n\r\n  // Handle the submit button click to perform the calculation and update table 2\r\n  const handleSubmit = () => {\r\n    const updatedData = yarnUsageData.map((data) => {\r\n      const yarns = getNonNullYarns(data);\r\n      const updatedYarns = yarns.map((yarn) => {\r\n        return {\r\n          ...yarn,\r\n          Weight: calculateUpdatedWeight(yarn.Weight, \"S\", data.MatchingName), // Adjust for 'S' or dynamic size\r\n        };\r\n      });\r\n\r\n      return {\r\n        ...data,\r\n        yarns: updatedYarns,\r\n      };\r\n    });\r\n\r\n    setUpdatedYarnUsageData(updatedData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Order Quantity Details for Article No: {ArticleNo} with RSN:{\" \"}\r\n        {yarnUsageData[0]?.RSN}\r\n      </h2>\r\n\r\n      {/* Table for Yarn Quantity Inputs */}\r\n      {yarnUsageData.length > 0 ? (\r\n        <table\r\n          border=\"1\"\r\n          cellPadding=\"10\"\r\n          style={{ width: \"100%\", marginTop: \"20px\" }}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>Matching Name</th>\r\n              {nonNullSizes.map((size) => (\r\n                <th key={size}>{size}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {yarnUsageData.map((data, dataIndex) => (\r\n              <tr key={dataIndex}>\r\n                <td>{data.MatchingName}</td>\r\n                {nonNullSizes.map((size) => (\r\n                  <td key={size}>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={quantities[data.MatchingName]?.[size] || \"\"}\r\n                      onChange={(e) =>\r\n                        handleQuantityChange(\r\n                          data.MatchingName,\r\n                          size,\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      min=\"0\"\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <div>No yarn usage data found.</div>\r\n      )}\r\n\r\n      {/* Submit Button to trigger calculation */}\r\n      <button onClick={handleSubmit}>Submit</button>\r\n\r\n      {/* Table for YarnId and Weight (After Submit) */}\r\n      {updatedYarnUsageData.length > 0 && (\r\n        <div style={{ marginTop: \"30px\" }}>\r\n          <h2>Updated Yarn Details</h2>\r\n          <table\r\n            border=\"1\"\r\n            cellPadding=\"10\"\r\n            style={{ width: \"100%\", marginTop: \"20px\" }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Matching Name</th>\r\n                <th>Yarn ID</th>\r\n                <th>Weight</th>\r\n                {nonNullSizes.map((size) => (\r\n                  <th key={size}>{size}</th>\r\n                ))}\r\n                <th>Total</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {updatedYarnUsageData.map((data, dataIndex) => {\r\n                return data.yarns.map((yarn, yarnIndex) => (\r\n                  <tr key={`${dataIndex}-${yarnIndex}`}>\r\n                    {yarnIndex === 0 && (\r\n                      <td rowSpan={data.yarns.length}>{data.MatchingName}</td>\r\n                    )}\r\n                    <td>{yarn.YarnId}</td>\r\n                    <td>{yarn.Weight.toFixed(2)}</td>\r\n                    {/* Display Yarn Details for non-null sizes */}\r\n                    {nonNullSizes.map((size) => (\r\n                      <td key={`${size}-${yarnIndex}`}>\r\n                        {data[size] !== null ? `${data[size]}%` : \"-\"}\r\n                      </td>\r\n                    ))}\r\n                    <td></td>\r\n                  </tr>\r\n                ));\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddOrderDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}