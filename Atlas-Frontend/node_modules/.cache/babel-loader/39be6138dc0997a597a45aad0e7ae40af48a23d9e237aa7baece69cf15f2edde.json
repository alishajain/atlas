{"ast":null,"code":"import axios from\"axios\";// Base URL for the API\nconst API_URL=process.env.REACT_APP_API_URL;// Function to add a new machine\nexport const addMachine=async machineData=>{try{const response=await axios.post(`${API_URL}/add-machine`,machineData);return response.data;}catch(error){// Improved error logging\nconsole.error(\"Error adding machine:\",error.response?error.response.data:error.message);throw new Error(\"Error adding machine\");}};// Function to search a machine by MachineNo\nexport const searchMachineByMachineNo=async MachineNo=>{try{const response=await axios.get(`${API_URL}/search-machine/${MachineNo}`);return response.data;}catch(error){// Improved error logging\nconsole.error(\"Error searching machine:\",error.response?error.response.data:error.message);throw new Error(\"Error searching machine\");}};// Function to update a machine by MachineNo\nexport const updateMachineByMachineNo=async(MachineNo,updatedData)=>{try{console.log(updatedData);const response=await fetch(`${API_URL}/update-machine/${MachineNo}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(updatedData)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Error updating machine');}const data=await response.json();return data;}catch(error){console.error('Error updating machine:',error.response?error.response.data:error.message);throw new Error('Error updating machine');}};// Function to get all machines\nexport const getAllMachines=async()=>{try{const response=await axios.get(`${API_URL}/machines`);return response.data;// Assume the response data contains the machines\n}catch(error){// Enhanced error logging\nconsole.error(\"Error fetching all machines:\",error.response?error.response.data:error.message);throw new Error(\"Error fetching all machines\");}};// Function to delete a machine by its MachineNo\nexport const deleteMachine=async machineNo=>{try{const response=await axios.delete(`${API_URL}/delete-machine/${machineNo}`);return response.data;}catch(error){// Enhanced error logging\nconsole.error(\"Error deleting machine:\",error.response?error.response.data:error.message);throw new Error(\"Error deleting machine\");}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","addMachine","machineData","response","post","data","error","console","message","Error","searchMachineByMachineNo","MachineNo","get","updateMachineByMachineNo","updatedData","log","fetch","method","headers","body","JSON","stringify","ok","errorData","json","getAllMachines","deleteMachine","machineNo","delete"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/MachineApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL for the API\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Function to add a new machine\r\nexport const addMachine = async (machineData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-machine`, machineData);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Improved error logging\r\n    console.error(\r\n      \"Error adding machine:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error adding machine\");\r\n  }\r\n};\r\n\r\n// Function to search a machine by MachineNo\r\nexport const searchMachineByMachineNo = async (MachineNo) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search-machine/${MachineNo}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Improved error logging\r\n    console.error(\r\n      \"Error searching machine:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error searching machine\");\r\n  }\r\n};\r\n\r\n// Function to update a machine by MachineNo\r\nexport const updateMachineByMachineNo = async (MachineNo, updatedData) => {\r\n  try {\r\n    console.log(updatedData);\r\n    const response = await fetch(`${API_URL}/update-machine/${MachineNo}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Error updating machine');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error updating machine:',\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error('Error updating machine');\r\n  }\r\n};\r\n\r\n\r\n// Function to get all machines\r\nexport const getAllMachines = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/machines`);\r\n    return response.data; // Assume the response data contains the machines\r\n  } catch (error) {\r\n    // Enhanced error logging\r\n    console.error(\r\n      \"Error fetching all machines:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error fetching all machines\");\r\n  }\r\n};\r\n\r\n// Function to delete a machine by its MachineNo\r\nexport const deleteMachine = async (machineNo) => {\r\n  try {\r\n    const response = await axios.delete(\r\n      `${API_URL}/delete-machine/${machineNo}`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    // Enhanced error logging\r\n    console.error(\r\n      \"Error deleting machine:\",\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw new Error(\"Error deleting machine\");\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}