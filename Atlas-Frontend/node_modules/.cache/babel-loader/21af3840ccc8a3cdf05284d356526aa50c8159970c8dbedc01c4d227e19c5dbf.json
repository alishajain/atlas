{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\AddColorDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { addColorDetail } from \"../API/ColorDetailApi\";\nimport { getColorId } from \"../API/ColorApi\";\nimport { getYarnIds } from \"../API/YarnApi\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddColorDetails = ({\n  matchingName,\n  RSN,\n  size,\n  selectedStates\n}) => {\n  _s();\n  const initialRowState = {\n    ColorId: \"\",\n    Size: size,\n    BaseColor: {\n      Name: \"\",\n      Weight: \"\"\n    },\n    yarnCount: 0,\n    colors: []\n  };\n  const [formData, setFormData] = useState([]);\n  const [colorIds, setColorIds] = useState({});\n  const [yarnIds, setYarnIds] = useState({});\n  const [message, setMessage] = useState({\n    type: \"\",\n    content: \"\"\n  });\n\n  // Extract selected panels from selectedStates\n  const selectedPanels = Object.entries(selectedStates).filter(([_, value]) => value === true).map(([key]) => key);\n\n  // Set initial formData when selectedStates change\n  useEffect(() => {\n    setFormData(selectedPanels.map(panelName => ({\n      ...initialRowState,\n      ColorId: panelName\n    })));\n  }, [selectedStates]);\n\n  // Fetch ColorId for each selected panel\n  const fetchColorId = async () => {\n    try {\n      const newColorIds = {};\n      for (const Panel of selectedPanels) {\n        const data = await getColorId(RSN, matchingName, Panel);\n        newColorIds[Panel] = data.ColorId;\n      }\n\n      // Update formData with the fetched ColorIds\n      setFormData(prevFormData => prevFormData.map(row => ({\n        ...row,\n        ColorId: newColorIds[row.ColorId] || row.ColorId\n      })));\n      setColorIds(newColorIds); // Store all ColorIds in state\n    } catch (error) {\n      console.error(\"Error fetching ColorId:\", error);\n      setMessage({\n        type: \"error\",\n        content: \"Error fetching ColorIds.\"\n      });\n    }\n  };\n\n  // Fetch YarnIds for dropdown selection\n  const fetchYarnIds = async () => {\n    try {\n      const response = await getYarnIds();\n      if (response && response.data && typeof response.data === \"object\") {\n        setYarnIds(response.data);\n      } else {\n        console.error(\"Error: YarnIds response is not an object\", response);\n        setMessage({\n          type: \"error\",\n          content: \"Invalid data format for YarnIds.\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching YarnIds:\", error);\n      setMessage({\n        type: \"error\",\n        content: \"Error fetching YarnIds.\"\n      });\n    }\n  };\n\n  // Handle the number of yarns input change\n  const handleYarnCountChange = (e, rowIndex) => {\n    const yarnCount = parseInt(e.target.value, 10);\n    const updatedFormData = formData.map((row, index) => {\n      if (index === rowIndex) {\n        return {\n          ...row,\n          yarnCount: yarnCount,\n          // Update the yarn count for this row\n          colors: Array(yarnCount).fill({\n            Name: \"\",\n            Weight: \"\"\n          }) // Adjust the colors array size based on yarn count\n        };\n      }\n      return row;\n    });\n    setFormData(updatedFormData);\n  };\n\n  // Helper function to calculate the total weight for a row\n  const calculateTotalWeight = row => {\n    const baseWeight = parseFloat(row.BaseColor.Weight) || 0;\n    const yarnsWeight = row.colors.reduce((sum, color) => {\n      return sum + (parseFloat(color.Weight) || 0);\n    }, 0);\n    return baseWeight + yarnsWeight; // Sum base color weight and yarns' weights\n  };\n\n  // Handle input changes (BaseColor, Color1, Color2, etc.)\n  const handleInputChange = (e, rowIndex, field, colorIndex = null) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedFormData = formData.map((row, index) => {\n      if (index === rowIndex) {\n        const updatedRow = {\n          ...row\n        };\n        if (field === \"colors\" && colorIndex !== null) {\n          updatedRow.colors = updatedRow.colors.map((color, idx) => idx === colorIndex ? {\n            ...color,\n            [name]: value\n          } : color);\n        } else if (field === \"BaseColor\") {\n          updatedRow.BaseColor = {\n            ...updatedRow.BaseColor,\n            [name]: value\n          };\n        } else {\n          updatedRow[name] = value;\n        }\n\n        // Recalculate total weight after input change\n        updatedRow.totalWeight = calculateTotalWeight(updatedRow);\n        return updatedRow;\n      }\n      return row;\n    });\n    setFormData(updatedFormData);\n  };\n\n  // Fetch userId from Redux store (outside of the handleSubmit function)\n  const userId = useSelector(state => state.user.userId); // Access userId directly inside the component\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const colorData = formData.map(row => {\n      const colors = row.colors.reduce((acc, color, index) => {\n        acc[`Color${index + 1}`] = {\n          Name: color.Name,\n          Weight: color.Weight\n        };\n        return acc;\n      }, {});\n      return {\n        ColorId: row.ColorId,\n        Size: row.Size,\n        BaseColor: row.BaseColor,\n        UserId: userId,\n        ...colors\n      };\n    });\n    try {\n      const responses = await Promise.all(colorData.map(data => addColorDetail(data)));\n      setMessage({\n        type: \"success\",\n        content: \"Data submitted successfully!\"\n      });\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      setMessage({\n        type: \"error\",\n        content: \"Error submitting the form.\"\n      });\n    }\n  };\n  useEffect(() => {\n    fetchYarnIds();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: matchingName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchColorId,\n      children: \"Fetch ColorIds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), message.content && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: message.type === \"error\" ? \"red\" : \"green\",\n        marginBottom: \"10px\",\n        fontWeight: \"bold\"\n      },\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        style: {\n          width: \"100%\",\n          tableLayout: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Panel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Total Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Base Yarn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"4%\"\n              },\n              children: \"Yarns Used\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), \" \", [...Array(14)].map((_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"6%\"\n              },\n              children: [\"Yarn \", index + 1]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: formData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.ColorId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"totalWeight\",\n                value: row.totalWeight || \"\",\n                readOnly: true,\n                style: {\n                  backgroundColor: \"#f0f0f0\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"Name\",\n                value: row.BaseColor.Name || \"\",\n                onChange: e => handleInputChange(e, rowIndex, \"BaseColor\"),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Yarn\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 21\n                }, this), Object.values(yarnIds).length === 0 ? /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"No Yarn available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 23\n                }, this) : Object.values(yarnIds).map(yarn => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: yarn.Name,\n                  children: yarn.YarnId\n                }, yarn.YarnId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"Weight\",\n                value: row.BaseColor.Weight || \"\",\n                placeholder: \"Base Color Weight\",\n                onChange: e => handleInputChange(e, rowIndex, \"BaseColor\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: row.yarnCount || 0,\n                onChange: e => handleYarnCountChange(e, rowIndex),\n                min: 0,\n                max: 14,\n                placeholder: \"Number of Yarns\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this), row.colors.map((color, colorIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"Name\",\n                value: color.Name || \"\",\n                onChange: e => handleInputChange(e, rowIndex, \"colors\", colorIndex),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Yarn\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 23\n                }, this), Object.values(yarnIds).length === 0 ? /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"No Yarn available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 25\n                }, this) : Object.values(yarnIds).map(yarn => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: yarn.Name,\n                  children: yarn.YarnId\n                }, yarn.YarnId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 27\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"Weight\",\n                value: color.Weight || \"\",\n                placeholder: `Color ${colorIndex + 1} Weight`,\n                onChange: e => handleInputChange(e, rowIndex, \"colors\", colorIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 21\n              }, this)]\n            }, colorIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(AddColorDetails, \"shpdbitjn9n3BJdsZnOsPljEG58=\", false, function () {\n  return [useSelector];\n});\n_c = AddColorDetails;\nexport default AddColorDetails;\nvar _c;\n$RefreshReg$(_c, \"AddColorDetails\");","map":{"version":3,"names":["React","useState","useEffect","addColorDetail","getColorId","getYarnIds","useSelector","jsxDEV","_jsxDEV","AddColorDetails","matchingName","RSN","size","selectedStates","_s","initialRowState","ColorId","Size","BaseColor","Name","Weight","yarnCount","colors","formData","setFormData","colorIds","setColorIds","yarnIds","setYarnIds","message","setMessage","type","content","selectedPanels","Object","entries","filter","_","value","map","key","panelName","fetchColorId","newColorIds","Panel","data","prevFormData","row","error","console","fetchYarnIds","response","handleYarnCountChange","e","rowIndex","parseInt","target","updatedFormData","index","Array","fill","calculateTotalWeight","baseWeight","parseFloat","yarnsWeight","reduce","sum","color","handleInputChange","field","colorIndex","name","updatedRow","idx","totalWeight","userId","state","user","handleSubmit","preventDefault","colorData","acc","UserId","responses","Promise","all","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginBottom","fontWeight","onSubmit","border","width","tableLayout","readOnly","backgroundColor","onChange","values","length","yarn","YarnId","placeholder","min","max","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddColorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { addColorDetail } from \"../API/ColorDetailApi\";\r\nimport { getColorId } from \"../API/ColorApi\";\r\nimport { getYarnIds } from \"../API/YarnApi\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AddColorDetails = ({ matchingName, RSN, size, selectedStates }) => {\r\n  const initialRowState = {\r\n    ColorId: \"\",\r\n    Size: size,\r\n    BaseColor: { Name: \"\", Weight: \"\" },\r\n    yarnCount: 0,\r\n    colors: [],\r\n  };\r\n\r\n  const [formData, setFormData] = useState([]);\r\n  const [colorIds, setColorIds] = useState({});\r\n  const [yarnIds, setYarnIds] = useState({});\r\n  const [message, setMessage] = useState({ type: \"\", content: \"\" });\r\n\r\n  // Extract selected panels from selectedStates\r\n  const selectedPanels = Object.entries(selectedStates)\r\n    .filter(([_, value]) => value === true)\r\n    .map(([key]) => key);\r\n\r\n  // Set initial formData when selectedStates change\r\n  useEffect(() => {\r\n    setFormData(\r\n      selectedPanels.map((panelName) => ({\r\n        ...initialRowState,\r\n        ColorId: panelName,\r\n      }))\r\n    );\r\n  }, [selectedStates]);\r\n\r\n  // Fetch ColorId for each selected panel\r\n  const fetchColorId = async () => {\r\n    try {\r\n      const newColorIds = {};\r\n\r\n      for (const Panel of selectedPanels) {\r\n        const data = await getColorId(RSN, matchingName, Panel);\r\n        newColorIds[Panel] = data.ColorId;\r\n      }\r\n\r\n      // Update formData with the fetched ColorIds\r\n      setFormData((prevFormData) =>\r\n        prevFormData.map((row) => ({\r\n          ...row,\r\n          ColorId: newColorIds[row.ColorId] || row.ColorId,\r\n        }))\r\n      );\r\n      setColorIds(newColorIds); // Store all ColorIds in state\r\n    } catch (error) {\r\n      console.error(\"Error fetching ColorId:\", error);\r\n      setMessage({ type: \"error\", content: \"Error fetching ColorIds.\" });\r\n    }\r\n  };\r\n\r\n  // Fetch YarnIds for dropdown selection\r\n  const fetchYarnIds = async () => {\r\n    try {\r\n      const response = await getYarnIds();\r\n\r\n      if (response && response.data && typeof response.data === \"object\") {\r\n        setYarnIds(response.data);\r\n      } else {\r\n        console.error(\"Error: YarnIds response is not an object\", response);\r\n        setMessage({\r\n          type: \"error\",\r\n          content: \"Invalid data format for YarnIds.\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching YarnIds:\", error);\r\n      setMessage({ type: \"error\", content: \"Error fetching YarnIds.\" });\r\n    }\r\n  };\r\n\r\n  // Handle the number of yarns input change\r\n  const handleYarnCountChange = (e, rowIndex) => {\r\n    const yarnCount = parseInt(e.target.value, 10);\r\n    const updatedFormData = formData.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        return {\r\n          ...row,\r\n          yarnCount: yarnCount, // Update the yarn count for this row\r\n          colors: Array(yarnCount).fill({ Name: \"\", Weight: \"\" }), // Adjust the colors array size based on yarn count\r\n        };\r\n      }\r\n      return row;\r\n    });\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Helper function to calculate the total weight for a row\r\n  const calculateTotalWeight = (row) => {\r\n    const baseWeight = parseFloat(row.BaseColor.Weight) || 0;\r\n    const yarnsWeight = row.colors.reduce((sum, color) => {\r\n      return sum + (parseFloat(color.Weight) || 0);\r\n    }, 0);\r\n\r\n    return baseWeight + yarnsWeight; // Sum base color weight and yarns' weights\r\n  };\r\n\r\n  // Handle input changes (BaseColor, Color1, Color2, etc.)\r\n  const handleInputChange = (e, rowIndex, field, colorIndex = null) => {\r\n    const { name, value } = e.target;\r\n\r\n    const updatedFormData = formData.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        const updatedRow = { ...row };\r\n\r\n        if (field === \"colors\" && colorIndex !== null) {\r\n          updatedRow.colors = updatedRow.colors.map((color, idx) =>\r\n            idx === colorIndex ? { ...color, [name]: value } : color\r\n          );\r\n        } else if (field === \"BaseColor\") {\r\n          updatedRow.BaseColor = {\r\n            ...updatedRow.BaseColor,\r\n            [name]: value,\r\n          };\r\n        } else {\r\n          updatedRow[name] = value;\r\n        }\r\n\r\n        // Recalculate total weight after input change\r\n        updatedRow.totalWeight = calculateTotalWeight(updatedRow);\r\n\r\n        return updatedRow;\r\n      }\r\n      return row;\r\n    });\r\n\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Fetch userId from Redux store (outside of the handleSubmit function)\r\n  const userId = useSelector((state) => state.user.userId); // Access userId directly inside the component\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const colorData = formData.map((row) => {\r\n      const colors = row.colors.reduce((acc, color, index) => {\r\n        acc[`Color${index + 1}`] = { Name: color.Name, Weight: color.Weight };\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        ColorId: row.ColorId,\r\n        Size: row.Size,\r\n        BaseColor: row.BaseColor,\r\n        UserId: userId,\r\n        ...colors,\r\n      };\r\n    });\r\n\r\n    try {\r\n      const responses = await Promise.all(\r\n        colorData.map((data) => addColorDetail(data))\r\n      );\r\n      setMessage({ type: \"success\", content: \"Data submitted successfully!\" });\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      setMessage({ type: \"error\", content: \"Error submitting the form.\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchYarnIds();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{matchingName}</h3>\r\n      <button onClick={fetchColorId}>Fetch ColorIds</button>\r\n      {message.content && (\r\n        <div\r\n          style={{\r\n            color: message.type === \"error\" ? \"red\" : \"green\",\r\n            marginBottom: \"10px\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {message.content}\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <table border=\"1\" style={{ width: \"100%\", tableLayout: \"auto\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ width: \"4%\" }}>Panel</th>\r\n              <th style={{ width: \"4%\" }}>Total Weight</th> {/* Move Total Weight column here */}\r\n              <th style={{ width: \"4%\" }}>Base Yarn</th>\r\n              <th style={{ width: \"4%\" }}>Yarns Used</th>{\" \"}\r\n              {[...Array(14)].map((_, index) => (\r\n                <th key={index} style={{ width: \"6%\" }}>\r\n                  Yarn {index + 1}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {formData.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                <td>{row.ColorId}</td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"totalWeight\"\r\n                    value={row.totalWeight || \"\"}\r\n                    readOnly\r\n                    style={{ backgroundColor: \"#f0f0f0\" }}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    name=\"Name\"\r\n                    value={row.BaseColor.Name || \"\"}\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  >\r\n                    <option value=\"\">Select Yarn</option>\r\n                    {Object.values(yarnIds).length === 0 ? (\r\n                      <option value=\"\">No Yarn available</option>\r\n                    ) : (\r\n                      Object.values(yarnIds).map((yarn) => (\r\n                        <option key={yarn.YarnId} value={yarn.Name}>\r\n                          {yarn.YarnId}\r\n                        </option>\r\n                      ))\r\n                    )}\r\n                  </select>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"Weight\"\r\n                    value={row.BaseColor.Weight || \"\"}\r\n                    placeholder=\"Base Color Weight\"\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={row.yarnCount || 0}\r\n                    onChange={(e) => handleYarnCountChange(e, rowIndex)}\r\n                    min={0}\r\n                    max={14}\r\n                    placeholder=\"Number of Yarns\"\r\n                  />\r\n                </td>\r\n                {row.colors.map((color, colorIndex) => (\r\n                  <td key={colorIndex}>\r\n                    <select\r\n                      name=\"Name\"\r\n                      value={color.Name || \"\"}\r\n                      onChange={(e) =>\r\n                        handleInputChange(e, rowIndex, \"colors\", colorIndex)\r\n                      }\r\n                    >\r\n                      <option value=\"\">Select Yarn</option>\r\n                      {Object.values(yarnIds).length === 0 ? (\r\n                        <option value=\"\">No Yarn available</option>\r\n                      ) : (\r\n                        Object.values(yarnIds).map((yarn) => (\r\n                          <option key={yarn.YarnId} value={yarn.Name}>\r\n                            {yarn.YarnId}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </select>\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"Weight\"\r\n                      value={color.Weight || \"\"}\r\n                      placeholder={`Color ${colorIndex + 1} Weight`}\r\n                      onChange={(e) =>\r\n                        handleInputChange(e, rowIndex, \"colors\", colorIndex)\r\n                      }\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddColorDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}