{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnUsage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\nimport { addYarnUsage } from \"../API/YarnUsageApi\"; // Import the API call\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnUsage = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const RSN = location.state ? location.state.RSN : null;\n\n  // State to hold matching names, color IDs, and color details\n  const [matchingNames, setMatchingNames] = useState([]);\n  const [colorDetailsByMatchingName, setColorDetailsByMatchingName] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [yarnUsageData, setYarnUsageData] = useState([]); // To hold the data for insertion\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!RSN) return;\n      try {\n        // Step 1: Get matching names by RSN\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\n        setMatchingNames(matchingNamesResponse.data);\n\n        // Step 2: For each matching name, get color IDs and fetch color details\n        const fetchColorDetails = async () => {\n          const colorDetailsDataByMatchingName = {};\n          for (const matchingName of matchingNamesResponse.data) {\n            var _colorIdsResponse$dat;\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\n\n            // Safeguard: Check if colorIdsResponse has data\n            if ((colorIdsResponse === null || colorIdsResponse === void 0 ? void 0 : (_colorIdsResponse$dat = colorIdsResponse.data) === null || _colorIdsResponse$dat === void 0 ? void 0 : _colorIdsResponse$dat.length) > 0) {\n              const colorDetailPromises = colorIdsResponse.data.map(async color => {\n                if (color !== null && color !== void 0 && color.ColorId) {\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\n                  return colorDetail[0];\n                }\n                return null;\n              });\n\n              // Wait for all color details to be fetched for the current matching name\n              const colorDetailsData = await Promise.all(colorDetailPromises);\n\n              // Store the details by matching name\n              colorDetailsDataByMatchingName[matchingName.MatchingName] = colorDetailsData.filter(Boolean);\n            }\n          }\n          setColorDetailsByMatchingName(colorDetailsDataByMatchingName);\n          setLoading(false);\n        };\n        fetchColorDetails(); // Call to fetch color details\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false); // Set loading to false in case of error\n      }\n    };\n    fetchData(); // Fetch data when the component mounts\n  }, [RSN]);\n\n  // Helper function to get YarnId and Weight pairs for a MatchingName\n  const getYarnIdWeightPairs = colorDetails => {\n    const yarnIdWeightPairs = {};\n\n    // Go through all color details and sum weights for the same YarnId\n    colorDetails.forEach(colorDetail => {\n      // Add BaseColor YarnId and Weight\n      if (colorDetail.BaseColor && colorDetail.BaseColor.YarnId) {\n        const yarnId = colorDetail.BaseColor.YarnId;\n        const weight = parseFloat(colorDetail.BaseColor.Weight);\n        if (yarnIdWeightPairs[yarnId]) {\n          yarnIdWeightPairs[yarnId] += weight;\n        } else {\n          yarnIdWeightPairs[yarnId] = weight;\n        }\n      }\n\n      // Check for other color fields (Color1, Color2, ..., Color14)\n      for (let i = 1; i <= 14; i++) {\n        const colorKey = `Color${i}`;\n        if (colorDetail[colorKey] && colorDetail[colorKey].YarnId) {\n          const yarnId = colorDetail[colorKey].YarnId;\n          const weight = parseFloat(colorDetail[colorKey].Weight);\n          if (yarnIdWeightPairs[yarnId]) {\n            yarnIdWeightPairs[yarnId] += weight;\n          } else {\n            yarnIdWeightPairs[yarnId] = weight;\n          }\n        }\n      }\n    });\n\n    // Convert the object to an array of YarnId, Weight pairs\n    return Object.entries(yarnIdWeightPairs).map(([YarnId, Weight]) => ({\n      YarnId,\n      Weight\n    }));\n  };\n\n  // Function to prepare yarn usage data\n  const prepareYarnUsageData = () => {\n    const yarnUsageEntries = matchingNames.map(matchingName => {\n      const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName];\n      const yarnData = getYarnIdWeightPairs(colorDetails);\n\n      // Create an object for each YarnId, Weight data (e.g., Yarn1, Yarn2, etc.)\n      const yarnUsage = {};\n      yarnData.forEach((entry, index) => {\n        yarnUsage[`Yarn${index + 1}`] = {\n          YarnId: entry.YarnId,\n          Weight: entry.Weight\n        };\n      });\n\n      // Ensure that Yarn1 is not null and others are set as null if missing\n      for (let i = yarnData.length; i < 15; i++) {\n        yarnUsage[`Yarn${i + 1}`] = null; // Set missing yarn data as null\n      }\n      return {\n        RSN,\n        MatchingName: matchingName.MatchingName,\n        ...yarnUsage,\n        UserId: \"user123\" // Replace with actual user ID if needed\n      };\n    });\n    setYarnUsageData(yarnUsageEntries); // Set prepared data to state\n  };\n\n  // Insert the prepared yarn usage data\n  const handleInsertData = async () => {\n    try {\n      await addYarnUsage(yarnUsageData);\n      alert(\"Yarn usage data inserted successfully.\");\n    } catch (error) {\n      console.error(\"Error inserting yarn usage data:\", error);\n      alert(\"Failed to insert yarn usage data.\");\n    }\n  };\n  const handleNext = () => {\n    navigate(`/sample-actions/${RSN}`, {\n      state: {\n        RSN\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Yarn Usage Details by Matching Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading yarn usage data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this) : Object.keys(colorDetailsByMatchingName).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: matchingNames.map(matchingName => {\n        const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: matchingName.MatchingName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this), colorDetails.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n            border: \"1\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"YarnId\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Total Weight\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: getYarnIdWeightPairs(colorDetails).map((pair, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: pair.YarnId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: pair.Weight\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 27\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No color details available for this matching name.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this)]\n        }, matchingName.MatchingName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No yarn usage data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prepareYarnUsageData,\n      children: \"Prepare Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInsertData,\n      children: \"OK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnUsage, \"2ht9JpNSK5WTSq69VbGJj1RWWho=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","addYarnUsage","jsxDEV","_jsxDEV","YarnUsage","_s","location","navigate","RSN","state","matchingNames","setMatchingNames","colorDetailsByMatchingName","setColorDetailsByMatchingName","loading","setLoading","yarnUsageData","setYarnUsageData","fetchData","matchingNamesResponse","data","fetchColorDetails","colorDetailsDataByMatchingName","matchingName","_colorIdsResponse$dat","colorIdsResponse","MatchingName","length","colorDetailPromises","map","color","ColorId","colorDetail","colorDetailsData","Promise","all","filter","Boolean","error","console","getYarnIdWeightPairs","colorDetails","yarnIdWeightPairs","forEach","BaseColor","YarnId","yarnId","weight","parseFloat","Weight","i","colorKey","Object","entries","prepareYarnUsageData","yarnUsageEntries","yarnData","yarnUsage","entry","index","UserId","handleInsertData","alert","handleNext","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","border","pair","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\nimport { addYarnUsage } from \"../API/YarnUsageApi\"; // Import the API call\r\n\r\nconst YarnUsage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const RSN = location.state ? location.state.RSN : null;\r\n\r\n  // State to hold matching names, color IDs, and color details\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [colorDetailsByMatchingName, setColorDetailsByMatchingName] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [yarnUsageData, setYarnUsageData] = useState([]); // To hold the data for insertion\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) return;\r\n\r\n      try {\r\n        // Step 1: Get matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        // Step 2: For each matching name, get color IDs and fetch color details\r\n        const fetchColorDetails = async () => {\r\n          const colorDetailsDataByMatchingName = {};\r\n\r\n          for (const matchingName of matchingNamesResponse.data) {\r\n            const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n\r\n            // Safeguard: Check if colorIdsResponse has data\r\n            if (colorIdsResponse?.data?.length > 0) {\r\n              const colorDetailPromises = colorIdsResponse.data.map(async (color) => {\r\n                if (color?.ColorId) {\r\n                  const colorDetail = await getColorDetailByColorId(color.ColorId);\r\n                  return colorDetail[0];\r\n                }\r\n                return null;\r\n              });\r\n\r\n              // Wait for all color details to be fetched for the current matching name\r\n              const colorDetailsData = await Promise.all(colorDetailPromises);\r\n\r\n              // Store the details by matching name\r\n              colorDetailsDataByMatchingName[matchingName.MatchingName] = colorDetailsData.filter(Boolean);\r\n            }\r\n          }\r\n\r\n          setColorDetailsByMatchingName(colorDetailsDataByMatchingName); \r\n          setLoading(false);\r\n        };\r\n\r\n        fetchColorDetails(); // Call to fetch color details\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false); // Set loading to false in case of error\r\n      }\r\n    };\r\n\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, [RSN]);\r\n\r\n  // Helper function to get YarnId and Weight pairs for a MatchingName\r\n  const getYarnIdWeightPairs = (colorDetails) => {\r\n    const yarnIdWeightPairs = {};\r\n\r\n    // Go through all color details and sum weights for the same YarnId\r\n    colorDetails.forEach((colorDetail) => {\r\n      // Add BaseColor YarnId and Weight\r\n      if (colorDetail.BaseColor && colorDetail.BaseColor.YarnId) {\r\n        const yarnId = colorDetail.BaseColor.YarnId;\r\n        const weight = parseFloat(colorDetail.BaseColor.Weight);\r\n        if (yarnIdWeightPairs[yarnId]) {\r\n          yarnIdWeightPairs[yarnId] += weight;\r\n        } else {\r\n          yarnIdWeightPairs[yarnId] = weight;\r\n        }\r\n      }\r\n\r\n      // Check for other color fields (Color1, Color2, ..., Color14)\r\n      for (let i = 1; i <= 14; i++) {\r\n        const colorKey = `Color${i}`;\r\n        if (colorDetail[colorKey] && colorDetail[colorKey].YarnId) {\r\n          const yarnId = colorDetail[colorKey].YarnId;\r\n          const weight = parseFloat(colorDetail[colorKey].Weight);\r\n          if (yarnIdWeightPairs[yarnId]) {\r\n            yarnIdWeightPairs[yarnId] += weight;\r\n          } else {\r\n            yarnIdWeightPairs[yarnId] = weight;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Convert the object to an array of YarnId, Weight pairs\r\n    return Object.entries(yarnIdWeightPairs).map(([YarnId, Weight]) => ({\r\n      YarnId,\r\n      Weight\r\n    }));\r\n  };\r\n\r\n  // Function to prepare yarn usage data\r\n  const prepareYarnUsageData = () => {\r\n    const yarnUsageEntries = matchingNames.map((matchingName) => {\r\n      const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName];\r\n      const yarnData = getYarnIdWeightPairs(colorDetails);\r\n\r\n      // Create an object for each YarnId, Weight data (e.g., Yarn1, Yarn2, etc.)\r\n      const yarnUsage = {};\r\n      yarnData.forEach((entry, index) => {\r\n        yarnUsage[`Yarn${index + 1}`] = { YarnId: entry.YarnId, Weight: entry.Weight };\r\n      });\r\n\r\n      // Ensure that Yarn1 is not null and others are set as null if missing\r\n      for (let i = yarnData.length; i < 15; i++) {\r\n        yarnUsage[`Yarn${i + 1}`] = null; // Set missing yarn data as null\r\n      }\r\n\r\n      return {\r\n        RSN,\r\n        MatchingName: matchingName.MatchingName,\r\n        ...yarnUsage,\r\n        UserId: \"user123\", // Replace with actual user ID if needed\r\n      };\r\n    });\r\n\r\n    setYarnUsageData(yarnUsageEntries); // Set prepared data to state\r\n  };\r\n\r\n  // Insert the prepared yarn usage data\r\n  const handleInsertData = async () => {\r\n    try {\r\n      await addYarnUsage(yarnUsageData);\r\n      alert(\"Yarn usage data inserted successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error inserting yarn usage data:\", error);\r\n      alert(\"Failed to insert yarn usage data.\");\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    navigate(`/sample-actions/${RSN}`, { state: { RSN } });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details by Matching Name</h1>\r\n      {loading ? (\r\n        <p>Loading yarn usage data...</p>\r\n      ) : Object.keys(colorDetailsByMatchingName).length > 0 ? (\r\n        <div>\r\n          {matchingNames.map((matchingName) => {\r\n            const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName];\r\n\r\n            return (\r\n              <div key={matchingName.MatchingName}>\r\n                <h3>{matchingName.MatchingName}</h3>\r\n                {colorDetails.length > 0 ? (\r\n                  <table border=\"1\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>YarnId</th>\r\n                        <th>Total Weight</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {getYarnIdWeightPairs(colorDetails).map((pair, index) => (\r\n                        <tr key={index}>\r\n                          <td>{pair.YarnId}</td>\r\n                          <td>{pair.Weight}</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                ) : (\r\n                  <p>No color details available for this matching name.</p>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <p>No yarn usage data available.</p>\r\n      )}\r\n\r\n      <button onClick={prepareYarnUsageData}>Prepare Data</button>\r\n      <button onClick={handleInsertData}>OK</button>\r\n      <button onClick={handleNext}>Next</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}