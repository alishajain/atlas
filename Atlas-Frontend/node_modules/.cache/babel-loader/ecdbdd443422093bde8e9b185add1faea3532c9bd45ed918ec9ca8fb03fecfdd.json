{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhupesh\\\\OneDrive\\\\Desktop\\\\Alisha\\\\atlas\\\\Atlas-Frontend\\\\src\\\\Components\\\\YarnUsage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\nimport { addYarnUsage } from \"../API/YarnUsageApi\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YarnUsage = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const RSN = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.RSN) || null; // Make sure RSN is properly passed\n  const userId = useSelector(state => state.user.userId);\n  const [matchingNames, setMatchingNames] = useState([]);\n  const [colorDetailsByMatchingName, setColorDetailsByMatchingName] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  // Simplified Yarn Data Accumulation\n  const accumulateYarnData = colorDetails => {\n    const yarnIdWeightPairs = {};\n    colorDetails.forEach(colorDetail => {\n      var _colorDetail$BaseColo;\n      const addYarnPair = (yarnId, weight) => {\n        yarnIdWeightPairs[yarnId] = (yarnIdWeightPairs[yarnId] || 0) + weight;\n      };\n      if ((_colorDetail$BaseColo = colorDetail.BaseColor) !== null && _colorDetail$BaseColo !== void 0 && _colorDetail$BaseColo.YarnId) {\n        addYarnPair(colorDetail.BaseColor.YarnId, parseFloat(colorDetail.BaseColor.Weight));\n      }\n      for (let i = 1; i <= 14; i++) {\n        var _colorDetail$colorKey;\n        const colorKey = `Color${i}`;\n        if ((_colorDetail$colorKey = colorDetail[colorKey]) !== null && _colorDetail$colorKey !== void 0 && _colorDetail$colorKey.YarnId) {\n          addYarnPair(colorDetail[colorKey].YarnId, parseFloat(colorDetail[colorKey].Weight));\n        }\n      }\n    });\n    return Object.entries(yarnIdWeightPairs).map(([YarnId, Weight]) => ({\n      YarnId,\n      Weight\n    }));\n  };\n\n  // Fetching matching names and color details by RSN\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!RSN) {\n        console.error(\"RSN is null or undefined. Cannot fetch data.\");\n        setLoading(false);\n        return;\n      }\n      try {\n        // Fetch matching names by RSN\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\n        console.log(\"Matching Names Response: \", matchingNamesResponse); // Log the response\n        setMatchingNames(matchingNamesResponse.data);\n        const colorDetailsDataByMatchingName = {};\n        for (const matchingName of matchingNamesResponse.data) {\n          var _colorIdsResponse$dat;\n          const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\n          console.log(\"Color IDs for Matching Name:\", matchingName.MatchingName, colorIdsResponse); // Log color IDs\n\n          if ((colorIdsResponse === null || colorIdsResponse === void 0 ? void 0 : (_colorIdsResponse$dat = colorIdsResponse.data) === null || _colorIdsResponse$dat === void 0 ? void 0 : _colorIdsResponse$dat.length) > 0) {\n            const colorDetailsPromises = colorIdsResponse.data.map(async color => {\n              if (color !== null && color !== void 0 && color.ColorId) {\n                const colorDetailResponse = await getColorDetailByColorId(color.ColorId);\n                console.log(\"Color Detail Response for ColorId:\", color.ColorId, colorDetailResponse); // Log the color detail\n                return colorDetailResponse[0]; // Assuming it's an array and taking the first item\n              }\n              return null;\n            });\n\n            // Wait for all color details to be fetched\n            const colorDetailsData = await Promise.all(colorDetailsPromises);\n            colorDetailsDataByMatchingName[matchingName.MatchingName] = colorDetailsData.filter(Boolean);\n          }\n        }\n        console.log(\"Color Details by Matching Name:\", colorDetailsDataByMatchingName); // Log the full color details\n        setColorDetailsByMatchingName(colorDetailsDataByMatchingName);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [RSN]);\n\n  // Prepare yarn usage data\n  const prepareYarnUsageData = () => {\n    return matchingNames.map(matchingName => {\n      const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName] || [];\n      const yarnData = accumulateYarnData(colorDetails);\n      const yarnUsage = {\n        RSN,\n        MatchingName: matchingName.MatchingName,\n        UserId: userId\n      };\n      yarnData.forEach((entry, index) => {\n        yarnUsage[`Yarn${index + 1}`] = {\n          YarnId: entry.YarnId,\n          Weight: entry.Weight\n        };\n      });\n\n      // Ensure missing Yarn entries are set to null\n      for (let i = yarnData.length; i < 15; i++) {\n        yarnUsage[`Yarn${i + 1}`] = null;\n      }\n      return yarnUsage;\n    });\n  };\n\n  // Handle inserting data\n  const handleInsertData = async () => {\n    try {\n      // Prepare yarn usage data\n      const yarnUsageData = prepareYarnUsageData();\n      console.log(\"Prepared Yarn Usage Data:\", yarnUsageData); // Log prepared yarn usage data\n\n      const processedMatchingNames = new Set();\n\n      // Use for loop to iterate through the yarnUsageData array\n      for (let i = 0; i < yarnUsageData.length; i++) {\n        const yarnUsage = yarnUsageData[i];\n        console.log(`Processing Yarn Usage for Matching Name: ${yarnUsage.MatchingName}`); // Log the MatchingName being processed\n\n        // Skip if the MatchingName is already processed\n        if (processedMatchingNames.has(yarnUsage.MatchingName)) {\n          console.log(`Skipping already processed MatchingName: ${yarnUsage.MatchingName}`);\n          //continue;\n        }\n\n        // Call the API for each yarn usage data item\n        const response = await addYarnUsage(yarnUsage);\n        console.log(\"Add Yarn Usage Response:\", response); // Log the API response\n\n        // Check if the response is successful\n        if (response !== null && response !== void 0 && response.data) {\n          console.log(`Successfully inserted data for ${yarnUsage.MatchingName}`);\n        } else {\n          console.log(`Failed to insert data for ${yarnUsage.MatchingName}`);\n        }\n\n        // Add MatchingName to processed set to avoid reprocessing\n        processedMatchingNames.add(yarnUsage.MatchingName);\n      }\n\n      // Notify user that the data insertion was successful\n      alert(\"Yarn usage data inserted successfully.\");\n    } catch (error) {\n      console.error(\"Error inserting yarn usage data:\", error);\n      alert(\"An error occurred while inserting yarn usage data.\");\n    }\n  };\n\n  // Handle Next button\n  const handleNext = () => navigate(`/sample-actions/${RSN}`, {\n    state: {\n      RSN\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Yarn Usage Details by Matching Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading yarn usage data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this) : Object.keys(colorDetailsByMatchingName).length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: matchingNames.map(matchingName => {\n        const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName] || [];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: matchingName.MatchingName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this), colorDetails.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n            border: \"1\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"YarnId\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Total Weight\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: accumulateYarnData(colorDetails).map((pair, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: pair.YarnId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: pair.Weight\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 27\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No color details available for this matching name.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 19\n          }, this)]\n        }, matchingName.MatchingName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No yarn usage data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInsertData,\n      children: \"Insert Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(YarnUsage, \"weJB3L2S3YqS/idTPR6PFW5puSA=\", false, function () {\n  return [useLocation, useNavigate, useSelector];\n});\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","getColorIds","getMatchingNameByRSN","getColorDetailByColorId","addYarnUsage","useSelector","jsxDEV","_jsxDEV","YarnUsage","_s","_location$state","location","navigate","RSN","state","userId","user","matchingNames","setMatchingNames","colorDetailsByMatchingName","setColorDetailsByMatchingName","loading","setLoading","accumulateYarnData","colorDetails","yarnIdWeightPairs","forEach","colorDetail","_colorDetail$BaseColo","addYarnPair","yarnId","weight","BaseColor","YarnId","parseFloat","Weight","i","_colorDetail$colorKey","colorKey","Object","entries","map","fetchData","console","error","matchingNamesResponse","log","data","colorDetailsDataByMatchingName","matchingName","_colorIdsResponse$dat","colorIdsResponse","MatchingName","length","colorDetailsPromises","color","ColorId","colorDetailResponse","colorDetailsData","Promise","all","filter","Boolean","prepareYarnUsageData","yarnData","yarnUsage","UserId","entry","index","handleInsertData","yarnUsageData","processedMatchingNames","Set","has","response","add","alert","handleNext","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","border","pair","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { getColorIds, getMatchingNameByRSN } from \"../API/ColorApi\";\r\nimport { getColorDetailByColorId } from \"../API/ColorDetailApi\";\r\nimport { addYarnUsage } from \"../API/YarnUsageApi\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst YarnUsage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const RSN = location.state?.RSN || null; // Make sure RSN is properly passed\r\n  const userId = useSelector((state) => state.user.userId);\r\n\r\n  const [matchingNames, setMatchingNames] = useState([]);\r\n  const [colorDetailsByMatchingName, setColorDetailsByMatchingName] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Simplified Yarn Data Accumulation\r\n  const accumulateYarnData = (colorDetails) => {\r\n    const yarnIdWeightPairs = {};\r\n\r\n    colorDetails.forEach((colorDetail) => {\r\n      const addYarnPair = (yarnId, weight) => {\r\n        yarnIdWeightPairs[yarnId] = (yarnIdWeightPairs[yarnId] || 0) + weight;\r\n      };\r\n\r\n      if (colorDetail.BaseColor?.YarnId) {\r\n        addYarnPair(colorDetail.BaseColor.YarnId, parseFloat(colorDetail.BaseColor.Weight));\r\n      }\r\n\r\n      for (let i = 1; i <= 14; i++) {\r\n        const colorKey = `Color${i}`;\r\n        if (colorDetail[colorKey]?.YarnId) {\r\n          addYarnPair(colorDetail[colorKey].YarnId, parseFloat(colorDetail[colorKey].Weight));\r\n        }\r\n      }\r\n    });\r\n\r\n    return Object.entries(yarnIdWeightPairs).map(([YarnId, Weight]) => ({ YarnId, Weight }));\r\n  };\r\n\r\n  // Fetching matching names and color details by RSN\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!RSN) {\r\n        console.error(\"RSN is null or undefined. Cannot fetch data.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Fetch matching names by RSN\r\n        const matchingNamesResponse = await getMatchingNameByRSN(RSN);\r\n        console.log(\"Matching Names Response: \", matchingNamesResponse); // Log the response\r\n        setMatchingNames(matchingNamesResponse.data);\r\n\r\n        const colorDetailsDataByMatchingName = {};\r\n\r\n        for (const matchingName of matchingNamesResponse.data) {\r\n          const colorIdsResponse = await getColorIds(RSN, matchingName.MatchingName);\r\n          console.log(\"Color IDs for Matching Name:\", matchingName.MatchingName, colorIdsResponse); // Log color IDs\r\n\r\n          if (colorIdsResponse?.data?.length > 0) {\r\n            const colorDetailsPromises = colorIdsResponse.data.map(async (color) => {\r\n              if (color?.ColorId) {\r\n                const colorDetailResponse = await getColorDetailByColorId(color.ColorId);\r\n                console.log(\"Color Detail Response for ColorId:\", color.ColorId, colorDetailResponse); // Log the color detail\r\n                return colorDetailResponse[0]; // Assuming it's an array and taking the first item\r\n              }\r\n              return null;\r\n            });\r\n\r\n            // Wait for all color details to be fetched\r\n            const colorDetailsData = await Promise.all(colorDetailsPromises);\r\n            colorDetailsDataByMatchingName[matchingName.MatchingName] = colorDetailsData.filter(Boolean);\r\n          }\r\n        }\r\n\r\n        console.log(\"Color Details by Matching Name:\", colorDetailsDataByMatchingName); // Log the full color details\r\n        setColorDetailsByMatchingName(colorDetailsDataByMatchingName);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [RSN]);\r\n\r\n  // Prepare yarn usage data\r\n  const prepareYarnUsageData = () => {\r\n    return matchingNames.map((matchingName) => {\r\n      const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName] || [];\r\n      const yarnData = accumulateYarnData(colorDetails);\r\n\r\n      const yarnUsage = {\r\n        RSN,\r\n        MatchingName: matchingName.MatchingName,\r\n        UserId: userId,\r\n      };\r\n\r\n      yarnData.forEach((entry, index) => {\r\n        yarnUsage[`Yarn${index + 1}`] = { YarnId: entry.YarnId, Weight: entry.Weight };\r\n      });\r\n\r\n      // Ensure missing Yarn entries are set to null\r\n      for (let i = yarnData.length; i < 15; i++) {\r\n        yarnUsage[`Yarn${i + 1}`] = null;\r\n      }\r\n\r\n      return yarnUsage;\r\n    });\r\n  };\r\n\r\n  // Handle inserting data\r\n  const handleInsertData = async () => {\r\n    try {\r\n      // Prepare yarn usage data\r\n      const yarnUsageData = prepareYarnUsageData();\r\n      console.log(\"Prepared Yarn Usage Data:\", yarnUsageData); // Log prepared yarn usage data\r\n    \r\n      const processedMatchingNames = new Set();\r\n    \r\n      // Use for loop to iterate through the yarnUsageData array\r\n      for (let i = 0; i < yarnUsageData.length; i++) {\r\n        const yarnUsage = yarnUsageData[i];\r\n        console.log(`Processing Yarn Usage for Matching Name: ${yarnUsage.MatchingName}`); // Log the MatchingName being processed\r\n    \r\n        // Skip if the MatchingName is already processed\r\n        if (processedMatchingNames.has(yarnUsage.MatchingName)) {\r\n          console.log(`Skipping already processed MatchingName: ${yarnUsage.MatchingName}`);\r\n          //continue;\r\n        }\r\n    \r\n        // Call the API for each yarn usage data item\r\n        const response = await addYarnUsage(yarnUsage);\r\n        console.log(\"Add Yarn Usage Response:\", response); // Log the API response\r\n    \r\n        // Check if the response is successful\r\n        if (response?.data) {\r\n          console.log(`Successfully inserted data for ${yarnUsage.MatchingName}`);\r\n        } else {\r\n          console.log(`Failed to insert data for ${yarnUsage.MatchingName}`);\r\n        }\r\n    \r\n        // Add MatchingName to processed set to avoid reprocessing\r\n        processedMatchingNames.add(yarnUsage.MatchingName);\r\n      }\r\n    \r\n      // Notify user that the data insertion was successful\r\n      alert(\"Yarn usage data inserted successfully.\");\r\n    \r\n    } catch (error) {\r\n      console.error(\"Error inserting yarn usage data:\", error);\r\n      alert(\"An error occurred while inserting yarn usage data.\");\r\n    }\r\n    \r\n  };\r\n\r\n  // Handle Next button\r\n  const handleNext = () => navigate(`/sample-actions/${RSN}`, { state: { RSN } });\r\n\r\n  return (\r\n    <div>\r\n      <h1>Yarn Usage Details by Matching Name</h1>\r\n      {loading ? (\r\n        <p>Loading yarn usage data...</p>\r\n      ) : Object.keys(colorDetailsByMatchingName).length > 0 ? (\r\n        <div>\r\n          {matchingNames.map((matchingName) => {\r\n            const colorDetails = colorDetailsByMatchingName[matchingName.MatchingName] || [];\r\n\r\n            return (\r\n              <div key={matchingName.MatchingName}>\r\n                <h3>{matchingName.MatchingName}</h3>\r\n                {colorDetails.length > 0 ? (\r\n                  <table border=\"1\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>YarnId</th>\r\n                        <th>Total Weight</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {accumulateYarnData(colorDetails).map((pair, index) => (\r\n                        <tr key={index}>\r\n                          <td>{pair.YarnId}</td>\r\n                          <td>{pair.Weight}</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                ) : (\r\n                  <p>No color details available for this matching name.</p>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <p>No yarn usage data available.</p>\r\n      )}\r\n\r\n      <button onClick={handleInsertData}>Insert Data</button>\r\n      <button onClick={handleNext}>Next</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,WAAW,EAAEC,oBAAoB,QAAQ,iBAAiB;AACnE,SAASC,uBAAuB,QAAQ,uBAAuB;AAC/D,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACtB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAMc,GAAG,GAAG,EAAAH,eAAA,GAAAC,QAAQ,CAACG,KAAK,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBG,GAAG,KAAI,IAAI,CAAC,CAAC;EACzC,MAAME,MAAM,GAAGV,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACE,IAAI,CAACD,MAAM,CAAC;EAExD,MAAM,CAACE,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACqB,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChF,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMyB,kBAAkB,GAAIC,YAAY,IAAK;IAC3C,MAAMC,iBAAiB,GAAG,CAAC,CAAC;IAE5BD,YAAY,CAACE,OAAO,CAAEC,WAAW,IAAK;MAAA,IAAAC,qBAAA;MACpC,MAAMC,WAAW,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;QACtCN,iBAAiB,CAACK,MAAM,CAAC,GAAG,CAACL,iBAAiB,CAACK,MAAM,CAAC,IAAI,CAAC,IAAIC,MAAM;MACvE,CAAC;MAED,KAAAH,qBAAA,GAAID,WAAW,CAACK,SAAS,cAAAJ,qBAAA,eAArBA,qBAAA,CAAuBK,MAAM,EAAE;QACjCJ,WAAW,CAACF,WAAW,CAACK,SAAS,CAACC,MAAM,EAAEC,UAAU,CAACP,WAAW,CAACK,SAAS,CAACG,MAAM,CAAC,CAAC;MACrF;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAAA,IAAAC,qBAAA;QAC5B,MAAMC,QAAQ,GAAG,QAAQF,CAAC,EAAE;QAC5B,KAAAC,qBAAA,GAAIV,WAAW,CAACW,QAAQ,CAAC,cAAAD,qBAAA,eAArBA,qBAAA,CAAuBJ,MAAM,EAAE;UACjCJ,WAAW,CAACF,WAAW,CAACW,QAAQ,CAAC,CAACL,MAAM,EAAEC,UAAU,CAACP,WAAW,CAACW,QAAQ,CAAC,CAACH,MAAM,CAAC,CAAC;QACrF;MACF;IACF,CAAC,CAAC;IAEF,OAAOI,MAAM,CAACC,OAAO,CAACf,iBAAiB,CAAC,CAACgB,GAAG,CAAC,CAAC,CAACR,MAAM,EAAEE,MAAM,CAAC,MAAM;MAAEF,MAAM;MAAEE;IAAO,CAAC,CAAC,CAAC;EAC1F,CAAC;;EAED;EACAtC,SAAS,CAAC,MAAM;IACd,MAAM6C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI,CAAC7B,GAAG,EAAE;QACR8B,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;QAC7DtB,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACF;QACA,MAAMuB,qBAAqB,GAAG,MAAM3C,oBAAoB,CAACW,GAAG,CAAC;QAC7D8B,OAAO,CAACG,GAAG,CAAC,2BAA2B,EAAED,qBAAqB,CAAC,CAAC,CAAC;QACjE3B,gBAAgB,CAAC2B,qBAAqB,CAACE,IAAI,CAAC;QAE5C,MAAMC,8BAA8B,GAAG,CAAC,CAAC;QAEzC,KAAK,MAAMC,YAAY,IAAIJ,qBAAqB,CAACE,IAAI,EAAE;UAAA,IAAAG,qBAAA;UACrD,MAAMC,gBAAgB,GAAG,MAAMlD,WAAW,CAACY,GAAG,EAAEoC,YAAY,CAACG,YAAY,CAAC;UAC1ET,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAEG,YAAY,CAACG,YAAY,EAAED,gBAAgB,CAAC,CAAC,CAAC;;UAE1F,IAAI,CAAAA,gBAAgB,aAAhBA,gBAAgB,wBAAAD,qBAAA,GAAhBC,gBAAgB,CAAEJ,IAAI,cAAAG,qBAAA,uBAAtBA,qBAAA,CAAwBG,MAAM,IAAG,CAAC,EAAE;YACtC,MAAMC,oBAAoB,GAAGH,gBAAgB,CAACJ,IAAI,CAACN,GAAG,CAAC,MAAOc,KAAK,IAAK;cACtE,IAAIA,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEC,OAAO,EAAE;gBAClB,MAAMC,mBAAmB,GAAG,MAAMtD,uBAAuB,CAACoD,KAAK,CAACC,OAAO,CAAC;gBACxEb,OAAO,CAACG,GAAG,CAAC,oCAAoC,EAAES,KAAK,CAACC,OAAO,EAAEC,mBAAmB,CAAC,CAAC,CAAC;gBACvF,OAAOA,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;cACjC;cACA,OAAO,IAAI;YACb,CAAC,CAAC;;YAEF;YACA,MAAMC,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,oBAAoB,CAAC;YAChEN,8BAA8B,CAACC,YAAY,CAACG,YAAY,CAAC,GAAGM,gBAAgB,CAACG,MAAM,CAACC,OAAO,CAAC;UAC9F;QACF;QAEAnB,OAAO,CAACG,GAAG,CAAC,iCAAiC,EAAEE,8BAA8B,CAAC,CAAC,CAAC;QAChF5B,6BAA6B,CAAC4B,8BAA8B,CAAC;QAC7D1B,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDoB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAC7B,GAAG,CAAC,CAAC;;EAET;EACA,MAAMkD,oBAAoB,GAAGA,CAAA,KAAM;IACjC,OAAO9C,aAAa,CAACwB,GAAG,CAAEQ,YAAY,IAAK;MACzC,MAAMzB,YAAY,GAAGL,0BAA0B,CAAC8B,YAAY,CAACG,YAAY,CAAC,IAAI,EAAE;MAChF,MAAMY,QAAQ,GAAGzC,kBAAkB,CAACC,YAAY,CAAC;MAEjD,MAAMyC,SAAS,GAAG;QAChBpD,GAAG;QACHuC,YAAY,EAAEH,YAAY,CAACG,YAAY;QACvCc,MAAM,EAAEnD;MACV,CAAC;MAEDiD,QAAQ,CAACtC,OAAO,CAAC,CAACyC,KAAK,EAAEC,KAAK,KAAK;QACjCH,SAAS,CAAC,OAAOG,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG;UAAEnC,MAAM,EAAEkC,KAAK,CAAClC,MAAM;UAAEE,MAAM,EAAEgC,KAAK,CAAChC;QAAO,CAAC;MAChF,CAAC,CAAC;;MAEF;MACA,KAAK,IAAIC,CAAC,GAAG4B,QAAQ,CAACX,MAAM,EAAEjB,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACzC6B,SAAS,CAAC,OAAO7B,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI;MAClC;MAEA,OAAO6B,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMI,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF;MACA,MAAMC,aAAa,GAAGP,oBAAoB,CAAC,CAAC;MAC5CpB,OAAO,CAACG,GAAG,CAAC,2BAA2B,EAAEwB,aAAa,CAAC,CAAC,CAAC;;MAEzD,MAAMC,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAAC;;MAExC;MACA,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,aAAa,CAACjB,MAAM,EAAEjB,CAAC,EAAE,EAAE;QAC7C,MAAM6B,SAAS,GAAGK,aAAa,CAAClC,CAAC,CAAC;QAClCO,OAAO,CAACG,GAAG,CAAC,4CAA4CmB,SAAS,CAACb,YAAY,EAAE,CAAC,CAAC,CAAC;;QAEnF;QACA,IAAImB,sBAAsB,CAACE,GAAG,CAACR,SAAS,CAACb,YAAY,CAAC,EAAE;UACtDT,OAAO,CAACG,GAAG,CAAC,4CAA4CmB,SAAS,CAACb,YAAY,EAAE,CAAC;UACjF;QACF;;QAEA;QACA,MAAMsB,QAAQ,GAAG,MAAMtE,YAAY,CAAC6D,SAAS,CAAC;QAC9CtB,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAE4B,QAAQ,CAAC,CAAC,CAAC;;QAEnD;QACA,IAAIA,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAE3B,IAAI,EAAE;UAClBJ,OAAO,CAACG,GAAG,CAAC,kCAAkCmB,SAAS,CAACb,YAAY,EAAE,CAAC;QACzE,CAAC,MAAM;UACLT,OAAO,CAACG,GAAG,CAAC,6BAA6BmB,SAAS,CAACb,YAAY,EAAE,CAAC;QACpE;;QAEA;QACAmB,sBAAsB,CAACI,GAAG,CAACV,SAAS,CAACb,YAAY,CAAC;MACpD;;MAEA;MACAwB,KAAK,CAAC,wCAAwC,CAAC;IAEjD,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDgC,KAAK,CAAC,oDAAoD,CAAC;IAC7D;EAEF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAMjE,QAAQ,CAAC,mBAAmBC,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE;MAAED;IAAI;EAAE,CAAC,CAAC;EAE/E,oBACEN,OAAA;IAAAuE,QAAA,gBACEvE,OAAA;MAAAuE,QAAA,EAAI;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3C7D,OAAO,gBACNd,OAAA;MAAAuE,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAC/B3C,MAAM,CAAC4C,IAAI,CAAChE,0BAA0B,CAAC,CAACkC,MAAM,GAAG,CAAC,gBACpD9C,OAAA;MAAAuE,QAAA,EACG7D,aAAa,CAACwB,GAAG,CAAEQ,YAAY,IAAK;QACnC,MAAMzB,YAAY,GAAGL,0BAA0B,CAAC8B,YAAY,CAACG,YAAY,CAAC,IAAI,EAAE;QAEhF,oBACE7C,OAAA;UAAAuE,QAAA,gBACEvE,OAAA;YAAAuE,QAAA,EAAK7B,YAAY,CAACG;UAAY;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EACnC1D,YAAY,CAAC6B,MAAM,GAAG,CAAC,gBACtB9C,OAAA;YAAO6E,MAAM,EAAC,GAAG;YAAAN,QAAA,gBACfvE,OAAA;cAAAuE,QAAA,eACEvE,OAAA;gBAAAuE,QAAA,gBACEvE,OAAA;kBAAAuE,QAAA,EAAI;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACf3E,OAAA;kBAAAuE,QAAA,EAAI;gBAAY;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACR3E,OAAA;cAAAuE,QAAA,EACGvD,kBAAkB,CAACC,YAAY,CAAC,CAACiB,GAAG,CAAC,CAAC4C,IAAI,EAAEjB,KAAK,kBAChD7D,OAAA;gBAAAuE,QAAA,gBACEvE,OAAA;kBAAAuE,QAAA,EAAKO,IAAI,CAACpD;gBAAM;kBAAA8C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACtB3E,OAAA;kBAAAuE,QAAA,EAAKO,IAAI,CAAClD;gBAAM;kBAAA4C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAFfd,KAAK;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAGV,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,gBAER3E,OAAA;YAAAuE,QAAA,EAAG;UAAkD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CACzD;QAAA,GArBOjC,YAAY,CAACG,YAAY;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsB9B,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,gBAEN3E,OAAA;MAAAuE,QAAA,EAAG;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACpC,eAED3E,OAAA;MAAQ+E,OAAO,EAAEjB,gBAAiB;MAAAS,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvD3E,OAAA;MAAQ+E,OAAO,EAAET,UAAW;MAAAC,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACzE,EAAA,CAzMID,SAAS;EAAA,QACIR,WAAW,EACXD,WAAW,EAEbM,WAAW;AAAA;AAAAkF,EAAA,GAJtB/E,SAAS;AA2Mf,eAAeA,SAAS;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}