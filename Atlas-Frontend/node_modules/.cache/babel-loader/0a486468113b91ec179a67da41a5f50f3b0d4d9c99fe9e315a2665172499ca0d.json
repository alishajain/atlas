{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Function to upload an image\nconst uploadImage = async (imageData, imageName, RSN, userId) => {\n  const formData = new FormData();\n  formData.append('Image', imageData); // Append image data\n  formData.append('ImageName', imageName);\n  formData.append('RSN', RSN);\n  formData.append('UserId', userId);\n  try {\n    const response = await axios.post('http://localhost:5000/api/upload-image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 5000\n    });\n    if (response && response.data) {\n      console.log(\"Server response:\", response.data);\n      return response.data; // Assuming the server returns a message\n    }\n  } catch (error) {\n    console.error(\"Error during image upload:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch image by RSN\nexport const getImageByRSN = async RSN => {\n  try {\n    // Ensure RSN is provided and valid\n    if (!RSN) {\n      throw new Error('RSN is required to fetch image');\n    }\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\n\n    // Ensure response is valid and return the image data\n    if (response && response.data) {\n      return response.data; // This should return ImageData (base64 string or file path)\n    } else {\n      throw new Error('Invalid response from server');\n    }\n  } catch (error) {\n    // Log and handle different error cases\n    console.error(\"Error fetching image:\", error);\n    if (error.response) {\n      // If the server responded with an error\n      console.error('Response error:', error.response.data);\n      console.error('Status code:', error.response.status);\n    } else if (error.request) {\n      // If no response was received\n      console.error('No response from server:', error.request);\n    } else {\n      // Error while setting up the request\n      console.error('Request setup error:', error.message);\n    }\n    throw error; // Propagate error for further handling\n  }\n};","map":{"version":3,"names":["axios","API_URL","uploadImage","imageData","imageName","RSN","userId","formData","FormData","append","response","post","headers","timeout","data","console","log","error","getImageByRSN","Error","get","status","request","message"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/ImageApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Function to upload an image\r\nconst uploadImage = async (imageData, imageName, RSN, userId) => {\r\n  const formData = new FormData();\r\n  formData.append('Image', imageData); // Append image data\r\n  formData.append('ImageName', imageName);\r\n  formData.append('RSN', RSN);\r\n  formData.append('UserId', userId);\r\n\r\n  try {\r\n    const response = await axios.post('http://localhost:5000/api/upload-image', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n      timeout: 5000,\r\n    });\r\n\r\n    if (response && response.data) {\r\n      console.log(\"Server response:\", response.data);\r\n      return response.data; // Assuming the server returns a message\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during image upload:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to fetch image by RSN\r\nexport const getImageByRSN = async (RSN) => {\r\n  try {\r\n    // Ensure RSN is provided and valid\r\n    if (!RSN) {\r\n      throw new Error('RSN is required to fetch image');\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\r\n    \r\n    // Ensure response is valid and return the image data\r\n    if (response && response.data) {\r\n      return response.data; // This should return ImageData (base64 string or file path)\r\n    } else {\r\n      throw new Error('Invalid response from server');\r\n    }\r\n  } catch (error) {\r\n    // Log and handle different error cases\r\n    console.error(\"Error fetching image:\", error);\r\n\r\n    if (error.response) {\r\n      // If the server responded with an error\r\n      console.error('Response error:', error.response.data);\r\n      console.error('Status code:', error.response.status);\r\n    } else if (error.request) {\r\n      // If no response was received\r\n      console.error('No response from server:', error.request);\r\n    } else {\r\n      // Error while setting up the request\r\n      console.error('Request setup error:', error.message);\r\n    }\r\n\r\n    throw error; // Propagate error for further handling\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAOC,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,KAAK;EAC/D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,CAAC,CAAC,CAAC;EACrCI,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEL,SAAS,CAAC;EACvCG,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEJ,GAAG,CAAC;EAC3BE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC;EAEjC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,wCAAwC,EAAEJ,QAAQ,EAAE;MACpFK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB,CAAC;MAClDC,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,IAAIH,QAAQ,IAAIA,QAAQ,CAACI,IAAI,EAAE;MAC7BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,QAAQ,CAACI,IAAI,CAAC;MAC9C,OAAOJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOb,GAAG,IAAK;EAC1C,IAAI;IACF;IACA,IAAI,CAACA,GAAG,EAAE;MACR,MAAM,IAAIc,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,MAAMT,QAAQ,GAAG,MAAMV,KAAK,CAACoB,GAAG,CAAC,GAAGnB,OAAO,UAAUI,GAAG,EAAE,CAAC;;IAE3D;IACA,IAAIK,QAAQ,IAAIA,QAAQ,CAACI,IAAI,EAAE;MAC7B,OAAOJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACd;IACAF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAE7C,IAAIA,KAAK,CAACP,QAAQ,EAAE;MAClB;MACAK,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACP,QAAQ,CAACI,IAAI,CAAC;MACrDC,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACP,QAAQ,CAACW,MAAM,CAAC;IACtD,CAAC,MAAM,IAAIJ,KAAK,CAACK,OAAO,EAAE;MACxB;MACAP,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACK,OAAO,CAAC;IAC1D,CAAC,MAAM;MACL;MACAP,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACM,OAAO,CAAC;IACtD;IAEA,MAAMN,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}