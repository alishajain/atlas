{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nconst isValidValue = value => {\n  return value !== null && value !== \"\" && value !== 0;\n};\nconst YarnUsage = ({\n  colorMatchingData,\n  colorDetails\n}) => {\n  _s();\n  // Function to calculate and log the total yarn usage\n  const logTotalYarnUsage = () => {\n    if (!colorMatchingData || !colorDetails) return;\n    const groupedData = colorMatchingData === null || colorMatchingData === void 0 ? void 0 : colorMatchingData.reduce((acc, item) => {\n      const {\n        MatchingName\n      } = item;\n      if (!acc[MatchingName]) {\n        acc[MatchingName] = [];\n      }\n      acc[MatchingName].push(item);\n      return acc;\n    }, {});\n    Object.keys(groupedData).forEach(matchingName => {\n      const yarnUsageByYarnId = {};\n      groupedData[matchingName].forEach(item => {\n        var _colorDetails$ColorId;\n        const ColorId = item.ColorId;\n        const details = (_colorDetails$ColorId = colorDetails[ColorId]) === null || _colorDetails$ColorId === void 0 ? void 0 : _colorDetails$ColorId[0];\n\n        // Check if color details are valid\n        if (details) {\n          const yarnKeys = [\"BaseColor\", \"Color1\", \"Color2\", \"Color3\", \"Color4\", \"Color5\", \"Color6\", \"Color7\", \"Color8\", \"Color9\", \"Color10\", \"Color11\", \"Color12\", \"Color13\", \"Color14\"];\n          yarnKeys.forEach(colorKey => {\n            const colorData = details[colorKey];\n            if (colorData && isValidValue(colorData.Weight) && isValidValue(colorData.YarnId)) {\n              const yarnId = colorData.YarnId;\n              const weight = colorData.Weight;\n\n              // Sum up the weight for the yarnId\n              if (!yarnUsageByYarnId[yarnId]) {\n                yarnUsageByYarnId[yarnId] = 0;\n              }\n              yarnUsageByYarnId[yarnId] += weight;\n            }\n          });\n        }\n      });\n\n      // Log the total yarn usage for the current MatchingName\n      console.log(`Total Yarn Usage for Matching Name: ${matchingName}`);\n      Object.keys(yarnUsageByYarnId).forEach(yarnId => {\n        console.log(`Yarn ID: ${yarnId}, Total Weight: ${yarnUsageByYarnId[yarnId]} grams`);\n      });\n    });\n  };\n  useEffect(() => {\n    logTotalYarnUsage();\n  }, [colorMatchingData, colorDetails]);\n  return null;\n};\n_s(YarnUsage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = YarnUsage;\nexport default YarnUsage;\nvar _c;\n$RefreshReg$(_c, \"YarnUsage\");","map":{"version":3,"names":["React","useEffect","isValidValue","value","YarnUsage","colorMatchingData","colorDetails","_s","logTotalYarnUsage","groupedData","reduce","acc","item","MatchingName","push","Object","keys","forEach","matchingName","yarnUsageByYarnId","_colorDetails$ColorId","ColorId","details","yarnKeys","colorKey","colorData","Weight","YarnId","yarnId","weight","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/YarnUsage.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst isValidValue = (value) => {\r\n  return value !== null && value !== \"\" && value !== 0;\r\n};\r\n\r\nconst YarnUsage = ({ colorMatchingData, colorDetails }) => {\r\n  // Function to calculate and log the total yarn usage\r\n  const logTotalYarnUsage = () => {\r\n    if (!colorMatchingData || !colorDetails) return;\r\n\r\n    const groupedData = colorMatchingData?.reduce((acc, item) => {\r\n      const { MatchingName } = item;\r\n      if (!acc[MatchingName]) {\r\n        acc[MatchingName] = [];\r\n      }\r\n      acc[MatchingName].push(item);\r\n      return acc;\r\n    }, {});\r\n\r\n    Object.keys(groupedData).forEach((matchingName) => {\r\n      const yarnUsageByYarnId = {};\r\n\r\n      groupedData[matchingName].forEach((item) => {\r\n        const ColorId = item.ColorId;\r\n        const details = colorDetails[ColorId]?.[0];\r\n\r\n        // Check if color details are valid\r\n        if (details) {\r\n          const yarnKeys = [\r\n            \"BaseColor\",\r\n            \"Color1\",\r\n            \"Color2\",\r\n            \"Color3\",\r\n            \"Color4\",\r\n            \"Color5\",\r\n            \"Color6\",\r\n            \"Color7\",\r\n            \"Color8\",\r\n            \"Color9\",\r\n            \"Color10\",\r\n            \"Color11\",\r\n            \"Color12\",\r\n            \"Color13\",\r\n            \"Color14\",\r\n          ];\r\n\r\n          yarnKeys.forEach((colorKey) => {\r\n            const colorData = details[colorKey];\r\n            if (colorData && isValidValue(colorData.Weight) && isValidValue(colorData.YarnId)) {\r\n              const yarnId = colorData.YarnId;\r\n              const weight = colorData.Weight;\r\n\r\n              // Sum up the weight for the yarnId\r\n              if (!yarnUsageByYarnId[yarnId]) {\r\n                yarnUsageByYarnId[yarnId] = 0;\r\n              }\r\n              yarnUsageByYarnId[yarnId] += weight;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      // Log the total yarn usage for the current MatchingName\r\n      console.log(`Total Yarn Usage for Matching Name: ${matchingName}`);\r\n      Object.keys(yarnUsageByYarnId).forEach((yarnId) => {\r\n        console.log(`Yarn ID: ${yarnId}, Total Weight: ${yarnUsageByYarnId[yarnId]} grams`);\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    logTotalYarnUsage();\r\n  }, [colorMatchingData, colorDetails]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default YarnUsage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}