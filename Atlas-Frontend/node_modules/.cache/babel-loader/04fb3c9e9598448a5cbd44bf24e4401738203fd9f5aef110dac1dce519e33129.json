{"ast":null,"code":"import axios from 'axios';\n\n// Set base URL for API (adjust as needed)\nconst API_URL = 'http://localhost:5000/api'; // Change to your server URL\n\n// Function to upload an image\nexport const uploadImage = async (imageData, imageName, RSN, userId) => {\n  const formData = new FormData();\n\n  // Check if imageData is a valid file\n  if (!imageData || !(imageData instanceof File)) {\n    throw new Error('Invalid image data provided');\n  }\n  formData.append('image', imageData); // Append image data\n  formData.append('imageName', imageName); // Append image name\n  formData.append('RSN', RSN); // Append RSN\n  formData.append('userId', userId); // Append userId\n\n  try {\n    // Log form data for debugging (you might remove this in production)\n    console.log('Form data being sent:', formData);\n\n    // Send the form data to the server using axios POST request\n    const response = await axios.post(`${API_URL}/upload-image`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data' // Ensure this header is set for file uploads\n      }\n    });\n\n    // Check if response is valid and return the data\n    if (response && response.data) {\n      return response.data;\n    } else {\n      throw new Error('Invalid response from server');\n    }\n  } catch (error) {\n    // Log and handle different error cases\n    console.error('Error uploading image:', error);\n    if (error.response) {\n      // If the server responded with an error\n      console.error('Response error:', error.response.data);\n      console.error('Status code:', error.response.status);\n    } else if (error.request) {\n      // If no response was received\n      console.error('No response from server:', error.request);\n    } else {\n      // Error while setting up the request\n      console.error('Request setup error:', error.message);\n    }\n    throw error; // Rethrow the error to be handled in the component\n  }\n};\n\n// Function to fetch image by RSN\nexport const getImageByRSN = async RSN => {\n  try {\n    // Ensure RSN is provided and valid\n    if (!RSN) {\n      throw new Error('RSN is required to fetch image');\n    }\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\n\n    // Ensure response is valid and return the image data\n    if (response && response.data) {\n      return response.data; // This should return ImageData (base64 string or file path)\n    } else {\n      throw new Error('Invalid response from server');\n    }\n  } catch (error) {\n    // Log and handle different error cases\n    console.error(\"Error fetching image:\", error);\n    if (error.response) {\n      // If the server responded with an error\n      console.error('Response error:', error.response.data);\n      console.error('Status code:', error.response.status);\n    } else if (error.request) {\n      // If no response was received\n      console.error('No response from server:', error.request);\n    } else {\n      // Error while setting up the request\n      console.error('Request setup error:', error.message);\n    }\n    throw error; // Propagate error for further handling\n  }\n};","map":{"version":3,"names":["axios","API_URL","uploadImage","imageData","imageName","RSN","userId","formData","FormData","File","Error","append","console","log","response","post","headers","data","error","status","request","message","getImageByRSN","get"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/API/ImageApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set base URL for API (adjust as needed)\r\nconst API_URL = 'http://localhost:5000/api'; // Change to your server URL\r\n\r\n// Function to upload an image\r\nexport const uploadImage = async (imageData, imageName, RSN, userId) => {\r\n  const formData = new FormData();\r\n  \r\n  // Check if imageData is a valid file\r\n  if (!imageData || !(imageData instanceof File)) {\r\n    throw new Error('Invalid image data provided');\r\n  }\r\n\r\n  formData.append('image', imageData); // Append image data\r\n  formData.append('imageName', imageName); // Append image name\r\n  formData.append('RSN', RSN); // Append RSN\r\n  formData.append('userId', userId); // Append userId\r\n\r\n  try {\r\n    // Log form data for debugging (you might remove this in production)\r\n    console.log('Form data being sent:', formData);\r\n\r\n    // Send the form data to the server using axios POST request\r\n    const response = await axios.post(`${API_URL}/upload-image`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data', // Ensure this header is set for file uploads\r\n      },\r\n    });\r\n\r\n    // Check if response is valid and return the data\r\n    if (response && response.data) {\r\n      return response.data;\r\n    } else {\r\n      throw new Error('Invalid response from server');\r\n    }\r\n  } catch (error) {\r\n    // Log and handle different error cases\r\n    console.error('Error uploading image:', error);\r\n    \r\n    if (error.response) {\r\n      // If the server responded with an error\r\n      console.error('Response error:', error.response.data);\r\n      console.error('Status code:', error.response.status);\r\n    } else if (error.request) {\r\n      // If no response was received\r\n      console.error('No response from server:', error.request);\r\n    } else {\r\n      // Error while setting up the request\r\n      console.error('Request setup error:', error.message);\r\n    }\r\n\r\n    throw error; // Rethrow the error to be handled in the component\r\n  }\r\n};\r\n\r\n// Function to fetch image by RSN\r\nexport const getImageByRSN = async (RSN) => {\r\n  try {\r\n    // Ensure RSN is provided and valid\r\n    if (!RSN) {\r\n      throw new Error('RSN is required to fetch image');\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/image/${RSN}`);\r\n    \r\n    // Ensure response is valid and return the image data\r\n    if (response && response.data) {\r\n      return response.data; // This should return ImageData (base64 string or file path)\r\n    } else {\r\n      throw new Error('Invalid response from server');\r\n    }\r\n  } catch (error) {\r\n    // Log and handle different error cases\r\n    console.error(\"Error fetching image:\", error);\r\n\r\n    if (error.response) {\r\n      // If the server responded with an error\r\n      console.error('Response error:', error.response.data);\r\n      console.error('Status code:', error.response.status);\r\n    } else if (error.request) {\r\n      // If no response was received\r\n      console.error('No response from server:', error.request);\r\n    } else {\r\n      // Error while setting up the request\r\n      console.error('Request setup error:', error.message);\r\n    }\r\n\r\n    throw error; // Propagate error for further handling\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}