{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{addColorDetail}from\"../API/ColorDetailApi\";import{getColorId}from\"../API/ColorApi\";import{getYarnIds}from\"../API/YarnApi\";import{useSelector}from\"react-redux\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AddColorDetails=_ref=>{let{matchingName,RSN,size,selectedStates}=_ref;const initialRowState={ColorId:\"\",Size:size,BaseColor:{Name:\"\",Weight:\"\"},yarnCount:0,colors:[]};const[formData,setFormData]=useState([]);const[colorIds,setColorIds]=useState({});const[yarnIds,setYarnIds]=useState({});const[message,setMessage]=useState({type:\"\",content:\"\"});// Extract selected panels from selectedStates\nconst selectedPanels=Object.entries(selectedStates).filter(_ref2=>{let[_,value]=_ref2;return value===true;}).map(_ref3=>{let[key]=_ref3;return key;});// Set initial formData when selectedStates change\nuseEffect(()=>{setFormData(selectedPanels.map(panelName=>({...initialRowState,ColorId:panelName})));},[selectedStates]);// Fetch ColorId for each selected panel\nconst fetchColorId=async()=>{try{const newColorIds={};for(const Panel of selectedPanels){const data=await getColorId(RSN,matchingName,Panel);newColorIds[Panel]=data.ColorId;}// Update formData with the fetched ColorIds\nsetFormData(prevFormData=>prevFormData.map(row=>({...row,ColorId:newColorIds[row.ColorId]||row.ColorId})));setColorIds(newColorIds);}catch(error){console.error(\"Error fetching ColorId:\",error);setMessage({type:\"error\",content:\"Error fetching ColorIds.\"});}};// Fetch YarnIds for dropdown selection\nconst fetchYarnIds=async()=>{try{const response=await getYarnIds();if(response&&response.data&&typeof response.data===\"object\"){setYarnIds(response.data);}else{console.error(\"Error: YarnIds response is not an object\",response);setMessage({type:\"error\",content:\"Invalid data format for YarnIds.\"});}}catch(error){console.error(\"Error fetching YarnIds:\",error);setMessage({type:\"error\",content:\"Error fetching YarnIds.\"});}};// Handle the number of yarns input change\nconst handleYarnCountChange=(e,rowIndex)=>{const yarnCount=parseInt(e.target.value,10);const updatedFormData=formData.map((row,index)=>{if(index===rowIndex){return{...row,yarnCount:yarnCount,// Update the yarn count for this row\ncolors:Array(yarnCount).fill({Name:\"\",Weight:\"\"})// Adjust the colors array size based on yarn count\n};}return row;});setFormData(updatedFormData);};// Helper function to calculate the total weight for a row\nconst calculateTotalWeight=row=>{const baseWeight=parseFloat(row.BaseColor.Weight)||0;const yarnsWeight=row.colors.reduce((sum,color)=>{return sum+(parseFloat(color.Weight)||0);},0);return baseWeight+yarnsWeight;// Sum base color weight and yarns' weights\n};// Handle input changes (BaseColor, Color1, Color2, etc.)\nconst handleInputChange=function(e,rowIndex,field){let colorIndex=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;const{name,value}=e.target;const updatedFormData=formData.map((row,index)=>{if(index===rowIndex){const updatedRow={...row};if(field===\"colors\"&&colorIndex!==null){updatedRow.colors=updatedRow.colors.map((color,idx)=>idx===colorIndex?{...color,[name]:value}:color);}else if(field===\"BaseColor\"){updatedRow.BaseColor={...updatedRow.BaseColor,[name]:value};}else{updatedRow[name]=value;}// Recalculate total weight after input change\nupdatedRow.totalWeight=calculateTotalWeight(updatedRow);return updatedRow;}return row;});setFormData(updatedFormData);};// Fetch userId from Redux store (outside of the handleSubmit function)\nconst userId=useSelector(state=>state.user.userId);// Handle form submission\nconst handleSubmit=async e=>{e.preventDefault();const colorData=formData.map(row=>{const colors=row.colors.reduce((acc,color,index)=>{acc[`Color${index+1}`]={Name:color.Name,Weight:color.Weight};return acc;},{});return{ColorId:row.ColorId,Size:row.Size,BaseColor:row.BaseColor,UserId:userId,...colors};});try{const responses=await Promise.all(colorData.map(data=>addColorDetail(data)));setMessage({type:\"success\",content:\"Data submitted successfully!\"});}catch(error){console.error(\"Error submitting form:\",error);setMessage({type:\"error\",content:\"Error submitting the form.\"});}};useEffect(()=>{fetchYarnIds();},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:matchingName}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchColorId,children:\"Fetch ColorIds\"}),message.content&&/*#__PURE__*/_jsx(\"div\",{style:{color:message.type===\"error\"?\"red\":\"green\",marginBottom:\"10px\",fontWeight:\"bold\"},children:message.content}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"table\",{border:\"1\",style:{width:\"100%\",tableLayout:\"auto\"},children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{style:{width:\"4%\"},children:\"Panel\"}),/*#__PURE__*/_jsx(\"th\",{style:{width:\"4%\"},children:\"Total Weight\"}),/*#__PURE__*/_jsx(\"th\",{style:{width:\"4%\"},children:\"Base Yarn\"}),/*#__PURE__*/_jsx(\"th\",{style:{width:\"4%\"},children:\"Yarns Used\"}),\" \",[...Array(14)].map((_,index)=>/*#__PURE__*/_jsxs(\"th\",{style:{width:\"6%\"},children:[\"Yarn \",index+1]},index))]})}),/*#__PURE__*/_jsx(\"tbody\",{children:formData.map((row,rowIndex)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:row.ColorId}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"totalWeight\",value:row.totalWeight||\"\",readOnly:true,style:{backgroundColor:\"#f0f0f0\"}})}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsxs(\"select\",{name:\"Name\",value:row.BaseColor.Name||\"\",onChange:e=>handleInputChange(e,rowIndex,\"BaseColor\"),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Yarn\"}),Object.values(yarnIds).length===0?/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"No Yarn available\"}):Object.values(yarnIds).map(yarn=>/*#__PURE__*/_jsx(\"option\",{value:yarn.Name,children:yarn.YarnId},yarn.YarnId))]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"Weight\",value:row.BaseColor.Weight||\"\",placeholder:\"Base Color Weight\",onChange:e=>handleInputChange(e,rowIndex,\"BaseColor\")})]}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:row.yarnCount||0,onChange:e=>handleYarnCountChange(e,rowIndex),min:0,max:14,placeholder:\"Number of Yarns\"})}),row.colors.map((color,colorIndex)=>/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsxs(\"select\",{name:\"Name\",value:color.Name||\"\",onChange:e=>handleInputChange(e,rowIndex,\"colors\",colorIndex),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Yarn\"}),Object.values(yarnIds).length===0?/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"No Yarn available\"}):Object.values(yarnIds).map(yarn=>/*#__PURE__*/_jsx(\"option\",{value:yarn.Name,children:yarn.YarnId},yarn.YarnId))]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"Weight\",value:color.Weight||\"\",placeholder:`Color ${colorIndex+1} Weight`,onChange:e=>handleInputChange(e,rowIndex,\"colors\",colorIndex)})]},colorIndex))]},rowIndex))})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]})]});};export default AddColorDetails;","map":{"version":3,"names":["React","useState","useEffect","addColorDetail","getColorId","getYarnIds","useSelector","jsx","_jsx","jsxs","_jsxs","AddColorDetails","_ref","matchingName","RSN","size","selectedStates","initialRowState","ColorId","Size","BaseColor","Name","Weight","yarnCount","colors","formData","setFormData","colorIds","setColorIds","yarnIds","setYarnIds","message","setMessage","type","content","selectedPanels","Object","entries","filter","_ref2","_","value","map","_ref3","key","panelName","fetchColorId","newColorIds","Panel","data","prevFormData","row","error","console","fetchYarnIds","response","handleYarnCountChange","e","rowIndex","parseInt","target","updatedFormData","index","Array","fill","calculateTotalWeight","baseWeight","parseFloat","yarnsWeight","reduce","sum","color","handleInputChange","field","colorIndex","arguments","length","undefined","name","updatedRow","idx","totalWeight","userId","state","user","handleSubmit","preventDefault","colorData","acc","UserId","responses","Promise","all","children","onClick","style","marginBottom","fontWeight","onSubmit","border","width","tableLayout","readOnly","backgroundColor","onChange","values","yarn","YarnId","placeholder","min","max"],"sources":["C:/Users/Bhupesh/OneDrive/Desktop/Alisha/atlas/Atlas-Frontend/src/Components/AddColorDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { addColorDetail } from \"../API/ColorDetailApi\";\r\nimport { getColorId } from \"../API/ColorApi\";\r\nimport { getYarnIds } from \"../API/YarnApi\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AddColorDetails = ({ matchingName, RSN, size, selectedStates }) => {\r\n  const initialRowState = {\r\n    ColorId: \"\",\r\n    Size: size,\r\n    BaseColor: { Name: \"\", Weight: \"\" },\r\n    yarnCount: 0,\r\n    colors: [],\r\n  };\r\n\r\n  const [formData, setFormData] = useState([]);\r\n  const [colorIds, setColorIds] = useState({});\r\n  const [yarnIds, setYarnIds] = useState({});\r\n  const [message, setMessage] = useState({ type: \"\", content: \"\" });\r\n\r\n  // Extract selected panels from selectedStates\r\n  const selectedPanels = Object.entries(selectedStates)\r\n    .filter(([_, value]) => value === true)\r\n    .map(([key]) => key);\r\n\r\n  // Set initial formData when selectedStates change\r\n  useEffect(() => {\r\n    setFormData(\r\n      selectedPanels.map((panelName) => ({\r\n        ...initialRowState,\r\n        ColorId: panelName,\r\n      }))\r\n    );\r\n  }, [selectedStates]);\r\n\r\n  // Fetch ColorId for each selected panel\r\n  const fetchColorId = async () => {\r\n    try {\r\n      const newColorIds = {};\r\n\r\n      for (const Panel of selectedPanels) {\r\n        const data = await getColorId(RSN, matchingName, Panel);\r\n        newColorIds[Panel] = data.ColorId;\r\n      }\r\n\r\n      // Update formData with the fetched ColorIds\r\n      setFormData((prevFormData) =>\r\n        prevFormData.map((row) => ({\r\n          ...row,\r\n          ColorId: newColorIds[row.ColorId] || row.ColorId,\r\n        }))\r\n      );\r\n      setColorIds(newColorIds);\r\n    } catch (error) {\r\n      console.error(\"Error fetching ColorId:\", error);\r\n      setMessage({ type: \"error\", content: \"Error fetching ColorIds.\" });\r\n    }\r\n  };\r\n\r\n  // Fetch YarnIds for dropdown selection\r\n  const fetchYarnIds = async () => {\r\n    try {\r\n      const response = await getYarnIds();\r\n\r\n      if (response && response.data && typeof response.data === \"object\") {\r\n        setYarnIds(response.data);\r\n      } else {\r\n        console.error(\"Error: YarnIds response is not an object\", response);\r\n        setMessage({\r\n          type: \"error\",\r\n          content: \"Invalid data format for YarnIds.\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching YarnIds:\", error);\r\n      setMessage({ type: \"error\", content: \"Error fetching YarnIds.\" });\r\n    }\r\n  };\r\n\r\n  // Handle the number of yarns input change\r\n  const handleYarnCountChange = (e, rowIndex) => {\r\n    const yarnCount = parseInt(e.target.value, 10);\r\n    const updatedFormData = formData.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        return {\r\n          ...row,\r\n          yarnCount: yarnCount, // Update the yarn count for this row\r\n          colors: Array(yarnCount).fill({ Name: \"\", Weight: \"\" }), // Adjust the colors array size based on yarn count\r\n        };\r\n      }\r\n      return row;\r\n    });\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Helper function to calculate the total weight for a row\r\n  const calculateTotalWeight = (row) => {\r\n    const baseWeight = parseFloat(row.BaseColor.Weight) || 0;\r\n    const yarnsWeight = row.colors.reduce((sum, color) => {\r\n      return sum + (parseFloat(color.Weight) || 0);\r\n    }, 0);\r\n\r\n    return baseWeight + yarnsWeight; // Sum base color weight and yarns' weights\r\n  };\r\n\r\n  // Handle input changes (BaseColor, Color1, Color2, etc.)\r\n  const handleInputChange = (e, rowIndex, field, colorIndex = null) => {\r\n    const { name, value } = e.target;\r\n\r\n    const updatedFormData = formData.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        const updatedRow = { ...row };\r\n\r\n        if (field === \"colors\" && colorIndex !== null) {\r\n          updatedRow.colors = updatedRow.colors.map((color, idx) =>\r\n            idx === colorIndex ? { ...color, [name]: value } : color\r\n          );\r\n        } else if (field === \"BaseColor\") {\r\n          updatedRow.BaseColor = {\r\n            ...updatedRow.BaseColor,\r\n            [name]: value,\r\n          };\r\n        } else {\r\n          updatedRow[name] = value;\r\n        }\r\n\r\n        // Recalculate total weight after input change\r\n        updatedRow.totalWeight = calculateTotalWeight(updatedRow);\r\n\r\n        return updatedRow;\r\n      }\r\n      return row;\r\n    });\r\n\r\n    setFormData(updatedFormData);\r\n  };\r\n\r\n  // Fetch userId from Redux store (outside of the handleSubmit function)\r\n  const userId = useSelector((state) => state.user.userId);\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const colorData = formData.map((row) => {\r\n      const colors = row.colors.reduce((acc, color, index) => {\r\n        acc[`Color${index + 1}`] = { Name: color.Name, Weight: color.Weight };\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        ColorId: row.ColorId,\r\n        Size: row.Size,\r\n        BaseColor: row.BaseColor,\r\n        UserId: userId,\r\n        \r\n        ...colors,\r\n      };\r\n    });\r\n\r\n    try {\r\n      const responses = await Promise.all(\r\n        colorData.map((data) => addColorDetail(data))\r\n      );\r\n      setMessage({ type: \"success\", content: \"Data submitted successfully!\" });\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      setMessage({ type: \"error\", content: \"Error submitting the form.\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchYarnIds();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{matchingName}</h3>\r\n      <button onClick={fetchColorId}>Fetch ColorIds</button>\r\n      {message.content && (\r\n        <div\r\n          style={{\r\n            color: message.type === \"error\" ? \"red\" : \"green\",\r\n            marginBottom: \"10px\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {message.content}\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <table border=\"1\" style={{ width: \"100%\", tableLayout: \"auto\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ width: \"4%\" }}>Panel</th>\r\n              <th style={{ width: \"4%\" }}>Total Weight</th>\r\n              <th style={{ width: \"4%\" }}>Base Yarn</th>\r\n              <th style={{ width: \"4%\" }}>Yarns Used</th>{\" \"}\r\n              {[...Array(14)].map((_, index) => (\r\n                <th key={index} style={{ width: \"6%\" }}>\r\n                  Yarn {index + 1}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {formData.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                <td>{row.ColorId}</td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"totalWeight\"\r\n                    value={row.totalWeight || \"\"}\r\n                    readOnly\r\n                    style={{ backgroundColor: \"#f0f0f0\" }}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    name=\"Name\"\r\n                    value={row.BaseColor.Name || \"\"}\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  >\r\n                    <option value=\"\">Select Yarn</option>\r\n                    {Object.values(yarnIds).length === 0 ? (\r\n                      <option value=\"\">No Yarn available</option>\r\n                    ) : (\r\n                      Object.values(yarnIds).map((yarn) => (\r\n                        <option key={yarn.YarnId} value={yarn.Name}>\r\n                          {yarn.YarnId}\r\n                        </option>\r\n                      ))\r\n                    )}\r\n                  </select>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"Weight\"\r\n                    value={row.BaseColor.Weight || \"\"}\r\n                    placeholder=\"Base Color Weight\"\r\n                    onChange={(e) => handleInputChange(e, rowIndex, \"BaseColor\")}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={row.yarnCount || 0}\r\n                    onChange={(e) => handleYarnCountChange(e, rowIndex)}\r\n                    min={0}\r\n                    max={14}\r\n                    placeholder=\"Number of Yarns\"\r\n                  />\r\n                </td>\r\n                {row.colors.map((color, colorIndex) => (\r\n                  <td key={colorIndex}>\r\n                    <select\r\n                      name=\"Name\"\r\n                      value={color.Name || \"\"}\r\n                      onChange={(e) =>\r\n                        handleInputChange(e, rowIndex, \"colors\", colorIndex)\r\n                      }\r\n                    >\r\n                      <option value=\"\">Select Yarn</option>\r\n                      {Object.values(yarnIds).length === 0 ? (\r\n                        <option value=\"\">No Yarn available</option>\r\n                      ) : (\r\n                        Object.values(yarnIds).map((yarn) => (\r\n                          <option key={yarn.YarnId} value={yarn.Name}>\r\n                            {yarn.YarnId}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </select>\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"Weight\"\r\n                      value={color.Weight || \"\"}\r\n                      placeholder={`Color ${colorIndex + 1} Weight`}\r\n                      onChange={(e) =>\r\n                        handleInputChange(e, rowIndex, \"colors\", colorIndex)\r\n                      }\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddColorDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}